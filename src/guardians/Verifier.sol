
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/// @title Groth16 verifier template.
/// @author Remco Bloemen
/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed
/// (256 bytes) and compressed (128 bytes) format. A view function is provided
/// to compress proofs.
/// @notice See <https://2π.com/23/bn254-compression> for further explanation.
contract Verifier {

    /// Some of the provided public input values are larger than the field modulus.
    /// @dev Public input elements are not automatically reduced, as this is can be
    /// a dangerous source of bugs.
    error PublicInputNotInField();

    /// The proof is invalid.
    /// @dev This can mean that provided Groth16 proof points are not on their
    /// curves, that pairing equation fails, or that the proof is not for the
    /// provided public input.
    error ProofInvalid();
    /// The commitment is invalid
    /// @dev This can mean that provided commitment points and/or proof of knowledge are not on their
    /// curves, that pairing equation fails, or that the commitment and/or proof of knowledge is not for the
    /// commitment key.
    error CommitmentInvalid();

    // Addresses of precompiles
    uint256 constant PRECOMPILE_MODEXP = 0x05;
    uint256 constant PRECOMPILE_ADD = 0x06;
    uint256 constant PRECOMPILE_MUL = 0x07;
    uint256 constant PRECOMPILE_VERIFY = 0x08;

    // Base field Fp order P and scalar field Fr order R.
    // For BN254 these are computed as follows:
    //     t = 4965661367192848881
    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1
    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1
    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;
    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;

    // Extension field Fp2 = Fp[i] / (i² + 1)
    // Note: This is the complex extension field of Fp with i² = -1.
    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.
    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which
    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which
    //       Fp2 elements are encoded in the public interface as this became convention.

    // Constants in Fp
    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;
    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;
    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;

    // Exponents for inversions and square roots mod P
    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2
    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;

    // Groth16 alpha point in G1
    uint256 constant ALPHA_X = 21826560931879995508152947381699798510128926393004670542784990448193357546091;
    uint256 constant ALPHA_Y = 3964845050839614213114716627925459184713048233545980618613388113528325825142;

    // Groth16 beta point in G2 in powers of i
    uint256 constant BETA_NEG_X_0 = 15131963670695954217733221710084771434497582860405389681129513219783703837654;
    uint256 constant BETA_NEG_X_1 = 21136308840366265138319831636457742263942002480073929115632454327387899924640;
    uint256 constant BETA_NEG_Y_0 = 13022739211077244632841301647795319411247943004491255305333525223044568215874;
    uint256 constant BETA_NEG_Y_1 = 10317414864529236568533992571971035385289299721917791729538668219269516894654;

    // Groth16 gamma point in G2 in powers of i
    uint256 constant GAMMA_NEG_X_0 = 10634564175808963479404283625256967275861360708532928666452493995858637359841;
    uint256 constant GAMMA_NEG_X_1 = 20196806074438098542419862207033448313485850698252198331315125919736508617925;
    uint256 constant GAMMA_NEG_Y_0 = 17684006182569596918754933526696089480888615529450442507901210746390546537747;
    uint256 constant GAMMA_NEG_Y_1 = 17748361739655061847867437394034430141536615085060720824923054427220730164035;

    // Groth16 delta point in G2 in powers of i
    uint256 constant DELTA_NEG_X_0 = 9182497981129368165651220847570651498345041881880910101184994484952465072318;
    uint256 constant DELTA_NEG_X_1 = 16406829542817674199674951498459462079293032897570033877631512187279909618049;
    uint256 constant DELTA_NEG_Y_0 = 13508078587283073021461157524530541651063104860189286314167875032427686037579;
    uint256 constant DELTA_NEG_Y_1 = 15979405854564722446374039220536041807770311951313338468649395656364156969152;
    // Pedersen G point in G2 in powers of i
    uint256 constant PEDERSEN_G_X_0 = 12967882551912918022383673386923085212093536373849568309988061783638440273933;
    uint256 constant PEDERSEN_G_X_1 = 9447540753823832105324018209019058859942894778856080921448316282580048163859;
    uint256 constant PEDERSEN_G_Y_0 = 700364201357115449051934561172261135627054178885016287851397604385679553052;
    uint256 constant PEDERSEN_G_Y_1 = 18097600033654061883567488867534611351274039030409758704603313185639811923785;

    // Pedersen GSigmaNeg point in G2 in powers of i
    uint256 constant PEDERSEN_GSIGMANEG_X_0 = 9615754900725339132439386564577435702827826492708809614869528358285801807221;
    uint256 constant PEDERSEN_GSIGMANEG_X_1 = 18254547405658825546596384956982530312695388607607272473340784057073815308770;
    uint256 constant PEDERSEN_GSIGMANEG_Y_0 = 19733924503937138661446025907786661247527832373089529568172359481107480221366;
    uint256 constant PEDERSEN_GSIGMANEG_Y_1 = 21074189220472108020821108132668204478041632753448303375536900319169632905650;

    // Constant and public input points
    uint256 constant CONSTANT_X = 2576664173008018605427375258272890833297370841257330926568717536760336059481;
    uint256 constant CONSTANT_Y = 10237874832139029459945733433617303700597559825616500161268969553248920302253;
    uint256 constant PUB_0_X = 647115236963955744173772202698808799026115741973365903441082184816117074435;
    uint256 constant PUB_0_Y = 6471837219332592020765619878963905335231751483111147166024400358026258160691;
    uint256 constant PUB_1_X = 2378720218018753066527648458427363252446418412074280584154005664739565290378;
    uint256 constant PUB_1_Y = 14855752961750951152627581133674568157525215409540208071397304803025696345470;
    uint256 constant PUB_2_X = 18361976965716006966384070784216970943018858300759745242652704141328371329337;
    uint256 constant PUB_2_Y = 16400303837662419545745730021036166583792840733663080599552009491032544160113;
    uint256 constant PUB_3_X = 9540918119581284842567451871534815403252704025427549056934306465319626042386;
    uint256 constant PUB_3_Y = 20533028781545281312376380524319692624434967911536290985725829149962966359724;
    uint256 constant PUB_4_X = 17236988842247167379204011079095651978902848045927366937423184176845990774312;
    uint256 constant PUB_4_Y = 20513803706415404392494170832606610290674984647229323685640291467426864737662;
    uint256 constant PUB_5_X = 9223639981699025328714015551202577515786601609065216226045941693252085233358;
    uint256 constant PUB_5_Y = 17519650063520250880082963869784871645549248298294895184705572676150666824720;
    uint256 constant PUB_6_X = 16740546379040078562194531495425259257819050221685434589107688014278206573048;
    uint256 constant PUB_6_Y = 14031468087204831710827622538161774498258362948284582699328608874876479334172;
    uint256 constant PUB_7_X = 5648268454675328341175994281790592707762623766554563790389341417327101725870;
    uint256 constant PUB_7_Y = 5589039622266810727895859306403606158494779316768148862471549527727213269397;
    uint256 constant PUB_8_X = 11833118304022183235948196374488016305341734032260441588315525736111783698550;
    uint256 constant PUB_8_Y = 9303237057360074112579331557295626626293423503432347799841049156926239902334;
    uint256 constant PUB_9_X = 15392814767899403326890379671907176171662631881533998854881070625799677745553;
    uint256 constant PUB_9_Y = 18367501621061331979639054963753586123281754415011949157656379049521823505419;
    uint256 constant PUB_10_X = 17779533000725199094895426083298802489130799966029362816343561420121897738768;
    uint256 constant PUB_10_Y = 7885533092034315057849907268449330323813494067325588443379317248425462046966;
    uint256 constant PUB_11_X = 20571043887990466652894138998416402588340279859029339490418065051936586238583;
    uint256 constant PUB_11_Y = 15900206754079484576212382082314078583045682345950296798420114819505521241352;
    uint256 constant PUB_12_X = 7374720289034379295220366443654168475740015272731851700916743227830628722276;
    uint256 constant PUB_12_Y = 16344190127683683171404684848726108409816232266186603584587454180703596941981;
    uint256 constant PUB_13_X = 14909778479619336598574846066772622589897822664533479045517987221595711779164;
    uint256 constant PUB_13_Y = 18095217545815206944156886932497655434886198277115992557861658537530637463175;
    uint256 constant PUB_14_X = 289619598350397316540971883537072192415165763754846751972117958984768864943;
    uint256 constant PUB_14_Y = 9752909228730077666729807337948023855231591907915843631074267762130946114203;
    uint256 constant PUB_15_X = 11155600709886095979104646526007486547641007485285363126350778570262405575053;
    uint256 constant PUB_15_Y = 5985351613181257620434129362399315265061891283534029087798280148389954249877;
    uint256 constant PUB_16_X = 20490757941866301302060081188262946000846961768471193974167761730959791531358;
    uint256 constant PUB_16_Y = 17606800996750355386416383802765370079226887861762091003780519276398936422056;
    uint256 constant PUB_17_X = 16611422284726710513721555545156806088266099536841185573417493085632993328072;
    uint256 constant PUB_17_Y = 21506953894035941533429030707462603371649307934425855126688859498839406874066;
    uint256 constant PUB_18_X = 8770648995858363138823943676372691531226859941721882402534452631867704241687;
    uint256 constant PUB_18_Y = 8157727064013359698114010603747570742968778531671189889587523082666554795535;
    uint256 constant PUB_19_X = 13727314436474743817214028086452886252428538621352461872159508760371661203059;
    uint256 constant PUB_19_Y = 17653527237035428213664920586503222878710790154053389228440452353412790392285;
    uint256 constant PUB_20_X = 12840500988846130641266192264523486956840017926171258425608824904596806584146;
    uint256 constant PUB_20_Y = 11144223450539796587392924299386825591880738630828220386855391709559274713626;
    uint256 constant PUB_21_X = 6899795777159605665943447328508615705144836066332427795571393698886884907775;
    uint256 constant PUB_21_Y = 12495872676989160682251530903314581982554436724120491560428011905240954107991;
    uint256 constant PUB_22_X = 916153053350628970632889085173830928416106695062669310173091389069473285397;
    uint256 constant PUB_22_Y = 2422742914256031047692988280636900170239148015806916928761347277207856045344;
    uint256 constant PUB_23_X = 16917263899066099777522003606807689862988934211599989931069717218139968693845;
    uint256 constant PUB_23_Y = 445782630141918899947473671705386735659898260105190867116272324404501819290;
    uint256 constant PUB_24_X = 17791297103124578801937279888537192715545317354548510617127111492949404716502;
    uint256 constant PUB_24_Y = 10598852823152337550181599813498005149604159017214039005979057648420996459192;
    uint256 constant PUB_25_X = 3391272639989024256716975398231035949585779011287563546521392013900961329506;
    uint256 constant PUB_25_Y = 571983861709587677241301790588095107422429459687740207798710153634052222026;
    uint256 constant PUB_26_X = 19657958376831627508023278084297930909319276299923698905628959101772386874320;
    uint256 constant PUB_26_Y = 977615283753264097902036892105972387506604377945782655091304089946330651362;
    uint256 constant PUB_27_X = 8886341724872098020006154014593294999040716293852386543057611205726359191469;
    uint256 constant PUB_27_Y = 15943855981481473751041178873574196951667114608251568230124523428986720291301;
    uint256 constant PUB_28_X = 2953528938926756064108531725458781341525583024228628216674517552793191271213;
    uint256 constant PUB_28_Y = 2708644960014121611093807873447748681055546437754639438200279664798184393397;
    uint256 constant PUB_29_X = 14415619767270918025924867987235350953995406252044596737098222482394624069232;
    uint256 constant PUB_29_Y = 14411537869724108783372330460834015957930125806119998297506688033719123066437;
    uint256 constant PUB_30_X = 16775689695523978006872766827541517434943726845189795086158758597071318325354;
    uint256 constant PUB_30_Y = 6340301011096219588030813064945189460144082907911897058574457581253917222489;
    uint256 constant PUB_31_X = 15074144590064184887164929752405001640774803640539328479459480770848815092616;
    uint256 constant PUB_31_Y = 18822291919052742517074379558900213394260536136887362934913577067985606271627;
    uint256 constant PUB_32_X = 19784652949149506624749185666167211138447493596313136923287656676520992904104;
    uint256 constant PUB_32_Y = 1272073162026684927333272520466989054111971819091090250086956883032739972443;
    uint256 constant PUB_33_X = 20392052707747686107936141605393202108082295950582413801450121528597038956323;
    uint256 constant PUB_33_Y = 10765967854389344434628449740254601084607023457721977622335230397174725725846;
    uint256 constant PUB_34_X = 16457843500219901694558262826767079526905512220539150678712218670223917309090;
    uint256 constant PUB_34_Y = 6527505846930810787621240184230644701317054772523911499434205177169743054561;
    uint256 constant PUB_35_X = 4980635486324075761763412166015279964916234789607046616117265786762623543277;
    uint256 constant PUB_35_Y = 8386184949878139141191488525002619914004459429433647115380421576596629215210;
    uint256 constant PUB_36_X = 9266945759957764606160143152071594704793961685441210823032478932368890689950;
    uint256 constant PUB_36_Y = 17436587017183295850562442189569500548913927480335834404962833533637436763645;
    uint256 constant PUB_37_X = 2518493324724901842701332250573889464008278426953331284725528192406270665597;
    uint256 constant PUB_37_Y = 11211216159702540596124330298546711778150859229565130104563262021830803901337;
    uint256 constant PUB_38_X = 15429576872932708227350467803304495986278979864508393953778992233996119186859;
    uint256 constant PUB_38_Y = 8983626032133954301521179923913134210464716897863634542010456093669560972626;
    uint256 constant PUB_39_X = 10611822833337005342641315633291810283904263630837022174918358551557686489991;
    uint256 constant PUB_39_Y = 20361874797437516657743236877647943070822546782575628868924450003458538258452;
    uint256 constant PUB_40_X = 7038056353278448257813465741348283356592516890075691005087530309211341839088;
    uint256 constant PUB_40_Y = 21506943799375935791380901503725093506585980969351799479855922920772422649554;
    uint256 constant PUB_41_X = 1533745800369640281072551702813848571075731262996440011049542714965552473993;
    uint256 constant PUB_41_Y = 16127125916674753927699786867336946890581034479371025407265687210774064560128;
    uint256 constant PUB_42_X = 15258233063306739418683930787414974841579478612941355658274836348391219579597;
    uint256 constant PUB_42_Y = 13790456443661774882857744471332920776861695839771607094133789008279919752622;
    uint256 constant PUB_43_X = 21752596488470753592446664798336729889781499503515325076866388241191972479542;
    uint256 constant PUB_43_Y = 5668686249344908631325384519667722851203035191531137616507466510250483420101;
    uint256 constant PUB_44_X = 16120236540542879316314170752841044083837084971516767564318357163181432335634;
    uint256 constant PUB_44_Y = 14176190013452387772555328847192552071734030048449489061039075083732247380280;
    uint256 constant PUB_45_X = 8531375721354102117869144287446036724258269286991888349759716481179232641594;
    uint256 constant PUB_45_Y = 1453392596929901801369951606714705272693974646607570319046802718092823712210;
    uint256 constant PUB_46_X = 17118606899981228339843348726837492038173138372400464368301510589042768040365;
    uint256 constant PUB_46_Y = 10988646862372848326120104188903166961878357692311213299952726947194772538248;
    uint256 constant PUB_47_X = 13247793767490430443978078371330533225965307036746140241198688306536513333992;
    uint256 constant PUB_47_Y = 9221165189287275324025655377800666238387163089773434858588292084531676238074;
    uint256 constant PUB_48_X = 17580670616224362800981242047156423343043542215026894695857170148709075735654;
    uint256 constant PUB_48_Y = 18478604664094771366969027036926721406858540092973546323414077145882710212785;
    uint256 constant PUB_49_X = 12002515687602626448282032671847552944322868251892192355124618722237750887564;
    uint256 constant PUB_49_Y = 14318060920228020173064913392624385703304062572449055902541008257545332023740;
    uint256 constant PUB_50_X = 5563522597088658039699669515222881345680211076189424938791342549595498672955;
    uint256 constant PUB_50_Y = 9424024718523201191822990209161165237675550177925812737525017945223008442402;
    uint256 constant PUB_51_X = 13653799838853846888320353861049778635562709530349254658796123385452632484260;
    uint256 constant PUB_51_Y = 3894494883158814270282345676112093073019736699046401580996227800224062094832;
    uint256 constant PUB_52_X = 10461518144746138902624198566688630700775116997258996722430103826956316695444;
    uint256 constant PUB_52_Y = 18252093044241965021083668890647895488001719127097076988273983640140618702569;
    uint256 constant PUB_53_X = 13744882326014432668942895011346913844538643514171862555327428890521152268754;
    uint256 constant PUB_53_Y = 7319809705943804410858283141940548305019665519431619348435509265406412283419;
    uint256 constant PUB_54_X = 16859702794480764808512377281858260715848115806104196767650424433925209550575;
    uint256 constant PUB_54_Y = 10682288865583125492681376523842075947457343691601776497345205851769011348132;
    uint256 constant PUB_55_X = 9473024525639796072747464215451856211335570968779009483993393533616768451717;
    uint256 constant PUB_55_Y = 21402637718711483835837467174013485541874695217345249201288674126768965121442;
    uint256 constant PUB_56_X = 1228678652925994471403820325828760811289823892747361443323325043031673618321;
    uint256 constant PUB_56_Y = 4109916472633832286670308614107552435038039431649669294695092998294110039483;
    uint256 constant PUB_57_X = 18791216643172730017782458958696027844923488952703738202241205975200554465987;
    uint256 constant PUB_57_Y = 2192916739673827233343350498464134206987621182965290917057417320811772748101;
    uint256 constant PUB_58_X = 18645828348567595535513971723094219683579819000909303937277663017286016473103;
    uint256 constant PUB_58_Y = 5266007718569439412534086584359624224713392477350445771490735826436174933734;
    uint256 constant PUB_59_X = 5434095621582843371744032424124651016762557000270922650821118718418962882862;
    uint256 constant PUB_59_Y = 3872426237693426914983206187898367418656722951551849513352795895713949931915;
    uint256 constant PUB_60_X = 13355485902081205602756469625914385532649376478524665531663976946671281875823;
    uint256 constant PUB_60_Y = 14473080092000738917656760859145803669779987486010500770845463842965952644059;
    uint256 constant PUB_61_X = 10968195750353511286769404822903141487301225360393091910109158754966466591985;
    uint256 constant PUB_61_Y = 17005008124430503756163744227485822787469033000401826842381641301511329613350;
    uint256 constant PUB_62_X = 9001883276188147534392417495497657666227947132951105765696461491296176154782;
    uint256 constant PUB_62_Y = 1256848704160306914697611628008448320039059242949318495160585608303987316842;
    uint256 constant PUB_63_X = 6967610882379885763349427987269323164845970776007097167027535611607556414591;
    uint256 constant PUB_63_Y = 19328109972675845313205587064227882149907973747658997939081197777784710800000;
    uint256 constant PUB_64_X = 10741518832776914913112291013788132483893160498401656563309593482048078769346;
    uint256 constant PUB_64_Y = 10782369092963076965633919601102529127310368650016726368849321820872134317819;
    uint256 constant PUB_65_X = 6516560766861713721268902999473899221315173339451482954140688827563982628423;
    uint256 constant PUB_65_Y = 10239162703311397556343312644151680151588391507722334802464219805271511781418;
    uint256 constant PUB_66_X = 17799166872088695754084478748619085931921094326336326276831669972832212130970;
    uint256 constant PUB_66_Y = 758975925927009910262701379738673563215152100536587096579242969799868478631;
    uint256 constant PUB_67_X = 754095882361823993189455049994147583275865184691427639088750413133269451107;
    uint256 constant PUB_67_Y = 12847227961265686250610919899694212838767291293269170707333782808880696575989;
    uint256 constant PUB_68_X = 2622847610852670141460555463990446759392084937357558825810261664141491684096;
    uint256 constant PUB_68_Y = 16701465691303189673960118516034671569809494725513605959872857073114358322995;
    uint256 constant PUB_69_X = 14840880849317581291194567699906657771785974634093446412791407520183323418366;
    uint256 constant PUB_69_Y = 14576856595030678332416755699004134398842259649506378450681716738424835578515;
    uint256 constant PUB_70_X = 11620087697804285967234035282083661794691139874341079897711446511123957750421;
    uint256 constant PUB_70_Y = 4958757995307115581593119727985564413927950074938503794969773610880369466307;
    uint256 constant PUB_71_X = 16463529401383746305009026463871565502946940189222549605180357356325471611959;
    uint256 constant PUB_71_Y = 9556392157131508771429304007198041584529180827636672905660631108218492200431;
    uint256 constant PUB_72_X = 19097536811186432156544287021165391544519000897683620154497826539676779585738;
    uint256 constant PUB_72_Y = 241052558857064805432068218170028378581977575899298829796841340977501256472;
    uint256 constant PUB_73_X = 12300703606127147410864504070928187200232383842002686370013388458116913160590;
    uint256 constant PUB_73_Y = 18122545426880867934888570593355388970662866856831323364541773474497013883292;
    uint256 constant PUB_74_X = 6473903663382842184202467546291886968260915323963412744854212520912968640189;
    uint256 constant PUB_74_Y = 12621981369154967012333585130381743916668902374102358805028423231318265321863;
    uint256 constant PUB_75_X = 20777694480772683875435859976643393998674252657087169172063240313794466450342;
    uint256 constant PUB_75_Y = 4292943900957584441197034014331157660843772253850107572502948641063268421056;
    uint256 constant PUB_76_X = 12084743994911822668199513633444390525086220527347856216625338643276239414444;
    uint256 constant PUB_76_Y = 20061946435089392363314288033188064832861746553394822109082850147137403374365;
    uint256 constant PUB_77_X = 840188864349764576901421435181763130019714320406922413946292827573548657146;
    uint256 constant PUB_77_Y = 4708813428979415348643179595633569430062756380721601612140596527476414859348;
    uint256 constant PUB_78_X = 14657539227136263291262074697218292178065125248726455505287959262086130623866;
    uint256 constant PUB_78_Y = 10021489197119467920831670981296673034104657530935956268354049154575548332824;
    uint256 constant PUB_79_X = 20071487114946525473361475479688130134371332370834019762531241837878395819774;
    uint256 constant PUB_79_Y = 2349830985053146859622828554669152171550293998480439619155105940652179689317;
    uint256 constant PUB_80_X = 10558056670682646519625498734607785627726868827016879079663794608356373633325;
    uint256 constant PUB_80_Y = 10949869375966301411485394322422196915733073862679555231523617762773479229348;
    uint256 constant PUB_81_X = 18856160118991248661628160278480637088853050564230193090572166112633224254767;
    uint256 constant PUB_81_Y = 2724563975460478357484652477969496971898614983070306767376264855630547727561;
    uint256 constant PUB_82_X = 1681970232575199760653243884197501761530556996449307877566704518897523909186;
    uint256 constant PUB_82_Y = 17405024614813262151250426641154634648253946316202105266820518891440289774382;
    uint256 constant PUB_83_X = 19448279896053317035788649033636397468867301954376437438461544257770016171055;
    uint256 constant PUB_83_Y = 21465896446583799003514333557678582883624080156974413414396745868597682085887;
    uint256 constant PUB_84_X = 15528286327535915940228092379870323171282932420246923191061661449405301787798;
    uint256 constant PUB_84_Y = 8109549789778023698994896788429164597412864818935681960667941434472691741127;
    uint256 constant PUB_85_X = 3825401576061581392748527955425966761026296640957760538135341283957744313429;
    uint256 constant PUB_85_Y = 754801693494302756163403899882782168426502178999476977010153127680956094080;
    uint256 constant PUB_86_X = 13873454696887768449035551917144870948894188082520814931220782243972932569029;
    uint256 constant PUB_86_Y = 12773905268055451917313246805387131531125925953644852752141288831054621056184;
    uint256 constant PUB_87_X = 14354501913119571383787299162972604504433879116196183655450518146317231379301;
    uint256 constant PUB_87_Y = 18733310268160063377365103463547049930247691810448599629030086864509829631209;
    uint256 constant PUB_88_X = 17387298421707555963024622689605705066784449662820588624920282809864337910030;
    uint256 constant PUB_88_Y = 16812531882051219874664591385874936604224372273985715012498688130378857350981;
    uint256 constant PUB_89_X = 16897311405606828532202726884331073482023214649793521695508032943167409793667;
    uint256 constant PUB_89_Y = 5867463916686300968059186819957139933434742368200841077051220909637290411211;
    uint256 constant PUB_90_X = 16784743577475024758668124648279152054821078994790916895729261928080538805112;
    uint256 constant PUB_90_Y = 17696731268373840419201647716771466817850801544094134242772449784387764584639;
    uint256 constant PUB_91_X = 8938907649315600081736158480645714474635990245659177608518764154183598943060;
    uint256 constant PUB_91_Y = 14292149572371917063313156917680994265480607122149085550582369495673605775142;
    uint256 constant PUB_92_X = 3922901378405507986128877394237079240976148123168581335269134657742655181366;
    uint256 constant PUB_92_Y = 12923011056522416580685340175149860311855278971388384851704944979544863448020;
    uint256 constant PUB_93_X = 3628967412141173349503337133433561495583933842987627962956209180161191752906;
    uint256 constant PUB_93_Y = 6695675204956836854017007734965901939303246725014130127875907755126063661770;
    uint256 constant PUB_94_X = 15354973687983973034065528824143953350886915872339445396552273445932250689008;
    uint256 constant PUB_94_Y = 18910809668682566717612842551956384867903307896947072624120698243854349750930;
    uint256 constant PUB_95_X = 18107723460833203301504010929174019946317100030630487215725144455651490020894;
    uint256 constant PUB_95_Y = 4560287283716642945494173023319889468037014596141591221996640624281648252970;
    uint256 constant PUB_96_X = 16117019493888952255528771119983798765368595541205954272055128640217211284301;
    uint256 constant PUB_96_Y = 17523842178365017761660856665772721374002610540749147706632528097829531608452;
    uint256 constant PUB_97_X = 15952240964199075323435759949571882499088085174496846544220754574311021814238;
    uint256 constant PUB_97_Y = 10963779727362199971294479136532539322672244455601228839469629289910920719859;
    uint256 constant PUB_98_X = 1378462606430954819937539931253016199757056432827138767931161882424469860362;
    uint256 constant PUB_98_Y = 12586954181550358459202744382541670740038833379200772052271708841504502469455;
    uint256 constant PUB_99_X = 18574656455237956166102398946317080661472404346612980838758690043887121008036;
    uint256 constant PUB_99_Y = 18152291566262525430351465700183071386446333395839067480808331628199422296180;
    uint256 constant PUB_100_X = 3562468215957629609523277744337536165092737707326759148949037235929352233337;
    uint256 constant PUB_100_Y = 10927974538169953289151830403484519479919001866792346649431367217641258300902;
    uint256 constant PUB_101_X = 7056586873045873538085722493191971669596801009837491826645266431954797418774;
    uint256 constant PUB_101_Y = 17537498557978427676614842026499797281670099378625976529644856452873090554184;
    uint256 constant PUB_102_X = 18915195994420552930194395933521299455201099264344823108294944080364208649009;
    uint256 constant PUB_102_Y = 11101188396473965986774975361615167655674172805281449526734520159942714444089;
    uint256 constant PUB_103_X = 5666638674928132304050502695166173230321728979544755996597643482368269310703;
    uint256 constant PUB_103_Y = 21208363751031009896000336042091407498589696203051493921466707439799249120195;
    uint256 constant PUB_104_X = 1868091044115397393345175668000184657185853044628276230337728748845207101694;
    uint256 constant PUB_104_Y = 2286975446002797390824005976886147483363685568247339463181518500585895789146;
    uint256 constant PUB_105_X = 8991710542214178558758346220366172108634754275844263277748133034333004884605;
    uint256 constant PUB_105_Y = 604981280509180924747491849895410422355167446404238311839432917003351519175;
    uint256 constant PUB_106_X = 20340083897439219331618273873121793821365551901810158060630566727013845409361;
    uint256 constant PUB_106_Y = 6076227974146169125816552118941054995426554912718410743872121672218779072874;
    uint256 constant PUB_107_X = 17547632966794417051992785146130190627566302033479024024652121415064024650034;
    uint256 constant PUB_107_Y = 2942808636422876517020401528887765416327010016997616683011367885490909281287;
    uint256 constant PUB_108_X = 270765957491474772513150862166977694881316931072589029674185791007241542907;
    uint256 constant PUB_108_Y = 4762235694952901528306212758442430889460820282549477473658838575852974339633;
    uint256 constant PUB_109_X = 2559972275680760227157185959083619181288893112344465562557026349144338167087;
    uint256 constant PUB_109_Y = 10216929902043917469098031367920812297228676814415607916420569617016651790113;
    uint256 constant PUB_110_X = 7939606968284175235722324411668115713495208095151133319381433265813063501537;
    uint256 constant PUB_110_Y = 13543255932246159004897487416741447934349220621605936915139486320473077349004;
    uint256 constant PUB_111_X = 20454558672060783979353229257231641671638900174932593156763924635300570275411;
    uint256 constant PUB_111_Y = 16155321035078052633264827681879064328507051777679074719039267319957830575259;
    uint256 constant PUB_112_X = 16266284580064340661092325030510968391268620487645158988830683714610976728333;
    uint256 constant PUB_112_Y = 9434754010736001906403227896742437620913413700774380627308421164623760269767;
    uint256 constant PUB_113_X = 12603472774339262513232897820137013461470688308820855752869529754544384549190;
    uint256 constant PUB_113_Y = 17008280542981802297363264198397423133667387838178652528625200570823077340402;
    uint256 constant PUB_114_X = 13874937551552075938206531369334767179042601726088420290165607024034814037180;
    uint256 constant PUB_114_Y = 11374146541801898880081257244753572111106094868454944364969073680644484351301;
    uint256 constant PUB_115_X = 10014740811746894003772171605683768313239800299030567702931195787912770247139;
    uint256 constant PUB_115_Y = 1232561193432602580637721129091565576217906206072548333129046870007866767598;
    uint256 constant PUB_116_X = 9164794216286519013024109447092666271384812246102660006442787584880593766702;
    uint256 constant PUB_116_Y = 4987336204618647309884501215610312582586222200767190099364957514778873856426;
    uint256 constant PUB_117_X = 1390144216371614862118375066336812014044295278231509607332531522435955049546;
    uint256 constant PUB_117_Y = 14683301501381031316436242951301089078702512663944269126252902748623208414671;
    uint256 constant PUB_118_X = 3207578191703794380296754154986513989688439221672480994006178038972802701010;
    uint256 constant PUB_118_Y = 12569194196393347534333245176967093686403791097894876585110370084547534967411;
    uint256 constant PUB_119_X = 13123556398798531126445697598770881999049612840346630662178569894409035892900;
    uint256 constant PUB_119_Y = 4857277951969057845166773741794790045529782910696975551569912484624085738084;
    uint256 constant PUB_120_X = 10793681139609243331618475021898573903056406248717745411500162156299509219813;
    uint256 constant PUB_120_Y = 14751384450428901750215367211794836655597264328633387875785183609355861742282;
    uint256 constant PUB_121_X = 20185448348416779721362049141751889963077905089099563490690289505137184986109;
    uint256 constant PUB_121_Y = 8202565789582218449993990153530038859380571424035494867256433006206607096439;
    uint256 constant PUB_122_X = 15168308495758462287830234442589526150363700212598053947409803489533777434233;
    uint256 constant PUB_122_Y = 6585442626816800494495052780084354907156935194836194095714181852070349708855;
    uint256 constant PUB_123_X = 10168936826212817734224962356212676706612665966426209957191508304541250396548;
    uint256 constant PUB_123_Y = 1575152910217228644868682716205463276824524827396399799187509475580544366862;
    uint256 constant PUB_124_X = 9920826817116778077463221048641935656336069304384672546584115833136084458537;
    uint256 constant PUB_124_Y = 3848288571791522741396176890021865570739973565873461801428304012223099417639;
    uint256 constant PUB_125_X = 5743217192867637278067167665030914601778924430766489446910709918544620831322;
    uint256 constant PUB_125_Y = 6157974378234053424468456785513195654516167848020443551620566841630101357812;
    uint256 constant PUB_126_X = 10518285649514374774673135315093251897966714099250542500618693933742803855289;
    uint256 constant PUB_126_Y = 13328337293664267109983152910620422142985925493066489727426118541709270336716;
    uint256 constant PUB_127_X = 8143682823223162714204911770928384163576957599401008300170962383936710730909;
    uint256 constant PUB_127_Y = 11277917554289294600623048324905973944320682731831531460209584874710481283501;
    uint256 constant PUB_128_X = 11398050904453875936448941916314431989761306448223885313747892872209468826643;
    uint256 constant PUB_128_Y = 8455525576110901541283362296816414144757400221179596646621377418505255720786;
    uint256 constant PUB_129_X = 13793877635040018418426957910988048305129762858814642055085752650074431682089;
    uint256 constant PUB_129_Y = 19177403448229551348373059472666707165956288236104941563531811562735710795547;
    uint256 constant PUB_130_X = 1089580873333219618270773182206590901579546147221636842408707272860777953403;
    uint256 constant PUB_130_Y = 6539332759991952290304259636598687125262129595391168989136417740530914752727;
    uint256 constant PUB_131_X = 2859037359967912125955837071158011517796445546479649455707224570794370770427;
    uint256 constant PUB_131_Y = 4518538383064090347663879501075441659983391505214390933102382597337754630980;
    uint256 constant PUB_132_X = 12176774329455538116316600715956092672190836886642601143436970781349582114980;
    uint256 constant PUB_132_Y = 1716738703349500546694630760480118095817250771835043754022320738486339623530;
    uint256 constant PUB_133_X = 7932073640049167974642497345858068398444213701873528015179821130454232795438;
    uint256 constant PUB_133_Y = 10743057435528150324109167209301882230278937463653491933180478885889502985152;
    uint256 constant PUB_134_X = 20977817939748187565749558335760159930808705523138196042599476573158684785142;
    uint256 constant PUB_134_Y = 15463436723539261576159360753676667643577113596285641436013678524971136021933;
    uint256 constant PUB_135_X = 1961971836072357092416919927612764822150559611819292374325612288499764114575;
    uint256 constant PUB_135_Y = 10357804137786819497565953697540625868501155296073911422832565356077710452491;
    uint256 constant PUB_136_X = 16281446937667169293304033776956344297945918518846546983715788466937562756563;
    uint256 constant PUB_136_Y = 407439140241441687093497285504956932824920093385314786428969413062083894635;
    uint256 constant PUB_137_X = 10547617215319270099987022330664905203309741016057564627373989978352245151159;
    uint256 constant PUB_137_Y = 513667679821593875195940616388789691392426011879396719880428853957489066306;
    uint256 constant PUB_138_X = 11798436897365975716610303577496689829776675243469323623306703921606887747765;
    uint256 constant PUB_138_Y = 12444231284274017931776114922104165144634445086788789730334011945347689678927;
    uint256 constant PUB_139_X = 7761661331333809206849606712488431954865289050503754709549855811974438540815;
    uint256 constant PUB_139_Y = 11931503632033656361447993520641954335095181414936790303515742783179379678835;
    uint256 constant PUB_140_X = 13126085514142647751299375075780992918866314035196540590465735367859141780498;
    uint256 constant PUB_140_Y = 18417292111133158163578432389254352154057757122199243870178397472331738616681;
    uint256 constant PUB_141_X = 11133066192867078587711894380406432258968143148137232521335872576213936092987;
    uint256 constant PUB_141_Y = 11963397934526613896827835364604370418426762356869610002308336648113144184686;
    uint256 constant PUB_142_X = 11751013071489640038349694098257836617087787030629252315235602149776854742606;
    uint256 constant PUB_142_Y = 8770119658769519740324027056601751431367765800459755067900080677145033821933;
    uint256 constant PUB_143_X = 16714705771667867020024649524554389952642329991240901415186691730496553080024;
    uint256 constant PUB_143_Y = 3137903925169260447761860183274159661551484639711273729423611539860294447242;
    uint256 constant PUB_144_X = 11547354625488702039733151674631855077182365321487893335675002899845032761792;
    uint256 constant PUB_144_Y = 19541780904142001953497361273934478934238351899637718333664856737618872336930;
    uint256 constant PUB_145_X = 6534031177545371572382129019759499987289714799865421838957926783398198999726;
    uint256 constant PUB_145_Y = 3439528622168354276982079653909780245360351139127647244822375600744104983927;
    uint256 constant PUB_146_X = 7088943390864520869145029751991062320728911017054184886426460222414659784681;
    uint256 constant PUB_146_Y = 5443245479913651471105594245801400445316071690344130624356498755562686973177;
    uint256 constant PUB_147_X = 2706328957577867376135449217168340773209680094489796291940184367142330646257;
    uint256 constant PUB_147_Y = 14127226532665033806729535479202354678839547341338569305550094362927081474171;
    uint256 constant PUB_148_X = 16565083806812542130920231454959528173130215851533215699531115724224246847508;
    uint256 constant PUB_148_Y = 6202361176866654092397462952445788455738459217568171674324504872268682511620;
    uint256 constant PUB_149_X = 1409622307970993601611930291813674152517523975208868814205098473961377804335;
    uint256 constant PUB_149_Y = 20912989184518370144369367679709944573155964040919166192935036988372628602986;
    uint256 constant PUB_150_X = 7603351242551858350549545115304392710970286923524436338755645913364279587865;
    uint256 constant PUB_150_Y = 13553737924419716375980556512830341791248410001584383334669519215848333678549;
    uint256 constant PUB_151_X = 3954230091630479895314254272458238896892452508623008440730153517747437179422;
    uint256 constant PUB_151_Y = 15527339588483970446667623809333843411936331916728931852596672150129757911681;
    uint256 constant PUB_152_X = 16247100122736205238382501990104615240808084852224881202700501261559711617800;
    uint256 constant PUB_152_Y = 4597008014883757553694573435793381461918911409040209889552780372652626430403;
    uint256 constant PUB_153_X = 19444648488240168335985866286148553321397615251760927797501242536520474885848;
    uint256 constant PUB_153_Y = 1368234208768750633706252731760049004053550261461849587019370911816617992829;
    uint256 constant PUB_154_X = 11509312835679796745965076116285640225039577178942114984700307507314801703735;
    uint256 constant PUB_154_Y = 14418728849328766346057093029255448421589940923894691106672692781951750845760;
    uint256 constant PUB_155_X = 17212289062382876848144481475554645964598453980990545531509154564568119816102;
    uint256 constant PUB_155_Y = 15020986198672531686073038737841019455284943646733402700682474633047978065153;
    uint256 constant PUB_156_X = 17572170191356625710320879700918425695865865922705720712618583163638323185900;
    uint256 constant PUB_156_Y = 16638636051472572905585577474220470138453560145885163648669309417091078011043;
    uint256 constant PUB_157_X = 2030274988964016336446063261403353175440198035282926223234064528753457046218;
    uint256 constant PUB_157_Y = 17081156012772659326021138793074011454024594879348733877472442897087114283535;
    uint256 constant PUB_158_X = 491750275475354562791499197304054136391731502978082940109211819117055087004;
    uint256 constant PUB_158_Y = 21518013682621992209020116892749768886034065831377104030612114157363156717066;
    uint256 constant PUB_159_X = 514793637527638387200211643283618607952024915700333455541449977235825544469;
    uint256 constant PUB_159_Y = 11296020091438016212825367634678067389351333712488009188425910247558310964251;
    uint256 constant PUB_160_X = 2133478337017739935717067694176179231899736422078935241877862872339108839687;
    uint256 constant PUB_160_Y = 14934195063903945043965500788054621226270496353436407263030204655749060076134;
    uint256 constant PUB_161_X = 17567664136117241091940135018648991655030973423304548324728007792381409355640;
    uint256 constant PUB_161_Y = 9005415171147409902889055727832927791954132349369077773587024575372265834224;
    uint256 constant PUB_162_X = 19555191729867314395567318843412750595434949818418630846937208799233282428447;
    uint256 constant PUB_162_Y = 21537349299822713351019280264854714181035306365086487960805546925848230824148;
    uint256 constant PUB_163_X = 21748708240293533980504490930248472635530300767306602898967212106810504713833;
    uint256 constant PUB_163_Y = 17944770179806306290707728223131336790677084146580866702292119776352165910025;
    uint256 constant PUB_164_X = 10400947905455020375591871188833079103788501326484162370546301971709655851993;
    uint256 constant PUB_164_Y = 16972420021902509714820090719825844659766599226103966126407928658096348716811;
    uint256 constant PUB_165_X = 10414594214999848464344564221830129550784683232617930074781744938457228885329;
    uint256 constant PUB_165_Y = 16754263143494440005351477416804876510088169469812025296684151564757521976557;
    uint256 constant PUB_166_X = 17855491511568840635115196988632407064445684221546133268104628662541212164453;
    uint256 constant PUB_166_Y = 14737319848059950548282535690336032990299796970962830803809595144815026320418;
    uint256 constant PUB_167_X = 2420543912143937821051717122614530887969330381005596508222170465515565020513;
    uint256 constant PUB_167_Y = 2932310303258714483351124591784207641950419555183552099572963800062372489289;
    uint256 constant PUB_168_X = 6065048616270131150304712543443598105806455973708395479223881689001303864008;
    uint256 constant PUB_168_Y = 14029281324626871884229017163067363275393020311379946609836324026280033583690;
    uint256 constant PUB_169_X = 11295700721146366129362864562273638258233861075816417491885817161293856100503;
    uint256 constant PUB_169_Y = 1904770340228173721239158483846853656010338166047261799098781467495906426791;
    uint256 constant PUB_170_X = 15077563032614575075807914202543890240793239599939629242881859660992045273469;
    uint256 constant PUB_170_Y = 14392190992372082279274420727592631691095748598390796194004396879202459465998;
    uint256 constant PUB_171_X = 13722324882751470700346827501291941955075903215223878414379763369803360847741;
    uint256 constant PUB_171_Y = 12339636463052144161908725299727336004019627460491567630293044805950008679691;
    uint256 constant PUB_172_X = 17715791927487342090022712386601067289715258623035248456463393377735325062610;
    uint256 constant PUB_172_Y = 3345741777616711755831579126839566098731086301888117932706411657268494020305;
    uint256 constant PUB_173_X = 389137849180232858662027058527403522422238375664095225850461018187045680243;
    uint256 constant PUB_173_Y = 15615422629102281998003840188955172656657839610390208459413782961016546042773;
    uint256 constant PUB_174_X = 364197095330619072387887378671476377876367860780042533676318231817067928417;
    uint256 constant PUB_174_Y = 18257929700410013036670236601195481966925235636944429189190339706476805654155;
    uint256 constant PUB_175_X = 11186093526408785330922154309325158214405252910806746001160229491837669937813;
    uint256 constant PUB_175_Y = 12773699348691286628171867979434480348836127314342163439641945355075837963638;
    uint256 constant PUB_176_X = 7192700639980031336528944419118267095351221254488537321343357724083839084471;
    uint256 constant PUB_176_Y = 3579523804200023020717833870341249564315835085632985735475453359521967075994;
    uint256 constant PUB_177_X = 19614107641418275270567715252183668236746729913639884163003867710950754141612;
    uint256 constant PUB_177_Y = 8417744055275440258501640284994268494610370960200134994639133078945544247309;
    uint256 constant PUB_178_X = 21215941596150172114436387831044430953499939095462115776078699684823463962631;
    uint256 constant PUB_178_Y = 10401709142963328371146814282076998588196692589371707197097047023462408750224;
    uint256 constant PUB_179_X = 8980818830604818051218919435469432799954395286824833971185331234923394938275;
    uint256 constant PUB_179_Y = 18987634578529229316519622897627827673809384487440518859034643372886548426754;
    uint256 constant PUB_180_X = 11764423043960267646899954145084480619951854981048880559799903186581607158502;
    uint256 constant PUB_180_Y = 9380888696697922625530806372250025326208132297498484817193547703257902770936;
    uint256 constant PUB_181_X = 4340829403582513518330504896421351760475649292481618153263736187645521065758;
    uint256 constant PUB_181_Y = 7910229212281883328943185559270411876822853839338146539745395985487922488331;
    uint256 constant PUB_182_X = 9226916091246046425574958109045228959514302518149365932222586379221915041998;
    uint256 constant PUB_182_Y = 21833344030869972791676504270039150056933703600271730826394116489299758878964;
    uint256 constant PUB_183_X = 5193630152512242909209607112931292034722338475131344337342423100394763024885;
    uint256 constant PUB_183_Y = 16889853130723256061712200658645592346734389211788821586994537663906410034815;
    uint256 constant PUB_184_X = 13149362207197808456148006151871481542127316102263334908181042584582098654939;
    uint256 constant PUB_184_Y = 19179756802435368234508584049151350801996560400260627744847004983394036189172;
    uint256 constant PUB_185_X = 2517636830358190482088927716764421032150076431893910835410345519006429344968;
    uint256 constant PUB_185_Y = 12601402040330601121163135982475848063776673342991733401361450814711432692664;
    uint256 constant PUB_186_X = 12496084697230074744186893909363914056636054049608104629176981600705407361539;
    uint256 constant PUB_186_Y = 2940571063314894906864839955878830929249697064003549689771079595495173523157;
    uint256 constant PUB_187_X = 4716750757094344376581444390641180332532308694652772336355265295085680579600;
    uint256 constant PUB_187_Y = 9685864446669723171663944463967746509597487411785260894698120254602075803070;
    uint256 constant PUB_188_X = 7113392998376893018302981625947736682660970586995397156329725616904196363776;
    uint256 constant PUB_188_Y = 18999506745698676040284355204572233742250127690957953788374760264095750195763;
    uint256 constant PUB_189_X = 11435585159573621066279042408227701029754077088536505946269882317253786098366;
    uint256 constant PUB_189_Y = 7692600337853499187014704500842233443336107897571365749977429562055973711075;
    uint256 constant PUB_190_X = 6518066403439061697840589425871723604302990780726266465984200615046585762549;
    uint256 constant PUB_190_Y = 4208691013800046374694177576228203991872428101890408708109933669781461423153;
    uint256 constant PUB_191_X = 9993727700316951943043489576555950064259769900636878227715230037111828690032;
    uint256 constant PUB_191_Y = 11443600797001197003608586404245014236513810995525598649085072290165589661892;
    uint256 constant PUB_192_X = 6378834487917755484044907055546955785793852601869494268800009336946471167516;
    uint256 constant PUB_192_Y = 1439896402253749629732089997591059610443877912108295713651746642173135944429;
    uint256 constant PUB_193_X = 2713328535075464697180094759903192488558157202388779702387334974482529312949;
    uint256 constant PUB_193_Y = 6151105686280437266187610283597918953841526806537433540459305822771334114273;
    uint256 constant PUB_194_X = 17384043074276249697468520875155981300223558090823387637017484077557235720730;
    uint256 constant PUB_194_Y = 11999723002845108577275055349388177607874332682562547288242060411921379094396;
    uint256 constant PUB_195_X = 17003314577676845598494995090273589931142513372214319757407378750481992039751;
    uint256 constant PUB_195_Y = 11639497839574103488265887173310481882852440257927638663038014192246505293927;
    uint256 constant PUB_196_X = 7085635156403870309484230467021941955071080204295269324029259304699104734497;
    uint256 constant PUB_196_Y = 2964204029348997481836732490124145352337124814133713792906228736848975270934;
    uint256 constant PUB_197_X = 14858957112745306912557529956941077295086627859339082952045762435553601993768;
    uint256 constant PUB_197_Y = 13558687969066820828970466101128847906874037106052509512735637362756705035777;
    uint256 constant PUB_198_X = 2274323899652747258121285429892626181048561900842542349378497552358498103060;
    uint256 constant PUB_198_Y = 15187192311399367518360379435381349708180545083371248512333793567709488653830;
    uint256 constant PUB_199_X = 5847130634281408436401827326517541963328222254811098272508254991044509049331;
    uint256 constant PUB_199_Y = 19245944126232612771433261015759469955820756631741592931102425470444138575878;
    uint256 constant PUB_200_X = 4123751534831560525080171254226289228916372418297819460712495619302914807504;
    uint256 constant PUB_200_Y = 1772924237248811511343456290542115556330826688942946134997347479964384199621;
    uint256 constant PUB_201_X = 8861702371667445466359907240429507747914991889272100328731974496152424274384;
    uint256 constant PUB_201_Y = 8964219940165975369135306140134259202167462199512567517489164148605962291103;
    uint256 constant PUB_202_X = 8888401697784171555594101940746688524881980656102135574131697433763939155750;
    uint256 constant PUB_202_Y = 2831864771459050095121045044099137887599207586307537773810410672485708602841;
    uint256 constant PUB_203_X = 1397757906567734401236965843292705384264239275016429078833414087928094229840;
    uint256 constant PUB_203_Y = 4169570920509283769828524267563963471040666329826151331561421141320639817198;
    uint256 constant PUB_204_X = 17652846368197840091797120388932238528628460815650724354033443742238080735652;
    uint256 constant PUB_204_Y = 12004962672198787526675058544776015575978308434252853727868695810017028735419;
    uint256 constant PUB_205_X = 9002679937595498693836623450219048935450090044436801869038794409163185572666;
    uint256 constant PUB_205_Y = 15599554181706536306297654023307320978086668934724994475531682136184442489887;
    uint256 constant PUB_206_X = 17958561319595850502657120429919065199362834696106962709201670109490090470184;
    uint256 constant PUB_206_Y = 16970111405771962222990355928822932278076433879141494763647897752809846113498;
    uint256 constant PUB_207_X = 16676843771771679718239954487465335707737784937405004905552755156091730280257;
    uint256 constant PUB_207_Y = 16373676410752686873464724539881017237872953877157329166847096003286626643377;
    uint256 constant PUB_208_X = 2945415263928486124071972366621121350852288703754638495114117793530960886195;
    uint256 constant PUB_208_Y = 19598972233471496508124119688031843075502322444517638994118558704684545318176;
    uint256 constant PUB_209_X = 2372299453279158735406846182873946843777142190873742431432810150814195702347;
    uint256 constant PUB_209_Y = 5984865843125142910473508838861878488711949223659455502925607386725446124298;
    uint256 constant PUB_210_X = 18424777219555376302043566469604097703770595609625335277139583692851582719512;
    uint256 constant PUB_210_Y = 3469240969905346797413253542403087297449062262114317065289583232478002119489;
    uint256 constant PUB_211_X = 21327073467170740895031095692751564319581153382847279637570646945794468487382;
    uint256 constant PUB_211_Y = 7554491888933232789738032046649628876664792337485001217860095057942499484306;
    uint256 constant PUB_212_X = 13583942622812099183859316229437024615508965717516126227280210780408233707674;
    uint256 constant PUB_212_Y = 13320024217177097135950994036433186165177236579977458861920095289792820426657;
    uint256 constant PUB_213_X = 1541126592929576739801048288198192692540520921414735763254180725155438447491;
    uint256 constant PUB_213_Y = 21032919015113163118160499607970913495677731048924044613559402064576178795707;
    uint256 constant PUB_214_X = 3818347704947448984986824698949256699324532746171741490568153167032908161087;
    uint256 constant PUB_214_Y = 16994359311505597213985663269757082721717395006605073157971674299467648312749;
    uint256 constant PUB_215_X = 9169513880776851278396289865415887834861841247869020173006282975370203246586;
    uint256 constant PUB_215_Y = 21422924804808530863919783467420080329560693138565699328223370711765394823862;
    uint256 constant PUB_216_X = 8249178070933372810733765257890418978144383906694721748728436716579464178013;
    uint256 constant PUB_216_Y = 7742840198490051801133076272029532580423087760966243549463306666893242114598;
    uint256 constant PUB_217_X = 9009308551603544626410675890311340778648809114565750310362465415068060750709;
    uint256 constant PUB_217_Y = 12943636974817079279469837133079664426037468539266391991477066710029064862264;
    uint256 constant PUB_218_X = 15210553834765388461020715634591538525205320117366599509053213848510191323118;
    uint256 constant PUB_218_Y = 273940901535798002764290237375831166413263009156537046042302332880824161375;
    uint256 constant PUB_219_X = 6287924791938570647657122392706650312429524795529139575942858209814411872006;
    uint256 constant PUB_219_Y = 16083048339076506876777711914802195015037488946425441868802961421272249279122;
    uint256 constant PUB_220_X = 9486041181560026812343650038208482597632738713556757607371767583658524727838;
    uint256 constant PUB_220_Y = 10655011343639614603153264892610660500183545597830764016424436688578033330843;
    uint256 constant PUB_221_X = 14476692946133674190516360224501600328218176692428679671784302261794913944359;
    uint256 constant PUB_221_Y = 17500264013426481279658564116958473165508042676280650228936601286662036081323;
    uint256 constant PUB_222_X = 14388112470088939856094781386134219025872137059994886673421748561694046851295;
    uint256 constant PUB_222_Y = 19427504592533586817402039306023183312064375783849659920086146346327351223584;
    uint256 constant PUB_223_X = 19680962536956129195290953280296950973160845322372051382627555489478486658861;
    uint256 constant PUB_223_Y = 12794001658595633487164465486252275076553985503285059831059457316050068889012;
    uint256 constant PUB_224_X = 4029240652132397560526775654898114733682049934242221225001260029894185901390;
    uint256 constant PUB_224_Y = 13683401392069105195576183797616613161561441122890502656705982545816365232911;
    uint256 constant PUB_225_X = 20406036774716683198729496011417497222341203111310324346791519396386190577019;
    uint256 constant PUB_225_Y = 15931416811760632460843266847020145159955405397400452036973916077156538866280;
    uint256 constant PUB_226_X = 7761390232509303129706421622466263090696697392347608565975292185175221657931;
    uint256 constant PUB_226_Y = 11804238613599149442772230971339578520884878247214508910704680400941131384112;
    uint256 constant PUB_227_X = 19072684043873137857647235549148929664629620182164491747745188293296752974021;
    uint256 constant PUB_227_Y = 17582500771985889782099755262824191315524449282894458815534673279872964996008;
    uint256 constant PUB_228_X = 15639494532430806718762725767331292439066038062260070475983277608873831070156;
    uint256 constant PUB_228_Y = 16806022971167571168470844736442085909734983730118664202219824263925031380503;
    uint256 constant PUB_229_X = 9756185855652048228097159137487276552974716058236360139655406803411796996929;
    uint256 constant PUB_229_Y = 7812481322513537633320460083513779455194575567072509305048990537829972793305;
    uint256 constant PUB_230_X = 9727738443161445606424281223073088395166853490100691675534652255225367318731;
    uint256 constant PUB_230_Y = 8197667522100701777230580286386395837643297418145699619046789166555022494016;
    uint256 constant PUB_231_X = 15159528280614925235213181149336484008530866817477407586538564863830204813046;
    uint256 constant PUB_231_Y = 16142462057190918471626998273390628534633636708035845530250637242242155658032;
    uint256 constant PUB_232_X = 8087078837852344768664890994982786969219721866443067032373366581010397617662;
    uint256 constant PUB_232_Y = 19421554893915408266154198491807128030346987346343293553451074954438856668558;
    uint256 constant PUB_233_X = 11682592548917490247028980366646623929793737243117288962956217912267021256344;
    uint256 constant PUB_233_Y = 2800673708802256453323720703560794324372582647563767340374115962075912352598;
    uint256 constant PUB_234_X = 5687516627305158243930342129475417919209088157328739736619307682611058646715;
    uint256 constant PUB_234_Y = 14842619638120930696222546476931948022726417798526523269986448316771622340424;
    uint256 constant PUB_235_X = 14386411481225549115428903809880954628289826994201307703438152537759531337740;
    uint256 constant PUB_235_Y = 15747510887727183005680508082782110268285001925093420666621979316100030748999;
    uint256 constant PUB_236_X = 21558467865579158272553524613181627315718405757974157667164171895200583915921;
    uint256 constant PUB_236_Y = 11404222209893140313811622417403384807337809490797956271828343554304865005958;
    uint256 constant PUB_237_X = 17278841218397941020003971441177467174475634565521504204492707005355991264937;
    uint256 constant PUB_237_Y = 1125295062220226101313983371397139652232268772993690197266529485484445609775;
    uint256 constant PUB_238_X = 9741627710526108972499466822101533483781590935552547127037833515647106760246;
    uint256 constant PUB_238_Y = 5526960931845097135929954380426009203246894092051102514673470639229125813653;
    uint256 constant PUB_239_X = 11007459046712006516578177256272890712627575987984942079086356739385169325141;
    uint256 constant PUB_239_Y = 7888424098188026132515933251862596729011672922225160689140320654154939396956;
    uint256 constant PUB_240_X = 11706958475146922014737435239991165448378411419753382727585141033024279027972;
    uint256 constant PUB_240_Y = 3293069921580625995145989443532028611025582370462023578580390902479873978196;
    uint256 constant PUB_241_X = 13259541478373724468415369470865229505052360884648073321912415927046224694607;
    uint256 constant PUB_241_Y = 3355738251620080101853118085711839638592713409500538967015783206288665704837;
    uint256 constant PUB_242_X = 12208709932196948261292223931082508365943638486897798930208365728653460672688;
    uint256 constant PUB_242_Y = 7760986986261106135896801148646810363805686511388654843624779192980917514548;
    uint256 constant PUB_243_X = 3028409980258909676982447188625476612379036343086154474902905459983229210643;
    uint256 constant PUB_243_Y = 13965643854190959498541341021520907797867210013332442131159595703026509993369;
    uint256 constant PUB_244_X = 20339967445006709159419686383040231477442104427126478324021110577063124842413;
    uint256 constant PUB_244_Y = 13566484304918237555343195081505794824402125990153092676993761603242699385208;
    uint256 constant PUB_245_X = 12973292331854762405110396441109395680691766845427042157661909706819438797714;
    uint256 constant PUB_245_Y = 16676932873232298109849475901979927546869559964413200606732758217940658556804;
    uint256 constant PUB_246_X = 18626924815688330164810237493719570312957164811717284434115410402897646266583;
    uint256 constant PUB_246_Y = 2215901994770867772428438457159482890398024466333105260357069373422097968727;
    uint256 constant PUB_247_X = 14268837740587438140804228469079335745950650093510895127573155604607672528864;
    uint256 constant PUB_247_Y = 6053575172082405555877845888929591444579178653656989647857902720578089206145;
    uint256 constant PUB_248_X = 19156238291017401087408060421103823918702227678043751464438698048408668834521;
    uint256 constant PUB_248_Y = 13762296554744768907503696673676022655129665457709064017866289999499321444736;
    uint256 constant PUB_249_X = 20861741462248917433720850074616027692244950684686765829266990221203788632674;
    uint256 constant PUB_249_Y = 8740947368241493766174728177396045387492098818836726718361627582135402137221;

    /// Negation in Fp.
    /// @notice Returns a number x such that a + x = 0 in Fp.
    /// @notice The input does not need to be reduced.
    /// @param a the base
    /// @return x the result
    function negate(uint256 a) internal pure returns (uint256 x) {
        unchecked {
            x = (P - (a % P)) % P; // Modulo is cheaper than branching
        }
    }

    /// Exponentiation in Fp.
    /// @notice Returns a number x such that a ^ e = x in Fp.
    /// @notice The input does not need to be reduced.
    /// @param a the base
    /// @param e the exponent
    /// @return x the result
    function exp(uint256 a, uint256 e) internal view returns (uint256 x) {
        bool success;
        assembly ("memory-safe") {
            let f := mload(0x40)
            mstore(f, 0x20)
            mstore(add(f, 0x20), 0x20)
            mstore(add(f, 0x40), 0x20)
            mstore(add(f, 0x60), a)
            mstore(add(f, 0x80), e)
            mstore(add(f, 0xa0), P)
            success := staticcall(gas(), PRECOMPILE_MODEXP, f, 0xc0, f, 0x20)
            x := mload(f)
        }
        if (!success) {
            // Exponentiation failed.
            // Should not happen.
            revert ProofInvalid();
        }
    }

    /// Invertsion in Fp.
    /// @notice Returns a number x such that a * x = 1 in Fp.
    /// @notice The input does not need to be reduced.
    /// @notice Reverts with ProofInvalid() if the inverse does not exist
    /// @param a the input
    /// @return x the solution
    function invert_Fp(uint256 a) internal view returns (uint256 x) {
        x = exp(a, EXP_INVERSE_FP);
        if (mulmod(a, x, P) != 1) {
            // Inverse does not exist.
            // Can only happen during G2 point decompression.
            revert ProofInvalid();
        }
    }

    /// Square root in Fp.
    /// @notice Returns a number x such that x * x = a in Fp.
    /// @notice Will revert with InvalidProof() if the input is not a square
    /// or not reduced.
    /// @param a the square
    /// @return x the solution
    function sqrt_Fp(uint256 a) internal view returns (uint256 x) {
        x = exp(a, EXP_SQRT_FP);
        if (mulmod(x, x, P) != a) {
            // Square root does not exist or a is not reduced.
            // Happens when G1 point is not on curve.
            revert ProofInvalid();
        }
    }

    /// Square test in Fp.
    /// @notice Returns whether a number x exists such that x * x = a in Fp.
    /// @notice Will revert with InvalidProof() if the input is not a square
    /// or not reduced.
    /// @param a the square
    /// @return x the solution
    function isSquare_Fp(uint256 a) internal view returns (bool) {
        uint256 x = exp(a, EXP_SQRT_FP);
        return mulmod(x, x, P) == a;
    }

    /// Square root in Fp2.
    /// @notice Fp2 is the complex extension Fp[i]/(i^2 + 1). The input is
    /// a0 + a1 ⋅ i and the result is x0 + x1 ⋅ i.
    /// @notice Will revert with InvalidProof() if
    ///   * the input is not a square,
    ///   * the hint is incorrect, or
    ///   * the input coefficients are not reduced.
    /// @param a0 The real part of the input.
    /// @param a1 The imaginary part of the input.
    /// @param hint A hint which of two possible signs to pick in the equation.
    /// @return x0 The real part of the square root.
    /// @return x1 The imaginary part of the square root.
    function sqrt_Fp2(uint256 a0, uint256 a1, bool hint) internal view returns (uint256 x0, uint256 x1) {
        // If this square root reverts there is no solution in Fp2.
        uint256 d = sqrt_Fp(addmod(mulmod(a0, a0, P), mulmod(a1, a1, P), P));
        if (hint) {
            d = negate(d);
        }
        // If this square root reverts there is no solution in Fp2.
        x0 = sqrt_Fp(mulmod(addmod(a0, d, P), FRACTION_1_2_FP, P));
        x1 = mulmod(a1, invert_Fp(mulmod(x0, 2, P)), P);

        // Check result to make sure we found a root.
        // Note: this also fails if a0 or a1 is not reduced.
        if (a0 != addmod(mulmod(x0, x0, P), negate(mulmod(x1, x1, P)), P)
        ||  a1 != mulmod(2, mulmod(x0, x1, P), P)) {
            revert ProofInvalid();
        }
    }

    /// Compress a G1 point.
    /// @notice Reverts with InvalidProof if the coordinates are not reduced
    /// or if the point is not on the curve.
    /// @notice The point at infinity is encoded as (0,0) and compressed to 0.
    /// @param x The X coordinate in Fp.
    /// @param y The Y coordinate in Fp.
    /// @return c The compresed point (x with one signal bit).
    function compress_g1(uint256 x, uint256 y) internal view returns (uint256 c) {
        if (x >= P || y >= P) {
            // G1 point not in field.
            revert ProofInvalid();
        }
        if (x == 0 && y == 0) {
            // Point at infinity
            return 0;
        }

        // Note: sqrt_Fp reverts if there is no solution, i.e. the x coordinate is invalid.
        uint256 y_pos = sqrt_Fp(addmod(mulmod(mulmod(x, x, P), x, P), 3, P));
        if (y == y_pos) {
            return (x << 1) | 0;
        } else if (y == negate(y_pos)) {
            return (x << 1) | 1;
        } else {
            // G1 point not on curve.
            revert ProofInvalid();
        }
    }

    /// Decompress a G1 point.
    /// @notice Reverts with InvalidProof if the input does not represent a valid point.
    /// @notice The point at infinity is encoded as (0,0) and compressed to 0.
    /// @param c The compresed point (x with one signal bit).
    /// @return x The X coordinate in Fp.
    /// @return y The Y coordinate in Fp.
    function decompress_g1(uint256 c) internal view returns (uint256 x, uint256 y) {
        // Note that X = 0 is not on the curve since 0³ + 3 = 3 is not a square.
        // so we can use it to represent the point at infinity.
        if (c == 0) {
            // Point at infinity as encoded in EIP196 and EIP197.
            return (0, 0);
        }
        bool negate_point = c & 1 == 1;
        x = c >> 1;
        if (x >= P) {
            // G1 x coordinate not in field.
            revert ProofInvalid();
        }

        // Note: (x³ + 3) is irreducible in Fp, so it can not be zero and therefore
        //       y can not be zero.
        // Note: sqrt_Fp reverts if there is no solution, i.e. the point is not on the curve.
        y = sqrt_Fp(addmod(mulmod(mulmod(x, x, P), x, P), 3, P));
        if (negate_point) {
            y = negate(y);
        }
    }

    /// Compress a G2 point.
    /// @notice Reverts with InvalidProof if the coefficients are not reduced
    /// or if the point is not on the curve.
    /// @notice The G2 curve is defined over the complex extension Fp[i]/(i^2 + 1)
    /// with coordinates (x0 + x1 ⋅ i, y0 + y1 ⋅ i).
    /// @notice The point at infinity is encoded as (0,0,0,0) and compressed to (0,0).
    /// @param x0 The real part of the X coordinate.
    /// @param x1 The imaginary poart of the X coordinate.
    /// @param y0 The real part of the Y coordinate.
    /// @param y1 The imaginary part of the Y coordinate.
    /// @return c0 The first half of the compresed point (x0 with two signal bits).
    /// @return c1 The second half of the compressed point (x1 unmodified).
    function compress_g2(uint256 x0, uint256 x1, uint256 y0, uint256 y1)
    internal view returns (uint256 c0, uint256 c1) {
        if (x0 >= P || x1 >= P || y0 >= P || y1 >= P) {
            // G2 point not in field.
            revert ProofInvalid();
        }
        if ((x0 | x1 | y0 | y1) == 0) {
            // Point at infinity
            return (0, 0);
        }

        // Compute y^2
        // Note: shadowing variables and scoping to avoid stack-to-deep.
        uint256 y0_pos;
        uint256 y1_pos;
        {
            uint256 n3ab = mulmod(mulmod(x0, x1, P), P-3, P);
            uint256 a_3 = mulmod(mulmod(x0, x0, P), x0, P);
            uint256 b_3 = mulmod(mulmod(x1, x1, P), x1, P);
            y0_pos = addmod(FRACTION_27_82_FP, addmod(a_3, mulmod(n3ab, x1, P), P), P);
            y1_pos = negate(addmod(FRACTION_3_82_FP,  addmod(b_3, mulmod(n3ab, x0, P), P), P));
        }

        // Determine hint bit
        // If this sqrt fails the x coordinate is not on the curve.
        bool hint;
        {
            uint256 d = sqrt_Fp(addmod(mulmod(y0_pos, y0_pos, P), mulmod(y1_pos, y1_pos, P), P));
            hint = !isSquare_Fp(mulmod(addmod(y0_pos, d, P), FRACTION_1_2_FP, P));
        }

        // Recover y
        (y0_pos, y1_pos) = sqrt_Fp2(y0_pos, y1_pos, hint);
        if (y0 == y0_pos && y1 == y1_pos) {
            c0 = (x0 << 2) | (hint ? 2  : 0) | 0;
            c1 = x1;
        } else if (y0 == negate(y0_pos) && y1 == negate(y1_pos)) {
            c0 = (x0 << 2) | (hint ? 2  : 0) | 1;
            c1 = x1;
        } else {
            // G1 point not on curve.
            revert ProofInvalid();
        }
    }

    /// Decompress a G2 point.
    /// @notice Reverts with InvalidProof if the input does not represent a valid point.
    /// @notice The G2 curve is defined over the complex extension Fp[i]/(i^2 + 1)
    /// with coordinates (x0 + x1 ⋅ i, y0 + y1 ⋅ i).
    /// @notice The point at infinity is encoded as (0,0,0,0) and compressed to (0,0).
    /// @param c0 The first half of the compresed point (x0 with two signal bits).
    /// @param c1 The second half of the compressed point (x1 unmodified).
    /// @return x0 The real part of the X coordinate.
    /// @return x1 The imaginary poart of the X coordinate.
    /// @return y0 The real part of the Y coordinate.
    /// @return y1 The imaginary part of the Y coordinate.
    function decompress_g2(uint256 c0, uint256 c1)
    internal view returns (uint256 x0, uint256 x1, uint256 y0, uint256 y1) {
        // Note that X = (0, 0) is not on the curve since 0³ + 3/(9 + i) is not a square.
        // so we can use it to represent the point at infinity.
        if (c0 == 0 && c1 == 0) {
            // Point at infinity as encoded in EIP197.
            return (0, 0, 0, 0);
        }
        bool negate_point = c0 & 1 == 1;
        bool hint = c0 & 2 == 2;
        x0 = c0 >> 2;
        x1 = c1;
        if (x0 >= P || x1 >= P) {
            // G2 x0 or x1 coefficient not in field.
            revert ProofInvalid();
        }

        uint256 n3ab = mulmod(mulmod(x0, x1, P), P-3, P);
        uint256 a_3 = mulmod(mulmod(x0, x0, P), x0, P);
        uint256 b_3 = mulmod(mulmod(x1, x1, P), x1, P);

        y0 = addmod(FRACTION_27_82_FP, addmod(a_3, mulmod(n3ab, x1, P), P), P);
        y1 = negate(addmod(FRACTION_3_82_FP,  addmod(b_3, mulmod(n3ab, x0, P), P), P));

        // Note: sqrt_Fp2 reverts if there is no solution, i.e. the point is not on the curve.
        // Note: (X³ + 3/(9 + i)) is irreducible in Fp2, so y can not be zero.
        //       But y0 or y1 may still independently be zero.
        (y0, y1) = sqrt_Fp2(y0, y1, hint);
        if (negate_point) {
            y0 = negate(y0);
            y1 = negate(y1);
        }
    }

    /// Compute the public input linear combination.
    /// @notice Reverts with PublicInputNotInField if the input is not in the field.
    /// @notice Computes the multi-scalar-multiplication of the public input
    /// elements and the verification key including the constant term.
    /// @param input The public inputs. These are elements of the scalar field Fr.
    /// @param publicCommitments public inputs generated from pedersen commitments.
    /// @param commitments The Pedersen commitments from the proof.
    /// @return x The X coordinate of the resulting G1 point.
    /// @return y The Y coordinate of the resulting G1 point.
    function publicInputMSM(
        uint256[249] calldata input,
        uint256[1] memory publicCommitments,
        uint256[2] memory commitments
    )
    internal view returns (uint256 x, uint256 y) {
        // Note: The ECMUL precompile does not reject unreduced values, so we check this.
        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the
        //       code-size is in the PUB_ constants.
        // ECMUL has input (x, y, scalar) and output (x', y').
        // ECADD has input (x1, y1, x2, y2) and output (x', y').
        // We reduce commitments(if any) with constants as the first point argument to ECADD.
        // We call them such that ecmul output is already in the second point
        // argument to ECADD so we can have a tight loop.
        bool success = true;
        assembly ("memory-safe") {
            let f := mload(0x40)
            let g := add(f, 0x40)
            let s
            mstore(f, CONSTANT_X)
            mstore(add(f, 0x20), CONSTANT_Y)
            mstore(g, mload(commitments))
            mstore(add(g, 0x20), mload(add(commitments, 0x20)))
            success := and(success,  staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_0_X)
            mstore(add(g, 0x20), PUB_0_Y)
            s :=  calldataload(input)
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_1_X)
            mstore(add(g, 0x20), PUB_1_Y)
            s :=  calldataload(add(input, 32))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_2_X)
            mstore(add(g, 0x20), PUB_2_Y)
            s :=  calldataload(add(input, 64))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_3_X)
            mstore(add(g, 0x20), PUB_3_Y)
            s :=  calldataload(add(input, 96))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_4_X)
            mstore(add(g, 0x20), PUB_4_Y)
            s :=  calldataload(add(input, 128))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_5_X)
            mstore(add(g, 0x20), PUB_5_Y)
            s :=  calldataload(add(input, 160))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_6_X)
            mstore(add(g, 0x20), PUB_6_Y)
            s :=  calldataload(add(input, 192))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_7_X)
            mstore(add(g, 0x20), PUB_7_Y)
            s :=  calldataload(add(input, 224))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_8_X)
            mstore(add(g, 0x20), PUB_8_Y)
            s :=  calldataload(add(input, 256))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_9_X)
            mstore(add(g, 0x20), PUB_9_Y)
            s :=  calldataload(add(input, 288))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_10_X)
            mstore(add(g, 0x20), PUB_10_Y)
            s :=  calldataload(add(input, 320))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_11_X)
            mstore(add(g, 0x20), PUB_11_Y)
            s :=  calldataload(add(input, 352))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_12_X)
            mstore(add(g, 0x20), PUB_12_Y)
            s :=  calldataload(add(input, 384))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_13_X)
            mstore(add(g, 0x20), PUB_13_Y)
            s :=  calldataload(add(input, 416))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_14_X)
            mstore(add(g, 0x20), PUB_14_Y)
            s :=  calldataload(add(input, 448))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_15_X)
            mstore(add(g, 0x20), PUB_15_Y)
            s :=  calldataload(add(input, 480))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_16_X)
            mstore(add(g, 0x20), PUB_16_Y)
            s :=  calldataload(add(input, 512))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_17_X)
            mstore(add(g, 0x20), PUB_17_Y)
            s :=  calldataload(add(input, 544))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_18_X)
            mstore(add(g, 0x20), PUB_18_Y)
            s :=  calldataload(add(input, 576))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_19_X)
            mstore(add(g, 0x20), PUB_19_Y)
            s :=  calldataload(add(input, 608))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_20_X)
            mstore(add(g, 0x20), PUB_20_Y)
            s :=  calldataload(add(input, 640))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_21_X)
            mstore(add(g, 0x20), PUB_21_Y)
            s :=  calldataload(add(input, 672))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_22_X)
            mstore(add(g, 0x20), PUB_22_Y)
            s :=  calldataload(add(input, 704))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_23_X)
            mstore(add(g, 0x20), PUB_23_Y)
            s :=  calldataload(add(input, 736))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_24_X)
            mstore(add(g, 0x20), PUB_24_Y)
            s :=  calldataload(add(input, 768))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_25_X)
            mstore(add(g, 0x20), PUB_25_Y)
            s :=  calldataload(add(input, 800))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_26_X)
            mstore(add(g, 0x20), PUB_26_Y)
            s :=  calldataload(add(input, 832))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_27_X)
            mstore(add(g, 0x20), PUB_27_Y)
            s :=  calldataload(add(input, 864))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_28_X)
            mstore(add(g, 0x20), PUB_28_Y)
            s :=  calldataload(add(input, 896))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_29_X)
            mstore(add(g, 0x20), PUB_29_Y)
            s :=  calldataload(add(input, 928))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_30_X)
            mstore(add(g, 0x20), PUB_30_Y)
            s :=  calldataload(add(input, 960))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_31_X)
            mstore(add(g, 0x20), PUB_31_Y)
            s :=  calldataload(add(input, 992))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_32_X)
            mstore(add(g, 0x20), PUB_32_Y)
            s :=  calldataload(add(input, 1024))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_33_X)
            mstore(add(g, 0x20), PUB_33_Y)
            s :=  calldataload(add(input, 1056))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_34_X)
            mstore(add(g, 0x20), PUB_34_Y)
            s :=  calldataload(add(input, 1088))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_35_X)
            mstore(add(g, 0x20), PUB_35_Y)
            s :=  calldataload(add(input, 1120))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_36_X)
            mstore(add(g, 0x20), PUB_36_Y)
            s :=  calldataload(add(input, 1152))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_37_X)
            mstore(add(g, 0x20), PUB_37_Y)
            s :=  calldataload(add(input, 1184))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_38_X)
            mstore(add(g, 0x20), PUB_38_Y)
            s :=  calldataload(add(input, 1216))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_39_X)
            mstore(add(g, 0x20), PUB_39_Y)
            s :=  calldataload(add(input, 1248))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_40_X)
            mstore(add(g, 0x20), PUB_40_Y)
            s :=  calldataload(add(input, 1280))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_41_X)
            mstore(add(g, 0x20), PUB_41_Y)
            s :=  calldataload(add(input, 1312))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_42_X)
            mstore(add(g, 0x20), PUB_42_Y)
            s :=  calldataload(add(input, 1344))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_43_X)
            mstore(add(g, 0x20), PUB_43_Y)
            s :=  calldataload(add(input, 1376))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_44_X)
            mstore(add(g, 0x20), PUB_44_Y)
            s :=  calldataload(add(input, 1408))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_45_X)
            mstore(add(g, 0x20), PUB_45_Y)
            s :=  calldataload(add(input, 1440))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_46_X)
            mstore(add(g, 0x20), PUB_46_Y)
            s :=  calldataload(add(input, 1472))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_47_X)
            mstore(add(g, 0x20), PUB_47_Y)
            s :=  calldataload(add(input, 1504))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_48_X)
            mstore(add(g, 0x20), PUB_48_Y)
            s :=  calldataload(add(input, 1536))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_49_X)
            mstore(add(g, 0x20), PUB_49_Y)
            s :=  calldataload(add(input, 1568))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_50_X)
            mstore(add(g, 0x20), PUB_50_Y)
            s :=  calldataload(add(input, 1600))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_51_X)
            mstore(add(g, 0x20), PUB_51_Y)
            s :=  calldataload(add(input, 1632))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_52_X)
            mstore(add(g, 0x20), PUB_52_Y)
            s :=  calldataload(add(input, 1664))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_53_X)
            mstore(add(g, 0x20), PUB_53_Y)
            s :=  calldataload(add(input, 1696))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_54_X)
            mstore(add(g, 0x20), PUB_54_Y)
            s :=  calldataload(add(input, 1728))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_55_X)
            mstore(add(g, 0x20), PUB_55_Y)
            s :=  calldataload(add(input, 1760))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_56_X)
            mstore(add(g, 0x20), PUB_56_Y)
            s :=  calldataload(add(input, 1792))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_57_X)
            mstore(add(g, 0x20), PUB_57_Y)
            s :=  calldataload(add(input, 1824))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_58_X)
            mstore(add(g, 0x20), PUB_58_Y)
            s :=  calldataload(add(input, 1856))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_59_X)
            mstore(add(g, 0x20), PUB_59_Y)
            s :=  calldataload(add(input, 1888))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_60_X)
            mstore(add(g, 0x20), PUB_60_Y)
            s :=  calldataload(add(input, 1920))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_61_X)
            mstore(add(g, 0x20), PUB_61_Y)
            s :=  calldataload(add(input, 1952))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_62_X)
            mstore(add(g, 0x20), PUB_62_Y)
            s :=  calldataload(add(input, 1984))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_63_X)
            mstore(add(g, 0x20), PUB_63_Y)
            s :=  calldataload(add(input, 2016))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_64_X)
            mstore(add(g, 0x20), PUB_64_Y)
            s :=  calldataload(add(input, 2048))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_65_X)
            mstore(add(g, 0x20), PUB_65_Y)
            s :=  calldataload(add(input, 2080))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_66_X)
            mstore(add(g, 0x20), PUB_66_Y)
            s :=  calldataload(add(input, 2112))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_67_X)
            mstore(add(g, 0x20), PUB_67_Y)
            s :=  calldataload(add(input, 2144))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_68_X)
            mstore(add(g, 0x20), PUB_68_Y)
            s :=  calldataload(add(input, 2176))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_69_X)
            mstore(add(g, 0x20), PUB_69_Y)
            s :=  calldataload(add(input, 2208))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_70_X)
            mstore(add(g, 0x20), PUB_70_Y)
            s :=  calldataload(add(input, 2240))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_71_X)
            mstore(add(g, 0x20), PUB_71_Y)
            s :=  calldataload(add(input, 2272))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_72_X)
            mstore(add(g, 0x20), PUB_72_Y)
            s :=  calldataload(add(input, 2304))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_73_X)
            mstore(add(g, 0x20), PUB_73_Y)
            s :=  calldataload(add(input, 2336))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_74_X)
            mstore(add(g, 0x20), PUB_74_Y)
            s :=  calldataload(add(input, 2368))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_75_X)
            mstore(add(g, 0x20), PUB_75_Y)
            s :=  calldataload(add(input, 2400))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_76_X)
            mstore(add(g, 0x20), PUB_76_Y)
            s :=  calldataload(add(input, 2432))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_77_X)
            mstore(add(g, 0x20), PUB_77_Y)
            s :=  calldataload(add(input, 2464))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_78_X)
            mstore(add(g, 0x20), PUB_78_Y)
            s :=  calldataload(add(input, 2496))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_79_X)
            mstore(add(g, 0x20), PUB_79_Y)
            s :=  calldataload(add(input, 2528))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_80_X)
            mstore(add(g, 0x20), PUB_80_Y)
            s :=  calldataload(add(input, 2560))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_81_X)
            mstore(add(g, 0x20), PUB_81_Y)
            s :=  calldataload(add(input, 2592))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_82_X)
            mstore(add(g, 0x20), PUB_82_Y)
            s :=  calldataload(add(input, 2624))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_83_X)
            mstore(add(g, 0x20), PUB_83_Y)
            s :=  calldataload(add(input, 2656))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_84_X)
            mstore(add(g, 0x20), PUB_84_Y)
            s :=  calldataload(add(input, 2688))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_85_X)
            mstore(add(g, 0x20), PUB_85_Y)
            s :=  calldataload(add(input, 2720))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_86_X)
            mstore(add(g, 0x20), PUB_86_Y)
            s :=  calldataload(add(input, 2752))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_87_X)
            mstore(add(g, 0x20), PUB_87_Y)
            s :=  calldataload(add(input, 2784))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_88_X)
            mstore(add(g, 0x20), PUB_88_Y)
            s :=  calldataload(add(input, 2816))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_89_X)
            mstore(add(g, 0x20), PUB_89_Y)
            s :=  calldataload(add(input, 2848))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_90_X)
            mstore(add(g, 0x20), PUB_90_Y)
            s :=  calldataload(add(input, 2880))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_91_X)
            mstore(add(g, 0x20), PUB_91_Y)
            s :=  calldataload(add(input, 2912))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_92_X)
            mstore(add(g, 0x20), PUB_92_Y)
            s :=  calldataload(add(input, 2944))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_93_X)
            mstore(add(g, 0x20), PUB_93_Y)
            s :=  calldataload(add(input, 2976))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_94_X)
            mstore(add(g, 0x20), PUB_94_Y)
            s :=  calldataload(add(input, 3008))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_95_X)
            mstore(add(g, 0x20), PUB_95_Y)
            s :=  calldataload(add(input, 3040))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_96_X)
            mstore(add(g, 0x20), PUB_96_Y)
            s :=  calldataload(add(input, 3072))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_97_X)
            mstore(add(g, 0x20), PUB_97_Y)
            s :=  calldataload(add(input, 3104))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_98_X)
            mstore(add(g, 0x20), PUB_98_Y)
            s :=  calldataload(add(input, 3136))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_99_X)
            mstore(add(g, 0x20), PUB_99_Y)
            s :=  calldataload(add(input, 3168))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_100_X)
            mstore(add(g, 0x20), PUB_100_Y)
            s :=  calldataload(add(input, 3200))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_101_X)
            mstore(add(g, 0x20), PUB_101_Y)
            s :=  calldataload(add(input, 3232))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_102_X)
            mstore(add(g, 0x20), PUB_102_Y)
            s :=  calldataload(add(input, 3264))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_103_X)
            mstore(add(g, 0x20), PUB_103_Y)
            s :=  calldataload(add(input, 3296))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_104_X)
            mstore(add(g, 0x20), PUB_104_Y)
            s :=  calldataload(add(input, 3328))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_105_X)
            mstore(add(g, 0x20), PUB_105_Y)
            s :=  calldataload(add(input, 3360))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_106_X)
            mstore(add(g, 0x20), PUB_106_Y)
            s :=  calldataload(add(input, 3392))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_107_X)
            mstore(add(g, 0x20), PUB_107_Y)
            s :=  calldataload(add(input, 3424))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_108_X)
            mstore(add(g, 0x20), PUB_108_Y)
            s :=  calldataload(add(input, 3456))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_109_X)
            mstore(add(g, 0x20), PUB_109_Y)
            s :=  calldataload(add(input, 3488))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_110_X)
            mstore(add(g, 0x20), PUB_110_Y)
            s :=  calldataload(add(input, 3520))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_111_X)
            mstore(add(g, 0x20), PUB_111_Y)
            s :=  calldataload(add(input, 3552))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_112_X)
            mstore(add(g, 0x20), PUB_112_Y)
            s :=  calldataload(add(input, 3584))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_113_X)
            mstore(add(g, 0x20), PUB_113_Y)
            s :=  calldataload(add(input, 3616))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_114_X)
            mstore(add(g, 0x20), PUB_114_Y)
            s :=  calldataload(add(input, 3648))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_115_X)
            mstore(add(g, 0x20), PUB_115_Y)
            s :=  calldataload(add(input, 3680))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_116_X)
            mstore(add(g, 0x20), PUB_116_Y)
            s :=  calldataload(add(input, 3712))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_117_X)
            mstore(add(g, 0x20), PUB_117_Y)
            s :=  calldataload(add(input, 3744))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_118_X)
            mstore(add(g, 0x20), PUB_118_Y)
            s :=  calldataload(add(input, 3776))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_119_X)
            mstore(add(g, 0x20), PUB_119_Y)
            s :=  calldataload(add(input, 3808))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_120_X)
            mstore(add(g, 0x20), PUB_120_Y)
            s :=  calldataload(add(input, 3840))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_121_X)
            mstore(add(g, 0x20), PUB_121_Y)
            s :=  calldataload(add(input, 3872))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_122_X)
            mstore(add(g, 0x20), PUB_122_Y)
            s :=  calldataload(add(input, 3904))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_123_X)
            mstore(add(g, 0x20), PUB_123_Y)
            s :=  calldataload(add(input, 3936))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_124_X)
            mstore(add(g, 0x20), PUB_124_Y)
            s :=  calldataload(add(input, 3968))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_125_X)
            mstore(add(g, 0x20), PUB_125_Y)
            s :=  calldataload(add(input, 4000))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_126_X)
            mstore(add(g, 0x20), PUB_126_Y)
            s :=  calldataload(add(input, 4032))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_127_X)
            mstore(add(g, 0x20), PUB_127_Y)
            s :=  calldataload(add(input, 4064))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_128_X)
            mstore(add(g, 0x20), PUB_128_Y)
            s :=  calldataload(add(input, 4096))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_129_X)
            mstore(add(g, 0x20), PUB_129_Y)
            s :=  calldataload(add(input, 4128))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_130_X)
            mstore(add(g, 0x20), PUB_130_Y)
            s :=  calldataload(add(input, 4160))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_131_X)
            mstore(add(g, 0x20), PUB_131_Y)
            s :=  calldataload(add(input, 4192))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_132_X)
            mstore(add(g, 0x20), PUB_132_Y)
            s :=  calldataload(add(input, 4224))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_133_X)
            mstore(add(g, 0x20), PUB_133_Y)
            s :=  calldataload(add(input, 4256))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_134_X)
            mstore(add(g, 0x20), PUB_134_Y)
            s :=  calldataload(add(input, 4288))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_135_X)
            mstore(add(g, 0x20), PUB_135_Y)
            s :=  calldataload(add(input, 4320))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_136_X)
            mstore(add(g, 0x20), PUB_136_Y)
            s :=  calldataload(add(input, 4352))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_137_X)
            mstore(add(g, 0x20), PUB_137_Y)
            s :=  calldataload(add(input, 4384))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_138_X)
            mstore(add(g, 0x20), PUB_138_Y)
            s :=  calldataload(add(input, 4416))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_139_X)
            mstore(add(g, 0x20), PUB_139_Y)
            s :=  calldataload(add(input, 4448))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_140_X)
            mstore(add(g, 0x20), PUB_140_Y)
            s :=  calldataload(add(input, 4480))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_141_X)
            mstore(add(g, 0x20), PUB_141_Y)
            s :=  calldataload(add(input, 4512))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_142_X)
            mstore(add(g, 0x20), PUB_142_Y)
            s :=  calldataload(add(input, 4544))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_143_X)
            mstore(add(g, 0x20), PUB_143_Y)
            s :=  calldataload(add(input, 4576))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_144_X)
            mstore(add(g, 0x20), PUB_144_Y)
            s :=  calldataload(add(input, 4608))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_145_X)
            mstore(add(g, 0x20), PUB_145_Y)
            s :=  calldataload(add(input, 4640))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_146_X)
            mstore(add(g, 0x20), PUB_146_Y)
            s :=  calldataload(add(input, 4672))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_147_X)
            mstore(add(g, 0x20), PUB_147_Y)
            s :=  calldataload(add(input, 4704))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_148_X)
            mstore(add(g, 0x20), PUB_148_Y)
            s :=  calldataload(add(input, 4736))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_149_X)
            mstore(add(g, 0x20), PUB_149_Y)
            s :=  calldataload(add(input, 4768))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_150_X)
            mstore(add(g, 0x20), PUB_150_Y)
            s :=  calldataload(add(input, 4800))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_151_X)
            mstore(add(g, 0x20), PUB_151_Y)
            s :=  calldataload(add(input, 4832))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_152_X)
            mstore(add(g, 0x20), PUB_152_Y)
            s :=  calldataload(add(input, 4864))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_153_X)
            mstore(add(g, 0x20), PUB_153_Y)
            s :=  calldataload(add(input, 4896))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_154_X)
            mstore(add(g, 0x20), PUB_154_Y)
            s :=  calldataload(add(input, 4928))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_155_X)
            mstore(add(g, 0x20), PUB_155_Y)
            s :=  calldataload(add(input, 4960))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_156_X)
            mstore(add(g, 0x20), PUB_156_Y)
            s :=  calldataload(add(input, 4992))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_157_X)
            mstore(add(g, 0x20), PUB_157_Y)
            s :=  calldataload(add(input, 5024))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_158_X)
            mstore(add(g, 0x20), PUB_158_Y)
            s :=  calldataload(add(input, 5056))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_159_X)
            mstore(add(g, 0x20), PUB_159_Y)
            s :=  calldataload(add(input, 5088))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_160_X)
            mstore(add(g, 0x20), PUB_160_Y)
            s :=  calldataload(add(input, 5120))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_161_X)
            mstore(add(g, 0x20), PUB_161_Y)
            s :=  calldataload(add(input, 5152))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_162_X)
            mstore(add(g, 0x20), PUB_162_Y)
            s :=  calldataload(add(input, 5184))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_163_X)
            mstore(add(g, 0x20), PUB_163_Y)
            s :=  calldataload(add(input, 5216))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_164_X)
            mstore(add(g, 0x20), PUB_164_Y)
            s :=  calldataload(add(input, 5248))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_165_X)
            mstore(add(g, 0x20), PUB_165_Y)
            s :=  calldataload(add(input, 5280))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_166_X)
            mstore(add(g, 0x20), PUB_166_Y)
            s :=  calldataload(add(input, 5312))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_167_X)
            mstore(add(g, 0x20), PUB_167_Y)
            s :=  calldataload(add(input, 5344))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_168_X)
            mstore(add(g, 0x20), PUB_168_Y)
            s :=  calldataload(add(input, 5376))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_169_X)
            mstore(add(g, 0x20), PUB_169_Y)
            s :=  calldataload(add(input, 5408))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_170_X)
            mstore(add(g, 0x20), PUB_170_Y)
            s :=  calldataload(add(input, 5440))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_171_X)
            mstore(add(g, 0x20), PUB_171_Y)
            s :=  calldataload(add(input, 5472))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_172_X)
            mstore(add(g, 0x20), PUB_172_Y)
            s :=  calldataload(add(input, 5504))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_173_X)
            mstore(add(g, 0x20), PUB_173_Y)
            s :=  calldataload(add(input, 5536))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_174_X)
            mstore(add(g, 0x20), PUB_174_Y)
            s :=  calldataload(add(input, 5568))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_175_X)
            mstore(add(g, 0x20), PUB_175_Y)
            s :=  calldataload(add(input, 5600))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_176_X)
            mstore(add(g, 0x20), PUB_176_Y)
            s :=  calldataload(add(input, 5632))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_177_X)
            mstore(add(g, 0x20), PUB_177_Y)
            s :=  calldataload(add(input, 5664))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_178_X)
            mstore(add(g, 0x20), PUB_178_Y)
            s :=  calldataload(add(input, 5696))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_179_X)
            mstore(add(g, 0x20), PUB_179_Y)
            s :=  calldataload(add(input, 5728))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_180_X)
            mstore(add(g, 0x20), PUB_180_Y)
            s :=  calldataload(add(input, 5760))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_181_X)
            mstore(add(g, 0x20), PUB_181_Y)
            s :=  calldataload(add(input, 5792))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_182_X)
            mstore(add(g, 0x20), PUB_182_Y)
            s :=  calldataload(add(input, 5824))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_183_X)
            mstore(add(g, 0x20), PUB_183_Y)
            s :=  calldataload(add(input, 5856))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_184_X)
            mstore(add(g, 0x20), PUB_184_Y)
            s :=  calldataload(add(input, 5888))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_185_X)
            mstore(add(g, 0x20), PUB_185_Y)
            s :=  calldataload(add(input, 5920))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_186_X)
            mstore(add(g, 0x20), PUB_186_Y)
            s :=  calldataload(add(input, 5952))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_187_X)
            mstore(add(g, 0x20), PUB_187_Y)
            s :=  calldataload(add(input, 5984))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_188_X)
            mstore(add(g, 0x20), PUB_188_Y)
            s :=  calldataload(add(input, 6016))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_189_X)
            mstore(add(g, 0x20), PUB_189_Y)
            s :=  calldataload(add(input, 6048))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_190_X)
            mstore(add(g, 0x20), PUB_190_Y)
            s :=  calldataload(add(input, 6080))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_191_X)
            mstore(add(g, 0x20), PUB_191_Y)
            s :=  calldataload(add(input, 6112))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_192_X)
            mstore(add(g, 0x20), PUB_192_Y)
            s :=  calldataload(add(input, 6144))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_193_X)
            mstore(add(g, 0x20), PUB_193_Y)
            s :=  calldataload(add(input, 6176))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_194_X)
            mstore(add(g, 0x20), PUB_194_Y)
            s :=  calldataload(add(input, 6208))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_195_X)
            mstore(add(g, 0x20), PUB_195_Y)
            s :=  calldataload(add(input, 6240))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_196_X)
            mstore(add(g, 0x20), PUB_196_Y)
            s :=  calldataload(add(input, 6272))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_197_X)
            mstore(add(g, 0x20), PUB_197_Y)
            s :=  calldataload(add(input, 6304))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_198_X)
            mstore(add(g, 0x20), PUB_198_Y)
            s :=  calldataload(add(input, 6336))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_199_X)
            mstore(add(g, 0x20), PUB_199_Y)
            s :=  calldataload(add(input, 6368))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_200_X)
            mstore(add(g, 0x20), PUB_200_Y)
            s :=  calldataload(add(input, 6400))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_201_X)
            mstore(add(g, 0x20), PUB_201_Y)
            s :=  calldataload(add(input, 6432))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_202_X)
            mstore(add(g, 0x20), PUB_202_Y)
            s :=  calldataload(add(input, 6464))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_203_X)
            mstore(add(g, 0x20), PUB_203_Y)
            s :=  calldataload(add(input, 6496))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_204_X)
            mstore(add(g, 0x20), PUB_204_Y)
            s :=  calldataload(add(input, 6528))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_205_X)
            mstore(add(g, 0x20), PUB_205_Y)
            s :=  calldataload(add(input, 6560))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_206_X)
            mstore(add(g, 0x20), PUB_206_Y)
            s :=  calldataload(add(input, 6592))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_207_X)
            mstore(add(g, 0x20), PUB_207_Y)
            s :=  calldataload(add(input, 6624))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_208_X)
            mstore(add(g, 0x20), PUB_208_Y)
            s :=  calldataload(add(input, 6656))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_209_X)
            mstore(add(g, 0x20), PUB_209_Y)
            s :=  calldataload(add(input, 6688))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_210_X)
            mstore(add(g, 0x20), PUB_210_Y)
            s :=  calldataload(add(input, 6720))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_211_X)
            mstore(add(g, 0x20), PUB_211_Y)
            s :=  calldataload(add(input, 6752))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_212_X)
            mstore(add(g, 0x20), PUB_212_Y)
            s :=  calldataload(add(input, 6784))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_213_X)
            mstore(add(g, 0x20), PUB_213_Y)
            s :=  calldataload(add(input, 6816))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_214_X)
            mstore(add(g, 0x20), PUB_214_Y)
            s :=  calldataload(add(input, 6848))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_215_X)
            mstore(add(g, 0x20), PUB_215_Y)
            s :=  calldataload(add(input, 6880))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_216_X)
            mstore(add(g, 0x20), PUB_216_Y)
            s :=  calldataload(add(input, 6912))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_217_X)
            mstore(add(g, 0x20), PUB_217_Y)
            s :=  calldataload(add(input, 6944))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_218_X)
            mstore(add(g, 0x20), PUB_218_Y)
            s :=  calldataload(add(input, 6976))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_219_X)
            mstore(add(g, 0x20), PUB_219_Y)
            s :=  calldataload(add(input, 7008))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_220_X)
            mstore(add(g, 0x20), PUB_220_Y)
            s :=  calldataload(add(input, 7040))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_221_X)
            mstore(add(g, 0x20), PUB_221_Y)
            s :=  calldataload(add(input, 7072))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_222_X)
            mstore(add(g, 0x20), PUB_222_Y)
            s :=  calldataload(add(input, 7104))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_223_X)
            mstore(add(g, 0x20), PUB_223_Y)
            s :=  calldataload(add(input, 7136))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_224_X)
            mstore(add(g, 0x20), PUB_224_Y)
            s :=  calldataload(add(input, 7168))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_225_X)
            mstore(add(g, 0x20), PUB_225_Y)
            s :=  calldataload(add(input, 7200))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_226_X)
            mstore(add(g, 0x20), PUB_226_Y)
            s :=  calldataload(add(input, 7232))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_227_X)
            mstore(add(g, 0x20), PUB_227_Y)
            s :=  calldataload(add(input, 7264))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_228_X)
            mstore(add(g, 0x20), PUB_228_Y)
            s :=  calldataload(add(input, 7296))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_229_X)
            mstore(add(g, 0x20), PUB_229_Y)
            s :=  calldataload(add(input, 7328))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_230_X)
            mstore(add(g, 0x20), PUB_230_Y)
            s :=  calldataload(add(input, 7360))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_231_X)
            mstore(add(g, 0x20), PUB_231_Y)
            s :=  calldataload(add(input, 7392))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_232_X)
            mstore(add(g, 0x20), PUB_232_Y)
            s :=  calldataload(add(input, 7424))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_233_X)
            mstore(add(g, 0x20), PUB_233_Y)
            s :=  calldataload(add(input, 7456))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_234_X)
            mstore(add(g, 0x20), PUB_234_Y)
            s :=  calldataload(add(input, 7488))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_235_X)
            mstore(add(g, 0x20), PUB_235_Y)
            s :=  calldataload(add(input, 7520))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_236_X)
            mstore(add(g, 0x20), PUB_236_Y)
            s :=  calldataload(add(input, 7552))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_237_X)
            mstore(add(g, 0x20), PUB_237_Y)
            s :=  calldataload(add(input, 7584))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_238_X)
            mstore(add(g, 0x20), PUB_238_Y)
            s :=  calldataload(add(input, 7616))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_239_X)
            mstore(add(g, 0x20), PUB_239_Y)
            s :=  calldataload(add(input, 7648))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_240_X)
            mstore(add(g, 0x20), PUB_240_Y)
            s :=  calldataload(add(input, 7680))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_241_X)
            mstore(add(g, 0x20), PUB_241_Y)
            s :=  calldataload(add(input, 7712))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_242_X)
            mstore(add(g, 0x20), PUB_242_Y)
            s :=  calldataload(add(input, 7744))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_243_X)
            mstore(add(g, 0x20), PUB_243_Y)
            s :=  calldataload(add(input, 7776))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_244_X)
            mstore(add(g, 0x20), PUB_244_Y)
            s :=  calldataload(add(input, 7808))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_245_X)
            mstore(add(g, 0x20), PUB_245_Y)
            s :=  calldataload(add(input, 7840))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_246_X)
            mstore(add(g, 0x20), PUB_246_Y)
            s :=  calldataload(add(input, 7872))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_247_X)
            mstore(add(g, 0x20), PUB_247_Y)
            s :=  calldataload(add(input, 7904))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_248_X)
            mstore(add(g, 0x20), PUB_248_Y)
            s :=  calldataload(add(input, 7936))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_249_X)
            mstore(add(g, 0x20), PUB_249_Y)
            s := mload(publicCommitments)
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))

            x := mload(f)
            y := mload(add(f, 0x20))
        }
        if (!success) {
            // Either Public input not in field, or verification key invalid.
            // We assume the contract is correctly generated, so the verification key is valid.
            revert PublicInputNotInField();
        }
    }

    /// Compress a proof.
    /// @notice Will revert with InvalidProof if the curve points are invalid,
    /// but does not verify the proof itself.
    /// @param proof The uncompressed Groth16 proof. Elements are in the same order as for
    /// verifyProof. I.e. Groth16 points (A, B, C) encoded as in EIP-197.
    /// @param commitments Pedersen commitments from the proof.
    /// @param commitmentPok proof of knowledge for the Pedersen commitments.
    /// @return compressed The compressed proof. Elements are in the same order as for
    /// verifyCompressedProof. I.e. points (A, B, C) in compressed format.
    /// @return compressedCommitments compressed Pedersen commitments from the proof.
    /// @return compressedCommitmentPok compressed proof of knowledge for the Pedersen commitments.
    function compressProof(
        uint256[8] calldata proof,
        uint256[2] calldata commitments,
        uint256[2] calldata commitmentPok
    )
    public view returns (
        uint256[4] memory compressed,
        uint256[1] memory compressedCommitments,
        uint256 compressedCommitmentPok
    ) {
        compressed[0] = compress_g1(proof[0], proof[1]);
        (compressed[2], compressed[1]) = compress_g2(proof[3], proof[2], proof[5], proof[4]);
        compressed[3] = compress_g1(proof[6], proof[7]);
        compressedCommitments[0] = compress_g1(commitments[0], commitments[1]);
        compressedCommitmentPok = compress_g1(commitmentPok[0], commitmentPok[1]);
    }

    /// Verify a Groth16 proof with compressed points.
    /// @notice Reverts with InvalidProof if the proof is invalid or
    /// with PublicInputNotInField the public input is not reduced.
    /// @notice There is no return value. If the function does not revert, the
    /// proof was successfully verified.
    /// @param compressedProof the points (A, B, C) in compressed format
    /// matching the output of compressProof.
    /// @param compressedCommitments compressed Pedersen commitments from the proof.
    /// @param compressedCommitmentPok compressed proof of knowledge for the Pedersen commitments.
    /// @param input the public input field elements in the scalar field Fr.
    /// Elements must be reduced.
    function verifyCompressedProof(
        uint256[4] calldata compressedProof,
        uint256[1] calldata compressedCommitments,
        uint256 compressedCommitmentPok,
        uint256[249] calldata input
    ) public view {
        uint256[1] memory publicCommitments;
        uint256[2] memory commitments;
        uint256[24] memory pairings;
        {
            (commitments[0], commitments[1]) = decompress_g1(compressedCommitments[0]);
            (uint256 Px, uint256 Py) = decompress_g1(compressedCommitmentPok);

            uint256[] memory publicAndCommitmentCommitted;
            publicAndCommitmentCommitted = new uint256[](86);
            assembly ("memory-safe") {
                let publicAndCommitmentCommittedOffset := add(publicAndCommitmentCommitted, 0x20)
                calldatacopy(add(publicAndCommitmentCommittedOffset, 0), add(input, 5152), 2752)
            }

            publicCommitments[0] = uint256(
                keccak256(
                    abi.encodePacked(
                        commitments[0],
                        commitments[1],
                        publicAndCommitmentCommitted
                    )
                )
            ) % R;
            // Commitments
            pairings[ 0] = commitments[0];
            pairings[ 1] = commitments[1];
            pairings[ 2] = PEDERSEN_GSIGMANEG_X_1;
            pairings[ 3] = PEDERSEN_GSIGMANEG_X_0;
            pairings[ 4] = PEDERSEN_GSIGMANEG_Y_1;
            pairings[ 5] = PEDERSEN_GSIGMANEG_Y_0;
            pairings[ 6] = Px;
            pairings[ 7] = Py;
            pairings[ 8] = PEDERSEN_G_X_1;
            pairings[ 9] = PEDERSEN_G_X_0;
            pairings[10] = PEDERSEN_G_Y_1;
            pairings[11] = PEDERSEN_G_Y_0;

            // Verify pedersen commitments
            bool success;
            assembly ("memory-safe") {
                let f := mload(0x40)

                success := staticcall(gas(), PRECOMPILE_VERIFY, pairings, 0x180, f, 0x20)
                success := and(success, mload(f))
            }
            if (!success) {
                revert CommitmentInvalid();
            }
        }

        {
            (uint256 Ax, uint256 Ay) = decompress_g1(compressedProof[0]);
            (uint256 Bx0, uint256 Bx1, uint256 By0, uint256 By1) = decompress_g2(compressedProof[2], compressedProof[1]);
            (uint256 Cx, uint256 Cy) = decompress_g1(compressedProof[3]);
            (uint256 Lx, uint256 Ly) = publicInputMSM(
                input,
                publicCommitments,
                commitments
            );

            // Verify the pairing
            // Note: The precompile expects the F2 coefficients in big-endian order.
            // Note: The pairing precompile rejects unreduced values, so we won't check that here.
            // e(A, B)
            pairings[ 0] = Ax;
            pairings[ 1] = Ay;
            pairings[ 2] = Bx1;
            pairings[ 3] = Bx0;
            pairings[ 4] = By1;
            pairings[ 5] = By0;
            // e(C, -δ)
            pairings[ 6] = Cx;
            pairings[ 7] = Cy;
            pairings[ 8] = DELTA_NEG_X_1;
            pairings[ 9] = DELTA_NEG_X_0;
            pairings[10] = DELTA_NEG_Y_1;
            pairings[11] = DELTA_NEG_Y_0;
            // e(α, -β)
            pairings[12] = ALPHA_X;
            pairings[13] = ALPHA_Y;
            pairings[14] = BETA_NEG_X_1;
            pairings[15] = BETA_NEG_X_0;
            pairings[16] = BETA_NEG_Y_1;
            pairings[17] = BETA_NEG_Y_0;
            // e(L_pub, -γ)
            pairings[18] = Lx;
            pairings[19] = Ly;
            pairings[20] = GAMMA_NEG_X_1;
            pairings[21] = GAMMA_NEG_X_0;
            pairings[22] = GAMMA_NEG_Y_1;
            pairings[23] = GAMMA_NEG_Y_0;

            // Check pairing equation.
            bool success;
            uint256[1] memory output;
            assembly ("memory-safe") {
                success := staticcall(gas(), PRECOMPILE_VERIFY, pairings, 0x300, output, 0x20)
            }
            if (!success || output[0] != 1) {
                // Either proof or verification key invalid.
                // We assume the contract is correctly generated, so the verification key is valid.
                revert ProofInvalid();
            }
        }
    }

    /// Verify an uncompressed Groth16 proof.
    /// @notice Reverts with InvalidProof if the proof is invalid or
    /// with PublicInputNotInField the public input is not reduced.
    /// @notice There is no return value. If the function does not revert, the
    /// proof was successfully verified.
    /// @param proof the points (A, B, C) in EIP-197 format matching the output
    /// of compressProof.
    /// @param commitments the Pedersen commitments from the proof.
    /// @param commitmentPok the proof of knowledge for the Pedersen commitments.
    /// @param input the public input field elements in the scalar field Fr.
    /// Elements must be reduced.
    function verifyProof(
        uint256[8] calldata proof,
        uint256[2] calldata commitments,
        uint256[2] calldata commitmentPok,
        uint256[249] calldata input
    ) public view {
        // HashToField
        uint256[1] memory publicCommitments;
        uint256[] memory publicAndCommitmentCommitted;
        publicAndCommitmentCommitted = new uint256[](86);
        assembly ("memory-safe") {
            let publicAndCommitmentCommittedOffset := add(publicAndCommitmentCommitted, 0x20)
            calldatacopy(add(publicAndCommitmentCommittedOffset, 0), add(input, 5152), 2752)
        }

            publicCommitments[0] = uint256(
                keccak256(
                    abi.encodePacked(
                        commitments[0],
                        commitments[1],
                        publicAndCommitmentCommitted
                    )
                )
            ) % R;

        // Verify pedersen commitments
        bool success;
        assembly ("memory-safe") {
            let f := mload(0x40)

            calldatacopy(f, commitments, 0x40) // Copy Commitments
            mstore(add(f, 0x40), PEDERSEN_GSIGMANEG_X_1)
            mstore(add(f, 0x60), PEDERSEN_GSIGMANEG_X_0)
            mstore(add(f, 0x80), PEDERSEN_GSIGMANEG_Y_1)
            mstore(add(f, 0xa0), PEDERSEN_GSIGMANEG_Y_0)
            calldatacopy(add(f, 0xc0), commitmentPok, 0x40)
            mstore(add(f, 0x100), PEDERSEN_G_X_1)
            mstore(add(f, 0x120), PEDERSEN_G_X_0)
            mstore(add(f, 0x140), PEDERSEN_G_Y_1)
            mstore(add(f, 0x160), PEDERSEN_G_Y_0)

            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x180, f, 0x20)
            success := and(success, mload(f))
        }
        if (!success) {
            revert CommitmentInvalid();
        }

        (uint256 x, uint256 y) = publicInputMSM(
            input,
            publicCommitments,
            commitments
        );

        // Note: The precompile expects the F2 coefficients in big-endian order.
        // Note: The pairing precompile rejects unreduced values, so we won't check that here.
        assembly ("memory-safe") {
            let f := mload(0x40) // Free memory pointer.

            // Copy points (A, B, C) to memory. They are already in correct encoding.
            // This is pairing e(A, B) and G1 of e(C, -δ).
            calldatacopy(f, proof, 0x100)

            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.
            // OPT: This could be better done using a single codecopy, but
            //      Solidity (unlike standalone Yul) doesn't provide a way to
            //      to do this.
            mstore(add(f, 0x100), DELTA_NEG_X_1)
            mstore(add(f, 0x120), DELTA_NEG_X_0)
            mstore(add(f, 0x140), DELTA_NEG_Y_1)
            mstore(add(f, 0x160), DELTA_NEG_Y_0)
            mstore(add(f, 0x180), ALPHA_X)
            mstore(add(f, 0x1a0), ALPHA_Y)
            mstore(add(f, 0x1c0), BETA_NEG_X_1)
            mstore(add(f, 0x1e0), BETA_NEG_X_0)
            mstore(add(f, 0x200), BETA_NEG_Y_1)
            mstore(add(f, 0x220), BETA_NEG_Y_0)
            mstore(add(f, 0x240), x)
            mstore(add(f, 0x260), y)
            mstore(add(f, 0x280), GAMMA_NEG_X_1)
            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)
            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)
            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)

            // Check pairing equation.
            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x300, f, 0x20)
            // Also check returned value (both are either 1 or 0).
            success := and(success, mload(f))
        }
        if (!success) {
            // Either proof or verification key invalid.
            // We assume the contract is correctly generated, so the verification key is valid.
            revert ProofInvalid();
        }
    }
}
