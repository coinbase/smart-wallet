
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/// @title Groth16 verifier template.
/// @author Remco Bloemen
/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed
/// (256 bytes) and compressed (128 bytes) format. A view function is provided
/// to compress proofs.
/// @notice See <https://2π.com/23/bn254-compression> for further explanation.
contract Verifier {

    /// Some of the provided public input values are larger than the field modulus.
    /// @dev Public input elements are not automatically reduced, as this is can be
    /// a dangerous source of bugs.
    error PublicInputNotInField();

    /// The proof is invalid.
    /// @dev This can mean that provided Groth16 proof points are not on their
    /// curves, that pairing equation fails, or that the proof is not for the
    /// provided public input.
    error ProofInvalid();
    /// The commitment is invalid
    /// @dev This can mean that provided commitment points and/or proof of knowledge are not on their
    /// curves, that pairing equation fails, or that the commitment and/or proof of knowledge is not for the
    /// commitment key.
    error CommitmentInvalid();

    // Addresses of precompiles
    uint256 constant PRECOMPILE_MODEXP = 0x05;
    uint256 constant PRECOMPILE_ADD = 0x06;
    uint256 constant PRECOMPILE_MUL = 0x07;
    uint256 constant PRECOMPILE_VERIFY = 0x08;

    // Base field Fp order P and scalar field Fr order R.
    // For BN254 these are computed as follows:
    //     t = 4965661367192848881
    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1
    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1
    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;
    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;

    // Extension field Fp2 = Fp[i] / (i² + 1)
    // Note: This is the complex extension field of Fp with i² = -1.
    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.
    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which
    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which
    //       Fp2 elements are encoded in the public interface as this became convention.

    // Constants in Fp
    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;
    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;
    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;

    // Exponents for inversions and square roots mod P
    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2
    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;

    // Groth16 alpha point in G1
    uint256 constant ALPHA_X = 7951754286558334855567107883801376152447669146862748041736420902700747759051;
    uint256 constant ALPHA_Y = 9274763359747362727422181893490974515128500448922627341338130300912492211569;

    // Groth16 beta point in G2 in powers of i
    uint256 constant BETA_NEG_X_0 = 7440271058235994518842002852879505488315569720470849943962869388899088744375;
    uint256 constant BETA_NEG_X_1 = 9117293351057701686353856697313922586790477255244189025306597990162211295595;
    uint256 constant BETA_NEG_Y_0 = 20714964732640217742023955371097292882759700677014885485823260856959905257094;
    uint256 constant BETA_NEG_Y_1 = 17595763038587546485165868580231122816952176508340020255690568750867371459566;

    // Groth16 gamma point in G2 in powers of i
    uint256 constant GAMMA_NEG_X_0 = 2773662567256125399519265955083961705117126126025382066004014590077984093766;
    uint256 constant GAMMA_NEG_X_1 = 9332270091346747427493076494751333019188719373791466660249351995350916841765;
    uint256 constant GAMMA_NEG_Y_0 = 16697023463808287696905190684932205433960864531319366117009481031623741457955;
    uint256 constant GAMMA_NEG_Y_1 = 8657818711571546536417725235413922694381931002548488951419292374792919953379;

    // Groth16 delta point in G2 in powers of i
    uint256 constant DELTA_NEG_X_0 = 3729230468517033943664335506326984649235354620620240824380114303433248428585;
    uint256 constant DELTA_NEG_X_1 = 5250233778391340848494961930521189249369285376636849746812283415558401105783;
    uint256 constant DELTA_NEG_Y_0 = 5552509557760640159732701800494379485883626961456961583148386192477694481597;
    uint256 constant DELTA_NEG_Y_1 = 19519644810422649089988091894639268142737479649694227784939051667003058355910;
    // Pedersen G point in G2 in powers of i
    uint256 constant PEDERSEN_G_X_0 = 20219155009967031504599404191495872094562540310871732831845586712314043563662;
    uint256 constant PEDERSEN_G_X_1 = 8108246204149183223172264064977291070025991278460883484809334548855849739168;
    uint256 constant PEDERSEN_G_Y_0 = 14080742045979939990461642775638661109626701779834196150296313448670576003234;
    uint256 constant PEDERSEN_G_Y_1 = 4342138927181597266187355531553326450828431144865250697310563644873216414342;

    // Pedersen GSigmaNeg point in G2 in powers of i
    uint256 constant PEDERSEN_GSIGMANEG_X_0 = 15252980290502321338077373629785518620748329818257002292511479543636937698662;
    uint256 constant PEDERSEN_GSIGMANEG_X_1 = 10645792026111442063810610267476992377859904879939669728135248043000466440562;
    uint256 constant PEDERSEN_GSIGMANEG_Y_0 = 4194165911346008709552485529815207265349969980028948309639836599815846218753;
    uint256 constant PEDERSEN_GSIGMANEG_Y_1 = 11792909078506667965548051632800245423317084685688197597253428976962642494549;

    // Constant and public input points
    uint256 constant CONSTANT_X = 2675925532115556685867418068969899838472670801685318511420161446207995782366;
    uint256 constant CONSTANT_Y = 5917577157098207687946000661095119855851759904398420611115469609707644628166;
    uint256 constant PUB_0_X = 18044436590114341329383810156748459627545194036542342973318215628651173963282;
    uint256 constant PUB_0_Y = 6647921149969031548796610546599535604198105496054159247507916100672358864622;
    uint256 constant PUB_1_X = 5267663830360868727490367613275709910162906224679937809391682479991508014836;
    uint256 constant PUB_1_Y = 13077911228461226170429387656694258696250249425005776256009814042618745030350;
    uint256 constant PUB_2_X = 15838317575638244481462875488804712733707492345414640490152842933520556689287;
    uint256 constant PUB_2_Y = 7784204675947306680069362852496179553669975718975174169357365589126236308704;
    uint256 constant PUB_3_X = 20336990396262690026100046752617021808028535482656582321462507375257228155042;
    uint256 constant PUB_3_Y = 6245124617531931457477115005826432301365575563894687522439229490979364542464;
    uint256 constant PUB_4_X = 21520577129078035006882870882793926056780105373001835167452003421003923916985;
    uint256 constant PUB_4_Y = 587472461488239994008784482818301916774446347737213447894108998314395553464;
    uint256 constant PUB_5_X = 19285983658236776616537998504462356596633579356470754046825441934111487824655;
    uint256 constant PUB_5_Y = 16698927530512079730609089200761301120774169864221575236368969116170883206479;
    uint256 constant PUB_6_X = 18025043994318963987969492445083879902306959376559683493136785883101111929375;
    uint256 constant PUB_6_Y = 7736708942917989466686669227042295587819868886217276019408370443054512202522;
    uint256 constant PUB_7_X = 4992487485263141991014614787944161250566469841947050456282434943822670963469;
    uint256 constant PUB_7_Y = 5019625489929034877976983230225932205256680909357419369722693231617802887971;
    uint256 constant PUB_8_X = 13572590634498699449998754538417196608209483718842405639076775427352757576639;
    uint256 constant PUB_8_Y = 17734125422331395196512951234946128879259381354019731971940619742583615137567;
    uint256 constant PUB_9_X = 13963155287180419150852353683379581496863834154814779295149571448364235777396;
    uint256 constant PUB_9_Y = 15004355185187496517545759288862861301324879557891400621344925398065844352840;
    uint256 constant PUB_10_X = 7165802976546743126832979083183139282782694027802685928352055294033032893665;
    uint256 constant PUB_10_Y = 5948596558257572876443043917962092494422723567120327842802209420271361793259;
    uint256 constant PUB_11_X = 19605737182860169675900841536388269726285116825110799346063436350776225693786;
    uint256 constant PUB_11_Y = 17133637522971455645724017519278232350303632361142916203359398990147636743215;
    uint256 constant PUB_12_X = 1766419633326142329790661290439897073506707213908913613417338966621470802930;
    uint256 constant PUB_12_Y = 5563328603597509682164206077885694706226219387868794137321077042890425323863;
    uint256 constant PUB_13_X = 17191207028391049775886692591591043897333588573554450350757203811205143960803;
    uint256 constant PUB_13_Y = 6226703403360335602112456821979369285342901670833879915947217924353901573457;
    uint256 constant PUB_14_X = 3053037427622385644471127906335342031168661914293193180073801882963962228656;
    uint256 constant PUB_14_Y = 4880034258556357100593208195090248171359793597917161141143255386717583612296;
    uint256 constant PUB_15_X = 1377165961695742462949670632467537713440265929901001621968334224649537109016;
    uint256 constant PUB_15_Y = 7189878004736142473249044878008127894744442910071724298487222764317041214255;
    uint256 constant PUB_16_X = 13981097169277814277835990788849347152793334339720086494326806305189534112718;
    uint256 constant PUB_16_Y = 3990505838053410550804029289519564516444698656811037259664911409839272863744;
    uint256 constant PUB_17_X = 12748922546419834073738462484326247573063951641554208276879402626983519013476;
    uint256 constant PUB_17_Y = 5907961253131592522238741543070247322392616916917630037476100246382397996374;
    uint256 constant PUB_18_X = 12377815867633066073962109268891162519909664569789594648715463903613107759338;
    uint256 constant PUB_18_Y = 9829745342839613391197223842755503201681810556960006634752501551397450762561;
    uint256 constant PUB_19_X = 12179865195171870324147308649662236510461826046503922076398705745170516266407;
    uint256 constant PUB_19_Y = 12284383757337237370397888951771887452200119912791354212867572657590319413666;
    uint256 constant PUB_20_X = 12660982173382639327688127092359882960543535173192187972943420870566477224460;
    uint256 constant PUB_20_Y = 2787890112443739855839499437058691630694640210269627095475736554007979484542;
    uint256 constant PUB_21_X = 20373942005782048864096473177533903260033249712475910430409594755706432893579;
    uint256 constant PUB_21_Y = 18884779110296501536402417223332383191112151445464736091287447885246791693569;
    uint256 constant PUB_22_X = 655756159643991129617009816891157445281467997810662929484193753468129509940;
    uint256 constant PUB_22_Y = 5080206978766167503036832965301115989680344228721455416460719964725475525410;
    uint256 constant PUB_23_X = 13388034622890548298155383652841278168995845155746793555268786969223626350086;
    uint256 constant PUB_23_Y = 4753890401652119344082433197628355719514347406244716280224763628432527491618;
    uint256 constant PUB_24_X = 6749496598553502079637125267572301624241517437693179109335139429722082723863;
    uint256 constant PUB_24_Y = 11953141946667030826778196274700921265313652691640024333375951355055818349952;
    uint256 constant PUB_25_X = 17019676915325285062606038680753505983751155026694529772904378699027124117463;
    uint256 constant PUB_25_Y = 13980525036232282468855333793782152269047758255842778537790479288617593393686;
    uint256 constant PUB_26_X = 4708555032489740796832947392666209076689621887606250974701457787058998616271;
    uint256 constant PUB_26_Y = 21110865799163052307297982710464989626739209615988526177556238928261909735753;
    uint256 constant PUB_27_X = 15956635179490520616959708515525307053531581291500141221521115925814254389546;
    uint256 constant PUB_27_Y = 21312756807498505187079832233786553246220361531125533836120104718250332694316;
    uint256 constant PUB_28_X = 4327490388009524065310442133965152135128456460730346567660906630029789756512;
    uint256 constant PUB_28_Y = 19809361379072308711228072920415353937599128186737808016922105531774295500319;
    uint256 constant PUB_29_X = 13142059830880800419606367976771257579132109139173879456119008074907819130258;
    uint256 constant PUB_29_Y = 10997726470469631507673019515628993154942783980945944604748555605739977166036;
    uint256 constant PUB_30_X = 482042006207379215770576195942229800691602367057283119573574478821740629444;
    uint256 constant PUB_30_Y = 16911764853986979268389893802590529979875419687668543581509328591378484740864;
    uint256 constant PUB_31_X = 10152199332712732937139975060446712516760179457415402386096797120173936374741;
    uint256 constant PUB_31_Y = 21843720259585146955805403369938515678025184986627716012380406524962858368876;
    uint256 constant PUB_32_X = 3683525159016777171266279428275737441613857317517696227349217715744107777575;
    uint256 constant PUB_32_Y = 21456234317289403718927531803591481729023297784545630698229834709576772221168;
    uint256 constant PUB_33_X = 7074651433104925025613665190666176135678074461089286260939744013761413407577;
    uint256 constant PUB_33_Y = 1412055187562464995289158975228039928844220227872791464193263732292757503207;
    uint256 constant PUB_34_X = 1309286476317274915916570306545210826402489405647106806778746621877736772471;
    uint256 constant PUB_34_Y = 13552544323737099885530947154905159466214957531198884787099185835270994369428;
    uint256 constant PUB_35_X = 13532052606977720873566802887411425647691570321330178734087960422979481836009;
    uint256 constant PUB_35_Y = 3226248670362626604585272927377784345949425510903725612843073611925879559680;
    uint256 constant PUB_36_X = 6750178335427933487339533850714706220630348436618127103715721621129244606529;
    uint256 constant PUB_36_Y = 6658776844861333025620901434502957581579540993690777850100125690231441745222;
    uint256 constant PUB_37_X = 9341196701951485884860865590744039124530798779627357026522550952556696657646;
    uint256 constant PUB_37_Y = 8940960639810348774922434983103666243329388110558385627781575704189476425772;
    uint256 constant PUB_38_X = 8434058926559535496622638152308556054012043110542263438364722886504925524652;
    uint256 constant PUB_38_Y = 15600715708560568789291791719802332179212587171476711771277350971219515867290;
    uint256 constant PUB_39_X = 13030190625299108112001720821668478217709357780564101347205012512762475531497;
    uint256 constant PUB_39_Y = 19385925085036457178325276110419292419204734513908432404330628304908517987656;
    uint256 constant PUB_40_X = 7750106298572753447531539760635451629659414539773525513733009403335446652958;
    uint256 constant PUB_40_Y = 13992866466689654826027897315827635320476347348834801570706048369508718260106;
    uint256 constant PUB_41_X = 18850451678092016054327922507650681230611895031134454965743018080203631663632;
    uint256 constant PUB_41_Y = 9819446275507792634696164076115004460568745685558919637752607445410927035681;
    uint256 constant PUB_42_X = 9711718345740887602841089406684370619393073664052561006471365164542962202391;
    uint256 constant PUB_42_Y = 11715740203031933335254180721556780999405024060659149582646823367975371947113;
    uint256 constant PUB_43_X = 19408049266200132037571781371183567400792837937109713328558809117398505520943;
    uint256 constant PUB_43_Y = 4367648205326846395768198417438916521343399106693908199189062814868865409295;
    uint256 constant PUB_44_X = 2076130609441739230880123969148832380488247319239608309792254879749203699875;
    uint256 constant PUB_44_Y = 4370716391629145188059003500097487097807992344843579866765344337058519180522;
    uint256 constant PUB_45_X = 19899243112624794614330717310156238923730982900111978455371752550282020375041;
    uint256 constant PUB_45_Y = 15123505740661343166804115914231013532849904948544127845534988317825979201074;
    uint256 constant PUB_46_X = 20725591044969475699268664263927488650394454418339980648738178674192501574470;
    uint256 constant PUB_46_Y = 10821109256902069187779061219878325683351555564570184615463639396254713927987;
    uint256 constant PUB_47_X = 12238167167209208659417600772933010989713298955309932296344941969714721263433;
    uint256 constant PUB_47_Y = 6045463408316857093265906326562300366816396724166066737732335664824574085263;
    uint256 constant PUB_48_X = 1479005045412933293131581337800804977269989943646751020472541937677031114923;
    uint256 constant PUB_48_Y = 2941406394630922929569947804172537231273570399979462508399071975150893667669;
    uint256 constant PUB_49_X = 482910892316805468497626565742439818858720189926466175195972756344288494973;
    uint256 constant PUB_49_Y = 14479859390495871425410465165059044949990394785799157641668171135013633944718;
    uint256 constant PUB_50_X = 11161989392188633189776832639559412993514093310641139717124403406161151563170;
    uint256 constant PUB_50_Y = 8987429472907534185533065848641543412029191556890621182184497348669641953057;
    uint256 constant PUB_51_X = 571219616601508030680679893979011007421325079060115546915245177932430105794;
    uint256 constant PUB_51_Y = 9872977699563625154163596988643890264316000081536388174642406531131951299035;
    uint256 constant PUB_52_X = 17373190552951466655564849131960227836241858246131521630447877045340456781216;
    uint256 constant PUB_52_Y = 21360133476190319520736926268200273335734593919949334218079665684985763610351;
    uint256 constant PUB_53_X = 10668698281079420052840140890635683078236803758038401377910591739877798010557;
    uint256 constant PUB_53_Y = 12457987531371670795491048452163020846430229271576733304891838693844677597757;
    uint256 constant PUB_54_X = 15921563526905065347664727822469038256806950804678326517383187923146318624351;
    uint256 constant PUB_54_Y = 7028990446069393247023843641765149035809192202871121306372482264691781215871;
    uint256 constant PUB_55_X = 15527573361141697452383708064616977161108956899092803325502209046210039035744;
    uint256 constant PUB_55_Y = 21245474444875646601983406063387889092836286418099561826411405936855588463432;
    uint256 constant PUB_56_X = 15168558659172432905650560405658976687518117329452314126394433561016234333998;
    uint256 constant PUB_56_Y = 6427257048271492924592194368240850237780434559485754771468186144846821645522;
    uint256 constant PUB_57_X = 4318008064651349070776984921678791401413178649845672230174427113885725970175;
    uint256 constant PUB_57_Y = 12183868502822748296424961477942586642102885150595698064715301294105952707292;
    uint256 constant PUB_58_X = 7010654556633080446139181973358257834686164172641223295854554541761904961;
    uint256 constant PUB_58_Y = 10105340014748233707175992232464366063629611119652866226474842471514730222887;
    uint256 constant PUB_59_X = 19166263103103341302724893446205200060662708526760674211213631015218060449662;
    uint256 constant PUB_59_Y = 8096868931875278363407377347310243928036453932846637095791574460252153328214;
    uint256 constant PUB_60_X = 17106351407001296238318462906794173375511964456955627825986763195271434311979;
    uint256 constant PUB_60_Y = 6669182696216525184730534853985750817602753292223970968909001878719931340212;
    uint256 constant PUB_61_X = 21609160379156191554339592573431228540868028748868159904951655720188948563725;
    uint256 constant PUB_61_Y = 18842372555802897100326434137107520587882182769251234013032799083116182598370;
    uint256 constant PUB_62_X = 5552075437929545859691760590976524832420152445932055095908030827367882066720;
    uint256 constant PUB_62_Y = 7310832961733626938351307787972990316171115370127008833323723511504735342219;
    uint256 constant PUB_63_X = 11478608523251078741795630244010080778295099246641960628155508560521456027046;
    uint256 constant PUB_63_Y = 983772338951968297275017024536734497781029852924533856639353262688172167420;
    uint256 constant PUB_64_X = 898755729776963510886046847644283037893205811722664932236492520923106328134;
    uint256 constant PUB_64_Y = 20214765046636957076105318040979028935902157581847501227499251608138490599043;
    uint256 constant PUB_65_X = 1042738763576444118802039976924419505489203783179204835041512630380201032864;
    uint256 constant PUB_65_Y = 18132682647583951836086147422404185302264416762952713804441616921040711301757;
    uint256 constant PUB_66_X = 16807630367671439428817772237187332282985364068316214956740048998284636916624;
    uint256 constant PUB_66_Y = 701974222430950792598527735308289135704210265204042233266936331017365012931;
    uint256 constant PUB_67_X = 8069942781429422335054419856487434207419337557936580312886438019945669987963;
    uint256 constant PUB_67_Y = 21410444662768970731132203658208724072858647637791254975100636619762251717158;
    uint256 constant PUB_68_X = 11563092942837570924939951519938238091343815585971336834965636832531183829684;
    uint256 constant PUB_68_Y = 6418079672795780392212046120115451978503257453601041170158938449371937110353;
    uint256 constant PUB_69_X = 19329171456953408343878145503333189556255346672318121483047273759148306653626;
    uint256 constant PUB_69_Y = 14113986250710772796240066687670893095167889291338067068730517540066887166390;
    uint256 constant PUB_70_X = 7855347523031007323326316171930387442588375502075513515684421314805163087856;
    uint256 constant PUB_70_Y = 14958558589372160559226660316335389364140777505751453865293895631644778182498;
    uint256 constant PUB_71_X = 15590639167982358511781254796700918256681516626531516591531064391436876413927;
    uint256 constant PUB_71_Y = 6706987341827958090232059735169873040529834003276550480580622421925968081323;
    uint256 constant PUB_72_X = 21861544289424325393593630334784130769958944758794740374189980003053654536992;
    uint256 constant PUB_72_Y = 5176308086387732571386006486606414721943480920333950424992021764775418795620;
    uint256 constant PUB_73_X = 5617616115844190735748374661974587678449692755668886142525758057393571590880;
    uint256 constant PUB_73_Y = 9560843496992488899360459685507813593454688862771520202870773169936516502079;
    uint256 constant PUB_74_X = 6196617474560433087981398954907190544102610963247137892416177662660578788082;
    uint256 constant PUB_74_Y = 1997486490003703057936576536236182031039160253103778396981044464874883048436;
    uint256 constant PUB_75_X = 18606657179033621833253442838922391491139048013568520586697538730813358036908;
    uint256 constant PUB_75_Y = 5534271907117507070522299399059564240402906088001327145062497833505961378020;
    uint256 constant PUB_76_X = 7934794433582822581559157144152502850192380946555067834231340171781634687707;
    uint256 constant PUB_76_Y = 13898702247782986252705343045104552487902829480684963150170933038672209554462;
    uint256 constant PUB_77_X = 4705635598701245962376408456606036569050425041258046077420070321716754352587;
    uint256 constant PUB_77_Y = 13571125558957078337652140436580445089452412474617358026806594520739461221941;
    uint256 constant PUB_78_X = 9635627653094977634850290966579344844423529925327346451667242176346179544918;
    uint256 constant PUB_78_Y = 1991464822757208042313266787889971699054672584116957579128591078303339887191;
    uint256 constant PUB_79_X = 12129099833813294721531536307342614301286992640414375654410980344691176410359;
    uint256 constant PUB_79_Y = 3515172814121102869190584301247294964866300558613988582513926043230513342682;
    uint256 constant PUB_80_X = 22484151127463936539584486434587799907182193233546713317267226730841108446;
    uint256 constant PUB_80_Y = 674681882443527463602245539815490890455778612370946701597800571851120249339;
    uint256 constant PUB_81_X = 4604956098766982011766537002489863081710848365583102490570638902156310320622;
    uint256 constant PUB_81_Y = 12665891815726979630736530046904365767347591225057274542521068599977913918247;
    uint256 constant PUB_82_X = 9131735639950618336728667841650366857880754707395998668717408206789503070619;
    uint256 constant PUB_82_Y = 9424674173768530137572393392622806713295657601521528225845089636267971364812;
    uint256 constant PUB_83_X = 19331697489095692374463240034279458901559496038496465188969552358083798216182;
    uint256 constant PUB_83_Y = 5628950079342077746962703672350562504564190642866401346009165879049916439045;
    uint256 constant PUB_84_X = 16199666122151666755629095400583640699914714958610417566328117983827180829210;
    uint256 constant PUB_84_Y = 17704710820088960200369965225667180986334000253398253815047245450300898918503;
    uint256 constant PUB_85_X = 2950027424756216870892323700769995227764589627834498767585020474644653247800;
    uint256 constant PUB_85_Y = 92692999229254306641198338771709662740186252231244671326130072964207290885;
    uint256 constant PUB_86_X = 20796465884334069784321345346743475052539263883274338353865116563610742820834;
    uint256 constant PUB_86_Y = 12145817234624186163506580154267049586253286533889670205530980423840998036377;
    uint256 constant PUB_87_X = 4887565280968367415334525641652572901125343316757721458028600437199237740669;
    uint256 constant PUB_87_Y = 20365605965479669831898113613031501569411880791223959416680515249053485847874;
    uint256 constant PUB_88_X = 5365901507340754768313599039410741641068318347468336952493568522889334687328;
    uint256 constant PUB_88_Y = 3708946739078622705639271502922790829560887113381910381841553256781369919452;
    uint256 constant PUB_89_X = 17992464651654927869311636604995625468234217608263064568129622096356473656591;
    uint256 constant PUB_89_Y = 10995621964611855894096292593936457752220791530233483880120994140414339326203;
    uint256 constant PUB_90_X = 18129631690404896653351677818218638982379180780483910429087043637754814912161;
    uint256 constant PUB_90_Y = 11773999534971845162241911277016459409811753071617976922415821724991307872196;
    uint256 constant PUB_91_X = 11159837937348471523880802615240969567188732762033069534700660201554215670932;
    uint256 constant PUB_91_Y = 11056646295699691492643026871321771609907626832736455963452474117800801896514;
    uint256 constant PUB_92_X = 9826411965451035426730697716648890399083683262911459879828162371076682489595;
    uint256 constant PUB_92_Y = 6873980512858160529146310569959726204758084154481721580432160015862894437862;
    uint256 constant PUB_93_X = 20286385816041999787496014601218009293458712173765621709430311057388543273596;
    uint256 constant PUB_93_Y = 8032673982402830401641424088922554579690021885376394129354032792815667126934;
    uint256 constant PUB_94_X = 19162791663650946275469475701426716274273727477277817217889164734546824374911;
    uint256 constant PUB_94_Y = 8542998920870334979711033299193529147642348446343920784994487665415676895753;
    uint256 constant PUB_95_X = 18974210872184579812627765596632045896722883556889808663613891580248054771023;
    uint256 constant PUB_95_Y = 18226488817942451576627048907431904830081556529945943477184910962904613580119;
    uint256 constant PUB_96_X = 16320942942362049331863663983786168589210293386569664217005140040316917445031;
    uint256 constant PUB_96_Y = 3078695607008927947876102826086188806788048903400985276248532909798718138171;
    uint256 constant PUB_97_X = 14138228519506240359831668270116691114589771050719933829070677308105051171177;
    uint256 constant PUB_97_Y = 1967490614911494126690983724269744926296304294030851761824947061125507473736;
    uint256 constant PUB_98_X = 20945463744869714691203396241949621241433772788277293017953193945273566756326;
    uint256 constant PUB_98_Y = 16957461808748783092054993745917078413958898433800099141004563951081673554768;
    uint256 constant PUB_99_X = 12627067405450521315794387224531710746911378928176181721494570058848652780522;
    uint256 constant PUB_99_Y = 18335907739158497506392739718840280470131421816607494584065451202874731188492;
    uint256 constant PUB_100_X = 1231557936197389251850945987664662665839543221180263205928331227668738403276;
    uint256 constant PUB_100_Y = 13269981215512354765964366631676071170719621091856463353465448751999378030879;
    uint256 constant PUB_101_X = 13988396291077426915771018388714149129495502745492113575042424381356691877427;
    uint256 constant PUB_101_Y = 7300859633036985161045202200930888491617037355381401970512917154553678390926;
    uint256 constant PUB_102_X = 20512731190668774713035265610193241724054106793650263093331389220793847308827;
    uint256 constant PUB_102_Y = 16627436683712280266451249572526673379404884067215527296529359793960026399988;
    uint256 constant PUB_103_X = 13819189744414771278475351358687458187275465762059651211777479357930147788022;
    uint256 constant PUB_103_Y = 7338723633623434244382328222850484915561274857466136252646380697469808342765;
    uint256 constant PUB_104_X = 20086005840184613079208552854428792274425129778317689318119536071061660455995;
    uint256 constant PUB_104_Y = 17782109116125267774813506392300730161322698446572982608731615759506184304567;
    uint256 constant PUB_105_X = 20591301375156562595242962898009425428475277012723172196946649098475394812307;
    uint256 constant PUB_105_Y = 10112383025224928290194811170364740745176656341940957662814508849592386572251;
    uint256 constant PUB_106_X = 19570032413154204010051502968001554843087956521680950454822161266482388064132;
    uint256 constant PUB_106_Y = 17447401657850550845234639280983861072762186033085530467805529945460061719326;
    uint256 constant PUB_107_X = 15529875873248679156195187376423783389886367869779480644214650995638875002358;
    uint256 constant PUB_107_Y = 1720120423643638156855735028537669213038009092170169544504406846312172332809;
    uint256 constant PUB_108_X = 9221138049933552418216995013466889296888514588002450421030188674670510095566;
    uint256 constant PUB_108_Y = 20947433787998817714053107269969488595885952449267664364087855745601508117901;
    uint256 constant PUB_109_X = 989253705625708200578697893066074857360806343478589069759958299150970085853;
    uint256 constant PUB_109_Y = 10898380733529875076174661426749959349761147778173930543944773857147308698744;
    uint256 constant PUB_110_X = 6468555878679242093028746011464565623838294890886778487154382745673554267363;
    uint256 constant PUB_110_Y = 4461475149984029336523724366800430999886723337929902197540185535795059038026;
    uint256 constant PUB_111_X = 6308082173680796369851587061685351000016469013816741294416296660853885592962;
    uint256 constant PUB_111_Y = 10134622248126973931186424621769680085479091401508243292745849509055319817118;
    uint256 constant PUB_112_X = 21493795594208744447700651354789795359233725028382218311893788173145765384625;
    uint256 constant PUB_112_Y = 18910445595795223422770951329963659453277371637366225813589601917573409677437;
    uint256 constant PUB_113_X = 7916113920505506778025484935232362272079601891242301803207578116134931253340;
    uint256 constant PUB_113_Y = 16527223314155344773102529581979050149716017813501581187805940876627704101653;
    uint256 constant PUB_114_X = 8594344620613707416347116972136386940152806250729866035231880720023809367382;
    uint256 constant PUB_114_Y = 16329193258111580423274890306698263955629826875168386125934283951780271037915;
    uint256 constant PUB_115_X = 16724282411302566033864705636709857088291098957597412582558137552706270065758;
    uint256 constant PUB_115_Y = 3091678968094919923760538642774373098767935906088758345109475716613875244256;
    uint256 constant PUB_116_X = 14730485205680256901873519711512209017251999222493856644164367568501299392536;
    uint256 constant PUB_116_Y = 4418250115446235303101222357300646475098202708373463505507358364733493745411;
    uint256 constant PUB_117_X = 7173843286894474976668226324424674411479655838884164877787829387137386572956;
    uint256 constant PUB_117_Y = 8118013313510940807064798062686629168655562388747472947972030863249909863001;
    uint256 constant PUB_118_X = 11194836704502176717403890110243056364590037790620976235517839940626477359210;
    uint256 constant PUB_118_Y = 16538729416013047727649769863731410927352886192729509652392415698363252965609;
    uint256 constant PUB_119_X = 12613005133756233957214951584580456004805899870172270459788883173989210894514;
    uint256 constant PUB_119_Y = 4314184701848888911926511771467312792728461488238349116364755052930728074462;
    uint256 constant PUB_120_X = 17066400036554295502720891944109917893659112647028751060547622338481350721161;
    uint256 constant PUB_120_Y = 21432074947499503264504721524591063401917598194114644722478927347201597049816;
    uint256 constant PUB_121_X = 13533982590125503063466396860491926370157003603440194447972356915957108345457;
    uint256 constant PUB_121_Y = 15827449443420899381642603469855357903814696805960332535996743351885884558407;
    uint256 constant PUB_122_X = 8681879370456415083403404400572948086036810876721781891218746523973807973294;
    uint256 constant PUB_122_Y = 17391738045431061441158102054433413329800004451652772322062524169205521355121;
    uint256 constant PUB_123_X = 20342349426779798796862754518640208024826576935194586112422824525000220723521;
    uint256 constant PUB_123_Y = 3787333030803913580286851855483726557233324776232236591737493663988921229675;
    uint256 constant PUB_124_X = 16984368814031541667379648795203365705130022968716727992720913370126105699125;
    uint256 constant PUB_124_Y = 5065605532186344876563550484752878995022639905422637588904340672274864965302;
    uint256 constant PUB_125_X = 959406725056426120560159818662418856414790399695217538166376505863172984209;
    uint256 constant PUB_125_Y = 21364748412519379748633563585380290614695514839918625280995326200974258682484;
    uint256 constant PUB_126_X = 6284539202702525443971177050648762534688508687555324972833272750369679862919;
    uint256 constant PUB_126_Y = 7523392106779404099053932399892942342747527685638745907592516496422489790834;
    uint256 constant PUB_127_X = 12899729544394661703652786685380333704293677088837306336662850995385915714036;
    uint256 constant PUB_127_Y = 11918035672916927851504789720965855156258570764403550019393350387828004784575;
    uint256 constant PUB_128_X = 7533746121024548486248219875980810780677466642378230025587802541086733410858;
    uint256 constant PUB_128_Y = 2521452769433923566709338839650252895844385741625527781867916481496526149857;
    uint256 constant PUB_129_X = 15917449025892463800212636301543624638117642748001565704515443596131174478666;
    uint256 constant PUB_129_Y = 815426008977480679328734092778683540856708696351437890025357879027246367094;
    uint256 constant PUB_130_X = 9247403790779212654944965450080777583053330291778721084092577661415996695174;
    uint256 constant PUB_130_Y = 6573774350751577516781567840583116617008960670260402702114428370857513693275;
    uint256 constant PUB_131_X = 15409873171206541185338090157177491182260237232294975662181688852171850888514;
    uint256 constant PUB_131_Y = 9970695804734665199624832377247436070173434888532213126093737204009429051587;
    uint256 constant PUB_132_X = 19385982238954858491575933933204704001260507383938485755699484340268212743617;
    uint256 constant PUB_132_Y = 9648572049069704927077978962307027391884118646863706363928828653118769145866;
    uint256 constant PUB_133_X = 15323774724816580985872848393325726035913101312979564846341433456477911776316;
    uint256 constant PUB_133_Y = 10668651492439128043506260871796145883201259045130573369094765377103192573759;
    uint256 constant PUB_134_X = 8692725149835325777113230602329443867456479413782863222969918747592399203251;
    uint256 constant PUB_134_Y = 14526831093877407049017105791287536587612859869428782744844603381099625342791;
    uint256 constant PUB_135_X = 4454869045158338041114807857696809178528447904158571663800893570685549628722;
    uint256 constant PUB_135_Y = 13604775460009030871907654650395164979957295921054024675712207049170653048745;
    uint256 constant PUB_136_X = 8440270396811419623853645013433498679416670130746537757727178015478436417942;
    uint256 constant PUB_136_Y = 9114835258872402601329675457957710780508064819764781235708498402394457260701;
    uint256 constant PUB_137_X = 4241179794703528024248693204131966392272171480059548316179000985057324339373;
    uint256 constant PUB_137_Y = 7875581703043235879255433276980414366667120922076235194455252305647458468394;
    uint256 constant PUB_138_X = 5772135780642020136250034632476112974599320702165962310510545565677773610450;
    uint256 constant PUB_138_Y = 9880491871736983985391825943108421271196959989957394423804892001983237761578;
    uint256 constant PUB_139_X = 748709013765289500942280380381363228567315831224420795441064201771348189437;
    uint256 constant PUB_139_Y = 7824497832928935277882439592443867401622565928531369579011457795711666042702;
    uint256 constant PUB_140_X = 6737019802503234532998359384346634445888489080287801982075976515780275968;
    uint256 constant PUB_140_Y = 2502454354113050038136883392068855643219422861070627057283562955763915930181;
    uint256 constant PUB_141_X = 8707882400318489325867442277336773771308756163762535965716835990521878603475;
    uint256 constant PUB_141_Y = 9238557152280679871894352842046029104888962799905714822833729855575452354990;
    uint256 constant PUB_142_X = 18397223975907779071406677432218707189914396153067299377772172260931162299467;
    uint256 constant PUB_142_Y = 11545764415073594454805199446183355524593758069859052965837899928170870522957;
    uint256 constant PUB_143_X = 17831071599872760253427325882571641223147662577185164574241992923062829876498;
    uint256 constant PUB_143_Y = 3730037574210044499683355256223552674783536652432042118323806860562519125676;
    uint256 constant PUB_144_X = 21836173951794501598459355835405280687515104986398376589580099262711871091501;
    uint256 constant PUB_144_Y = 9952818900819212407888541246025718155356976635707846445518249169826970745488;
    uint256 constant PUB_145_X = 11672990049423110198820621897424338055736755531158062696401916510008289720651;
    uint256 constant PUB_145_Y = 7460036897365889154478466918699265290545676638389954206698633489948385682347;
    uint256 constant PUB_146_X = 371604857592313032562564553028419091258335550829907967203711612241147382087;
    uint256 constant PUB_146_Y = 426197830985691394756292843109091733554251502768429959671075925283947650747;
    uint256 constant PUB_147_X = 20806806519681483709803787882433004465528215787805619488817908081991386491901;
    uint256 constant PUB_147_Y = 18305414634345278416032259813087709098856517185126315097051799966093830370495;
    uint256 constant PUB_148_X = 466078188274593991217391104654879973494142792425474931776666771646443968261;
    uint256 constant PUB_148_Y = 14874144357332869633452175459712372965340936883260619417071917038850753367792;
    uint256 constant PUB_149_X = 15956613926161981133604037266786426329367945985791635824428453792764306442499;
    uint256 constant PUB_149_Y = 5506360011121518085655202074670673919075466672082153494593611794652322509497;
    uint256 constant PUB_150_X = 8971850590791606124125965993154087345407391801133829221805792745874301613714;
    uint256 constant PUB_150_Y = 2995006476191736140346429067276258511535894778406174754223440756428700651657;
    uint256 constant PUB_151_X = 20963348494549555535028556842662332528724075713162512916547295783668697213857;
    uint256 constant PUB_151_Y = 6562655638379073754333808114962855637330198845789576172894976554948878646487;
    uint256 constant PUB_152_X = 10500834106487602197182578611593938487393877158620008086403227609369069291281;
    uint256 constant PUB_152_Y = 11994788018141323391784234364438564527713456325433683926763187432190154560795;
    uint256 constant PUB_153_X = 17628240209519268249772505499928185387448438655877364565118772045259889587104;
    uint256 constant PUB_153_Y = 10380435283250716315681730027321668291570074778259909878663149020350943677089;
    uint256 constant PUB_154_X = 9969439449361418554542887052584536125487981503399917059589976525915092771676;
    uint256 constant PUB_154_Y = 7813779661167125043155023408919657203991193099320620019391315937803043046274;
    uint256 constant PUB_155_X = 12219845144893651950895994499562428501879671431207320395117774478588150293010;
    uint256 constant PUB_155_Y = 17472823887743119825361122143832916233640301995564417760986208020633290442187;
    uint256 constant PUB_156_X = 12238601780470576289587463996793272785239221754317084489703196084064936646597;
    uint256 constant PUB_156_Y = 11985738719544303682086447303995166400644263929830297184350090058497679046209;
    uint256 constant PUB_157_X = 21698117096460793614474143239372057444978366045345804978705668966917654494733;
    uint256 constant PUB_157_Y = 5434100539057344319084412492504821234379731940742416555045268159473492739727;
    uint256 constant PUB_158_X = 14182294611252469953235949414348427723824279614581401761869000260605827395145;
    uint256 constant PUB_158_Y = 21449954439416950765766179030582501411025202689294506534086577416376178699970;
    uint256 constant PUB_159_X = 9785663402091724607049631933343597833348338697318454051719183020147225110451;
    uint256 constant PUB_159_Y = 984220651313966242620650927466681694894697465169841616629167217299575624300;
    uint256 constant PUB_160_X = 11793258917710226091369794563643453582540974902570959816321199758291662213314;
    uint256 constant PUB_160_Y = 9472096042562986401218259176283444549728140650949378946318537322106206933228;
    uint256 constant PUB_161_X = 20624911387807976883056713963644641299038835626111004453835399578677665070925;
    uint256 constant PUB_161_Y = 11327127020760461732649890326892087304180587644493900113169309409287135060253;
    uint256 constant PUB_162_X = 84831577990706794699388255334838492887999772060946847900528215443392312874;
    uint256 constant PUB_162_Y = 11480518059992809666950739319320564999060503876972309928231134772832704319797;
    uint256 constant PUB_163_X = 21356906665703675345521117033820659916427142523730054951829723859848685511322;
    uint256 constant PUB_163_Y = 2819669333225915199565355398471399723283948625269226549676284214268734713669;
    uint256 constant PUB_164_X = 20888464854299825998049410441062874435969506846254768877596367974058206444556;
    uint256 constant PUB_164_Y = 8892678186185636191747016560135049309807240500630281607376536561192633515433;
    uint256 constant PUB_165_X = 9668617954939725071413205882810308488561580102781109291097477685441554847286;
    uint256 constant PUB_165_Y = 18265709425814305357554610111310867406313074764240891130164564461370879634421;
    uint256 constant PUB_166_X = 17707647735689435252754691576689720326668547037386520604901476663204581621011;
    uint256 constant PUB_166_Y = 8206212457947962944735173880983770675434909346468789261717154548156760305087;
    uint256 constant PUB_167_X = 11292170839047217254199838494425697557249438699888423809466974320932875323460;
    uint256 constant PUB_167_Y = 19147304121117040697095955856218313439074681905176308270707250553476453490749;
    uint256 constant PUB_168_X = 12098877028504525646427427724669745854433866323609761831290538260490002781841;
    uint256 constant PUB_168_Y = 9982069705463602115744633927281939478638768910488645956193672814422448381635;
    uint256 constant PUB_169_X = 3848904877456806012128172859038601356910618445576228167111704540401676137677;
    uint256 constant PUB_169_Y = 14394100754836909884236893292013635729093523672241021474391780073773314453221;
    uint256 constant PUB_170_X = 12047646499336552656475832620077140914107364456527658366104101181742029809266;
    uint256 constant PUB_170_Y = 15942336677347084084801439561605944775608682865709160294599483825658386322186;
    uint256 constant PUB_171_X = 436723632881322576394329501423423477448379067496668195746882503625964304717;
    uint256 constant PUB_171_Y = 14552981049643645708031781671748684302031053282340273330134681716061045131761;
    uint256 constant PUB_172_X = 17658749284598856221417442201781343802230167845345933286566618341095769274808;
    uint256 constant PUB_172_Y = 13401530587110816328469888708339821744347491827400427035081968512199773193415;
    uint256 constant PUB_173_X = 3482491618513116519902215899536136409340514923778841898772083825940114481926;
    uint256 constant PUB_173_Y = 8532658860554103839627257197974539152053047391707495255464915590554119910263;
    uint256 constant PUB_174_X = 18494105489631950153880015859953556165591888047466071658411970238786698330469;
    uint256 constant PUB_174_Y = 600783230118236691370833456531666595786990964687712172764691468044077652123;
    uint256 constant PUB_175_X = 7338326611652775816755921781172193830315610533555636758384999047248060665326;
    uint256 constant PUB_175_Y = 14575386307081997493621815233540228777407513295772534260697203338372898371633;
    uint256 constant PUB_176_X = 9782872829401749862692192235451000917885289142205284589603698543595699665554;
    uint256 constant PUB_176_Y = 6107455421622475319496418623097935044142499423890499862245831461034028258868;
    uint256 constant PUB_177_X = 19039184383401124223061324949172816822476129782549259748993475040961466581750;
    uint256 constant PUB_177_Y = 19728986361807743092656170960933315766421765351511483597380117106049528396558;
    uint256 constant PUB_178_X = 20500135594476418962587894387313210166734604933269394311446162025303077696235;
    uint256 constant PUB_178_Y = 2294917286023450128183336304006591590655694265276831189224021603763943147050;
    uint256 constant PUB_179_X = 15538213920979672800917720020571432669127519684615144161153535238443951701936;
    uint256 constant PUB_179_Y = 12070008292118221416425830823670034973681287744729687604755799441418481305746;
    uint256 constant PUB_180_X = 16964800916553884505363375329167069125513999646943777514868092766102619698344;
    uint256 constant PUB_180_Y = 2170952598899367015079233668076397201703727152962016030014576040884120236060;
    uint256 constant PUB_181_X = 4969393104321586930044947239878383329294482593783348398419388379353883761270;
    uint256 constant PUB_181_Y = 14786151736096009603122529383499800032940366497435867127022375846711927136713;
    uint256 constant PUB_182_X = 5077104099841950837283730126928886194898800551825666373973134304550671088323;
    uint256 constant PUB_182_Y = 14183142275508271373049559930332715590295956405036500583775903761254276632963;
    uint256 constant PUB_183_X = 15672702204840078727734576608379013608108845887784269311717579535082938195033;
    uint256 constant PUB_183_Y = 10546071080087831472340829623068106999238627827178601563889136342434365841225;
    uint256 constant PUB_184_X = 400269877201982674002356960461451280510953020107585899191025428389407124469;
    uint256 constant PUB_184_Y = 2212054770145150218675569898492300587102114186236420995871450111408999037532;
    uint256 constant PUB_185_X = 1560044614329505044159799606918395401543868510042305637164133915729713256194;
    uint256 constant PUB_185_Y = 21413164874956262100145897529645414144348004794195062119617373068975907526876;
    uint256 constant PUB_186_X = 13647138163660145127514927057791562072679203040742326364964866633280977406496;
    uint256 constant PUB_186_Y = 16234280538704329800694366770057865089572413043524084285500765252355590593728;
    uint256 constant PUB_187_X = 3412978405166893410785854453289761772926908368492894224331660962027352271851;
    uint256 constant PUB_187_Y = 18864294914940955237535985316369784736514258161142769572510141064586105714477;
    uint256 constant PUB_188_X = 13330759018892392316436479723264842550185693037409695028577251221464696491716;
    uint256 constant PUB_188_Y = 9408172191329992029823841717527560838829282961779888287676139610157894938847;
    uint256 constant PUB_189_X = 6239667783714843616431534731747089721753086549774372828812264063693360735251;
    uint256 constant PUB_189_Y = 5954045304583110956505529273411510654751500972834260777604163967522727198001;
    uint256 constant PUB_190_X = 240586874628931009480128369806902906887969942840365914297448134443624162284;
    uint256 constant PUB_190_Y = 7465240577302932513141597660751184800226104748444270769601940745407070091787;
    uint256 constant PUB_191_X = 21181386593226192627801061461880965982867909998180940007953972777142805776654;
    uint256 constant PUB_191_Y = 8832153996610536044719329312958220430549968076462339553110130989702546723827;
    uint256 constant PUB_192_X = 5607619219410199264105082783703189535433516310579691163658979690782176600359;
    uint256 constant PUB_192_Y = 9617292389274207289000764308502922673715819139406462722929699516737839292530;
    uint256 constant PUB_193_X = 17953384640191021358088961825306095960469617774226294840438995422094590082422;
    uint256 constant PUB_193_Y = 7999865560131998662723120921744662251895634973145075029095005353711231890478;
    uint256 constant PUB_194_X = 15320454978433838998752745986702764631605531122006746488574940630394252561072;
    uint256 constant PUB_194_Y = 10664528668663447633899495699492871385205137975573260936818436880076376666011;
    uint256 constant PUB_195_X = 13133207884034221272555051630738036691816553387379851305646847085835896354959;
    uint256 constant PUB_195_Y = 14961282640672490977814067857292750349674669654541655209213134953764108860092;
    uint256 constant PUB_196_X = 3337543512986042009405323595343292335164589170629373691678859490314111006847;
    uint256 constant PUB_196_Y = 18772659151777739824880160480052543823480649955266529742703174190524052949729;
    uint256 constant PUB_197_X = 19268276470462184090552275313567165167593115907174455603837130215954234149769;
    uint256 constant PUB_197_Y = 7723230712303715243312452010294245805328242185797764011049608854551268519664;
    uint256 constant PUB_198_X = 2288519596953281085876827547453955254101679289038947984892334440410135768001;
    uint256 constant PUB_198_Y = 1013180107266409889973128949962982375016525603663851194489656348419089778566;
    uint256 constant PUB_199_X = 9628576880501332427017404571119893817084577043216817279484911152105543569537;
    uint256 constant PUB_199_Y = 608149622259936710241985178562933610729027486358741566760179579183300693933;
    uint256 constant PUB_200_X = 8291232664089976472128687938382469610945071104854220589061666865066852626193;
    uint256 constant PUB_200_Y = 16455802269966865151974331232071590846601130456579170094011995479836836552947;
    uint256 constant PUB_201_X = 496955913874271920902447709095385301058617471979618257415767954114083968899;
    uint256 constant PUB_201_Y = 14038205717708891433722945268762692288730947239419827320666469589510663612529;
    uint256 constant PUB_202_X = 14086310415793832799521524346503198449409805900767993383172732202050823567155;
    uint256 constant PUB_202_Y = 14491743392545791052399597321553872281565257105142817845664352053649712630173;
    uint256 constant PUB_203_X = 6475419814432202771853850348285738424886964139283542043775952862152754307226;
    uint256 constant PUB_203_Y = 13186019567330771388247254133313128468838902587620231106642780596675471373792;
    uint256 constant PUB_204_X = 11591061683290464504023600751279366936156529056567714067225766516839361948281;
    uint256 constant PUB_204_Y = 1831941900021463448802766561641312598889934312456897272996935971876945076962;
    uint256 constant PUB_205_X = 16170813591423329177791716437065160971646753513220364741238856674025197143532;
    uint256 constant PUB_205_Y = 5429939453209382937921387604569226668108566011322083883577149286476250444396;
    uint256 constant PUB_206_X = 11523476185140477380930026705147010635734236117174627414479575168559863047947;
    uint256 constant PUB_206_Y = 6187280479783481622964040622877395294490918025515479448158580574225982661039;
    uint256 constant PUB_207_X = 3343892766493911385753621325755165822409842331580928790518660432708417619923;
    uint256 constant PUB_207_Y = 6435719235183647364530191528730197660614353876588173426376960335599527633182;
    uint256 constant PUB_208_X = 6440102889032524535271743972214389191919589515738127388518661880786753860693;
    uint256 constant PUB_208_Y = 20140784742207758642309675193364587201453678752728226148012682578968419456035;
    uint256 constant PUB_209_X = 6484316276885898761305001025270769290588283750837743414763794970157007827684;
    uint256 constant PUB_209_Y = 7823423689352774765451513946935076706318764867301902196366269093226205101296;
    uint256 constant PUB_210_X = 20893717803242483261164143468390989005175117154951320295881976359860106011888;
    uint256 constant PUB_210_Y = 19518820058680981589424348010461511159221204039277123167058839232143795104685;
    uint256 constant PUB_211_X = 19996875955782515109240848811580240281002194383376451659696954603044910384441;
    uint256 constant PUB_211_Y = 20048218790533113654034882296364071315466553921183526382143695791789098349882;
    uint256 constant PUB_212_X = 6692866506523773646137753494879879270640072419843833484781988489924797736351;
    uint256 constant PUB_212_Y = 6437676535975638633401898826919741390921744986182098640157192592803455624669;
    uint256 constant PUB_213_X = 9986096910232761681262868858782906983577087246954572842569370162048025443439;
    uint256 constant PUB_213_Y = 2983946049855766838892393021850335448300148218047842143766759791178124744597;
    uint256 constant PUB_214_X = 8389762187263095029096948197887260796264925121839951902257641987315889791769;
    uint256 constant PUB_214_Y = 11404168941741358940784451024538774140693672058305425501921175042626970569551;
    uint256 constant PUB_215_X = 11846118663747835146671684016883444529673184932155419143425203809584794413200;
    uint256 constant PUB_215_Y = 17809108896812786122372566493192147631843868316498184792165070945033664272069;
    uint256 constant PUB_216_X = 17788481855217642293578445487882094641703583242385532089147327565077487664243;
    uint256 constant PUB_216_Y = 14337994348233216161941150262183173774957986428079719541728451096588585289956;
    uint256 constant PUB_217_X = 607381459472481115455138562560890177523990423615228781574059257584475167061;
    uint256 constant PUB_217_Y = 20750656282703768550779901119040710954465007851047250225377839168728757350502;
    uint256 constant PUB_218_X = 6536233757674152102649856483359506457614944747862291122544823704076059025150;
    uint256 constant PUB_218_Y = 20914593636281410430823031607386966837567273395349286397728887972938886030505;
    uint256 constant PUB_219_X = 15532347410244263634260854685437470654488226412947404502417635004159837229746;
    uint256 constant PUB_219_Y = 2954212746645231746360275561219616115556668983987774898369312143155439687560;
    uint256 constant PUB_220_X = 14265712269786658097217185234194090224227338352598882399697350009240739953978;
    uint256 constant PUB_220_Y = 20638163272899450464191619474906489451497215421878630190765367477867639592186;
    uint256 constant PUB_221_X = 58436250562094300134693797711156763831680202709853136882076502882948551236;
    uint256 constant PUB_221_Y = 9198101996174076768585200034748439646665148860045094482584932615569063327973;
    uint256 constant PUB_222_X = 6882539376278011560911186177388961739841563811782419078943274571430936747004;
    uint256 constant PUB_222_Y = 3239416944701632250185244077866366234070842918982517460410369231296034590978;
    uint256 constant PUB_223_X = 19584675125159279778080116488289290119070533452528599955005041411139996654835;
    uint256 constant PUB_223_Y = 4362646471994380863889161429008433194098802275834346882735437463150074882176;
    uint256 constant PUB_224_X = 17464830266528347970631757713559633263524972708564000980028131046750457779881;
    uint256 constant PUB_224_Y = 205999839651423272773809605804248465814087391844573171102534444392759463432;
    uint256 constant PUB_225_X = 15664756604432991266423621107889660179521287987637021728522072464865243694635;
    uint256 constant PUB_225_Y = 18116494715086942059331510846389338426346091332666242809721677856205122381131;
    uint256 constant PUB_226_X = 1966555695199001831078891541848867040847590501411010122928154005973343090654;
    uint256 constant PUB_226_Y = 10620897451441259806657959591338755491943064340201591778790922434139102635949;
    uint256 constant PUB_227_X = 18817684245193488955037498819647440453782396067199241170778732325957102677504;
    uint256 constant PUB_227_Y = 21819095509616265625246265424858333344461343180686686433880381897192094221899;
    uint256 constant PUB_228_X = 3697449795079482763679771642055730440393533443558899458466220026437348339582;
    uint256 constant PUB_228_Y = 20618358833000077278068530148497296604537389884867544732596712796145060709985;
    uint256 constant PUB_229_X = 10914579231210812755547173007447974742915980986814653928827429066076528179122;
    uint256 constant PUB_229_Y = 20859930263381974987073042012693487952368247040735522230322465602476632930294;
    uint256 constant PUB_230_X = 19541216177427910258025747927257218441203268892859769612898664226996451014898;
    uint256 constant PUB_230_Y = 12458400695438472626090697468770437753791562158816905616689679556093134743248;
    uint256 constant PUB_231_X = 5829921260862274269592607860598603595689779272840411276443235657845704950056;
    uint256 constant PUB_231_Y = 15554358067508520015657064776689215011716559606018756416297178038947873143913;
    uint256 constant PUB_232_X = 9524243901593184143506849255631387357075771187729178714893387346397940376082;
    uint256 constant PUB_232_Y = 9527419987661611774547782380379593442881589384049038563282656240061052460946;
    uint256 constant PUB_233_X = 2381116850169870351151181514482047454363775525803790515404773197766935384602;
    uint256 constant PUB_233_Y = 14172298546786795935002364295962816627513865768170151720536780447072280826403;
    uint256 constant PUB_234_X = 8035484715569089078744933538412961817937149062091296201424742397090814741982;
    uint256 constant PUB_234_Y = 20201938131653425389432763876826176864855511551553026057968115321534580522116;
    uint256 constant PUB_235_X = 9653610495731979231022352844762476927380798528473568300282378156067693272957;
    uint256 constant PUB_235_Y = 20292292791215549085608874279284842557147792880420067346325312838422341603258;
    uint256 constant PUB_236_X = 13219782969984049296725835404622696111429547347133620705350116021981851228257;
    uint256 constant PUB_236_Y = 7778037283444701978309679371802899107163651647546217112402530516001074005043;
    uint256 constant PUB_237_X = 11524184969138593229982416097272704509423279128019553834797604433430781012720;
    uint256 constant PUB_237_Y = 7423143298861821598618720375401799079242415904794549020421784708819181475220;
    uint256 constant PUB_238_X = 20216796474201174094306719942996417956546431780825906410954242286054658730871;
    uint256 constant PUB_238_Y = 3561445320032348693644956610456130225137664231326116784434301557659553933874;
    uint256 constant PUB_239_X = 20656250972013718014108946004109950360241449540384262800540244843565245712203;
    uint256 constant PUB_239_Y = 19812652927180037228907495631445130194045092522323754585040962045203645273921;
    uint256 constant PUB_240_X = 19416780470824913830305772269295384837010676714942403081574251142917183640676;
    uint256 constant PUB_240_Y = 20722563781488227738402501196137992885674539444372599179119930522263725943874;
    uint256 constant PUB_241_X = 10084401712390196064000063277244390687764853442404582433769803061798645517509;
    uint256 constant PUB_241_Y = 18485201354092363732703164450470526541609624996818137126980318699117670627725;
    uint256 constant PUB_242_X = 15489645952858866970686161729628038078709412849609204260553551160077438343915;
    uint256 constant PUB_242_Y = 13139101755419106949303642077876530854390684181669690010133936837612984935019;
    uint256 constant PUB_243_X = 15580039125820083360755204219684532362704082298117512398566325341114127088340;
    uint256 constant PUB_243_Y = 19806817507569316732381274909365591189788853213515508447686261383875920242827;
    uint256 constant PUB_244_X = 19982076397493984760721926540327453410476750212594088832679323801194616378501;
    uint256 constant PUB_244_Y = 796581802560224932097658579350495152798556928844802815447490976031376324442;
    uint256 constant PUB_245_X = 16792617674316770558017286103682443401522790173366732459245225233638919026761;
    uint256 constant PUB_245_Y = 11382431029822806674215043418083873356139072560918257889106030845578228644592;
    uint256 constant PUB_246_X = 9515060922146265851305297765306561441211678804102637602270848569729267836097;
    uint256 constant PUB_246_Y = 20916058349483083679137071748048824347741113889810946434599592390697812619462;
    uint256 constant PUB_247_X = 3261758390372431787711335978041266464379051987907645917347781003178565479698;
    uint256 constant PUB_247_Y = 2967628481302197837069421773642233496444802221977483572750651779551004514127;
    uint256 constant PUB_248_X = 20667540846340105385649342433793873142694223458109420604114330681565424772383;
    uint256 constant PUB_248_Y = 17212381275978462698365347234409752836163246427019834594710865882315893253746;
    uint256 constant PUB_249_X = 12397376022104649532178451791304930299988793578114794471352208126342124338066;
    uint256 constant PUB_249_Y = 2108282498431162781371071392818512255116448807116238317572021610662084565523;

    /// Negation in Fp.
    /// @notice Returns a number x such that a + x = 0 in Fp.
    /// @notice The input does not need to be reduced.
    /// @param a the base
    /// @return x the result
    function negate(uint256 a) internal pure returns (uint256 x) {
        unchecked {
            x = (P - (a % P)) % P; // Modulo is cheaper than branching
        }
    }

    /// Exponentiation in Fp.
    /// @notice Returns a number x such that a ^ e = x in Fp.
    /// @notice The input does not need to be reduced.
    /// @param a the base
    /// @param e the exponent
    /// @return x the result
    function exp(uint256 a, uint256 e) internal view returns (uint256 x) {
        bool success;
        assembly ("memory-safe") {
            let f := mload(0x40)
            mstore(f, 0x20)
            mstore(add(f, 0x20), 0x20)
            mstore(add(f, 0x40), 0x20)
            mstore(add(f, 0x60), a)
            mstore(add(f, 0x80), e)
            mstore(add(f, 0xa0), P)
            success := staticcall(gas(), PRECOMPILE_MODEXP, f, 0xc0, f, 0x20)
            x := mload(f)
        }
        if (!success) {
            // Exponentiation failed.
            // Should not happen.
            revert ProofInvalid();
        }
    }

    /// Invertsion in Fp.
    /// @notice Returns a number x such that a * x = 1 in Fp.
    /// @notice The input does not need to be reduced.
    /// @notice Reverts with ProofInvalid() if the inverse does not exist
    /// @param a the input
    /// @return x the solution
    function invert_Fp(uint256 a) internal view returns (uint256 x) {
        x = exp(a, EXP_INVERSE_FP);
        if (mulmod(a, x, P) != 1) {
            // Inverse does not exist.
            // Can only happen during G2 point decompression.
            revert ProofInvalid();
        }
    }

    /// Square root in Fp.
    /// @notice Returns a number x such that x * x = a in Fp.
    /// @notice Will revert with InvalidProof() if the input is not a square
    /// or not reduced.
    /// @param a the square
    /// @return x the solution
    function sqrt_Fp(uint256 a) internal view returns (uint256 x) {
        x = exp(a, EXP_SQRT_FP);
        if (mulmod(x, x, P) != a) {
            // Square root does not exist or a is not reduced.
            // Happens when G1 point is not on curve.
            revert ProofInvalid();
        }
    }

    /// Square test in Fp.
    /// @notice Returns whether a number x exists such that x * x = a in Fp.
    /// @notice Will revert with InvalidProof() if the input is not a square
    /// or not reduced.
    /// @param a the square
    /// @return x the solution
    function isSquare_Fp(uint256 a) internal view returns (bool) {
        uint256 x = exp(a, EXP_SQRT_FP);
        return mulmod(x, x, P) == a;
    }

    /// Square root in Fp2.
    /// @notice Fp2 is the complex extension Fp[i]/(i^2 + 1). The input is
    /// a0 + a1 ⋅ i and the result is x0 + x1 ⋅ i.
    /// @notice Will revert with InvalidProof() if
    ///   * the input is not a square,
    ///   * the hint is incorrect, or
    ///   * the input coefficients are not reduced.
    /// @param a0 The real part of the input.
    /// @param a1 The imaginary part of the input.
    /// @param hint A hint which of two possible signs to pick in the equation.
    /// @return x0 The real part of the square root.
    /// @return x1 The imaginary part of the square root.
    function sqrt_Fp2(uint256 a0, uint256 a1, bool hint) internal view returns (uint256 x0, uint256 x1) {
        // If this square root reverts there is no solution in Fp2.
        uint256 d = sqrt_Fp(addmod(mulmod(a0, a0, P), mulmod(a1, a1, P), P));
        if (hint) {
            d = negate(d);
        }
        // If this square root reverts there is no solution in Fp2.
        x0 = sqrt_Fp(mulmod(addmod(a0, d, P), FRACTION_1_2_FP, P));
        x1 = mulmod(a1, invert_Fp(mulmod(x0, 2, P)), P);

        // Check result to make sure we found a root.
        // Note: this also fails if a0 or a1 is not reduced.
        if (a0 != addmod(mulmod(x0, x0, P), negate(mulmod(x1, x1, P)), P)
        ||  a1 != mulmod(2, mulmod(x0, x1, P), P)) {
            revert ProofInvalid();
        }
    }

    /// Compress a G1 point.
    /// @notice Reverts with InvalidProof if the coordinates are not reduced
    /// or if the point is not on the curve.
    /// @notice The point at infinity is encoded as (0,0) and compressed to 0.
    /// @param x The X coordinate in Fp.
    /// @param y The Y coordinate in Fp.
    /// @return c The compresed point (x with one signal bit).
    function compress_g1(uint256 x, uint256 y) internal view returns (uint256 c) {
        if (x >= P || y >= P) {
            // G1 point not in field.
            revert ProofInvalid();
        }
        if (x == 0 && y == 0) {
            // Point at infinity
            return 0;
        }

        // Note: sqrt_Fp reverts if there is no solution, i.e. the x coordinate is invalid.
        uint256 y_pos = sqrt_Fp(addmod(mulmod(mulmod(x, x, P), x, P), 3, P));
        if (y == y_pos) {
            return (x << 1) | 0;
        } else if (y == negate(y_pos)) {
            return (x << 1) | 1;
        } else {
            // G1 point not on curve.
            revert ProofInvalid();
        }
    }

    /// Decompress a G1 point.
    /// @notice Reverts with InvalidProof if the input does not represent a valid point.
    /// @notice The point at infinity is encoded as (0,0) and compressed to 0.
    /// @param c The compresed point (x with one signal bit).
    /// @return x The X coordinate in Fp.
    /// @return y The Y coordinate in Fp.
    function decompress_g1(uint256 c) internal view returns (uint256 x, uint256 y) {
        // Note that X = 0 is not on the curve since 0³ + 3 = 3 is not a square.
        // so we can use it to represent the point at infinity.
        if (c == 0) {
            // Point at infinity as encoded in EIP196 and EIP197.
            return (0, 0);
        }
        bool negate_point = c & 1 == 1;
        x = c >> 1;
        if (x >= P) {
            // G1 x coordinate not in field.
            revert ProofInvalid();
        }

        // Note: (x³ + 3) is irreducible in Fp, so it can not be zero and therefore
        //       y can not be zero.
        // Note: sqrt_Fp reverts if there is no solution, i.e. the point is not on the curve.
        y = sqrt_Fp(addmod(mulmod(mulmod(x, x, P), x, P), 3, P));
        if (negate_point) {
            y = negate(y);
        }
    }

    /// Compress a G2 point.
    /// @notice Reverts with InvalidProof if the coefficients are not reduced
    /// or if the point is not on the curve.
    /// @notice The G2 curve is defined over the complex extension Fp[i]/(i^2 + 1)
    /// with coordinates (x0 + x1 ⋅ i, y0 + y1 ⋅ i).
    /// @notice The point at infinity is encoded as (0,0,0,0) and compressed to (0,0).
    /// @param x0 The real part of the X coordinate.
    /// @param x1 The imaginary poart of the X coordinate.
    /// @param y0 The real part of the Y coordinate.
    /// @param y1 The imaginary part of the Y coordinate.
    /// @return c0 The first half of the compresed point (x0 with two signal bits).
    /// @return c1 The second half of the compressed point (x1 unmodified).
    function compress_g2(uint256 x0, uint256 x1, uint256 y0, uint256 y1)
    internal view returns (uint256 c0, uint256 c1) {
        if (x0 >= P || x1 >= P || y0 >= P || y1 >= P) {
            // G2 point not in field.
            revert ProofInvalid();
        }
        if ((x0 | x1 | y0 | y1) == 0) {
            // Point at infinity
            return (0, 0);
        }

        // Compute y^2
        // Note: shadowing variables and scoping to avoid stack-to-deep.
        uint256 y0_pos;
        uint256 y1_pos;
        {
            uint256 n3ab = mulmod(mulmod(x0, x1, P), P-3, P);
            uint256 a_3 = mulmod(mulmod(x0, x0, P), x0, P);
            uint256 b_3 = mulmod(mulmod(x1, x1, P), x1, P);
            y0_pos = addmod(FRACTION_27_82_FP, addmod(a_3, mulmod(n3ab, x1, P), P), P);
            y1_pos = negate(addmod(FRACTION_3_82_FP,  addmod(b_3, mulmod(n3ab, x0, P), P), P));
        }

        // Determine hint bit
        // If this sqrt fails the x coordinate is not on the curve.
        bool hint;
        {
            uint256 d = sqrt_Fp(addmod(mulmod(y0_pos, y0_pos, P), mulmod(y1_pos, y1_pos, P), P));
            hint = !isSquare_Fp(mulmod(addmod(y0_pos, d, P), FRACTION_1_2_FP, P));
        }

        // Recover y
        (y0_pos, y1_pos) = sqrt_Fp2(y0_pos, y1_pos, hint);
        if (y0 == y0_pos && y1 == y1_pos) {
            c0 = (x0 << 2) | (hint ? 2  : 0) | 0;
            c1 = x1;
        } else if (y0 == negate(y0_pos) && y1 == negate(y1_pos)) {
            c0 = (x0 << 2) | (hint ? 2  : 0) | 1;
            c1 = x1;
        } else {
            // G1 point not on curve.
            revert ProofInvalid();
        }
    }

    /// Decompress a G2 point.
    /// @notice Reverts with InvalidProof if the input does not represent a valid point.
    /// @notice The G2 curve is defined over the complex extension Fp[i]/(i^2 + 1)
    /// with coordinates (x0 + x1 ⋅ i, y0 + y1 ⋅ i).
    /// @notice The point at infinity is encoded as (0,0,0,0) and compressed to (0,0).
    /// @param c0 The first half of the compresed point (x0 with two signal bits).
    /// @param c1 The second half of the compressed point (x1 unmodified).
    /// @return x0 The real part of the X coordinate.
    /// @return x1 The imaginary poart of the X coordinate.
    /// @return y0 The real part of the Y coordinate.
    /// @return y1 The imaginary part of the Y coordinate.
    function decompress_g2(uint256 c0, uint256 c1)
    internal view returns (uint256 x0, uint256 x1, uint256 y0, uint256 y1) {
        // Note that X = (0, 0) is not on the curve since 0³ + 3/(9 + i) is not a square.
        // so we can use it to represent the point at infinity.
        if (c0 == 0 && c1 == 0) {
            // Point at infinity as encoded in EIP197.
            return (0, 0, 0, 0);
        }
        bool negate_point = c0 & 1 == 1;
        bool hint = c0 & 2 == 2;
        x0 = c0 >> 2;
        x1 = c1;
        if (x0 >= P || x1 >= P) {
            // G2 x0 or x1 coefficient not in field.
            revert ProofInvalid();
        }

        uint256 n3ab = mulmod(mulmod(x0, x1, P), P-3, P);
        uint256 a_3 = mulmod(mulmod(x0, x0, P), x0, P);
        uint256 b_3 = mulmod(mulmod(x1, x1, P), x1, P);

        y0 = addmod(FRACTION_27_82_FP, addmod(a_3, mulmod(n3ab, x1, P), P), P);
        y1 = negate(addmod(FRACTION_3_82_FP,  addmod(b_3, mulmod(n3ab, x0, P), P), P));

        // Note: sqrt_Fp2 reverts if there is no solution, i.e. the point is not on the curve.
        // Note: (X³ + 3/(9 + i)) is irreducible in Fp2, so y can not be zero.
        //       But y0 or y1 may still independently be zero.
        (y0, y1) = sqrt_Fp2(y0, y1, hint);
        if (negate_point) {
            y0 = negate(y0);
            y1 = negate(y1);
        }
    }

    /// Compute the public input linear combination.
    /// @notice Reverts with PublicInputNotInField if the input is not in the field.
    /// @notice Computes the multi-scalar-multiplication of the public input
    /// elements and the verification key including the constant term.
    /// @param input The public inputs. These are elements of the scalar field Fr.
    /// @param publicCommitments public inputs generated from pedersen commitments.
    /// @param commitments The Pedersen commitments from the proof.
    /// @return x The X coordinate of the resulting G1 point.
    /// @return y The Y coordinate of the resulting G1 point.
    function publicInputMSM(
        uint256[249] calldata input,
        uint256[1] memory publicCommitments,
        uint256[2] memory commitments
    )
    internal view returns (uint256 x, uint256 y) {
        // Note: The ECMUL precompile does not reject unreduced values, so we check this.
        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the
        //       code-size is in the PUB_ constants.
        // ECMUL has input (x, y, scalar) and output (x', y').
        // ECADD has input (x1, y1, x2, y2) and output (x', y').
        // We reduce commitments(if any) with constants as the first point argument to ECADD.
        // We call them such that ecmul output is already in the second point
        // argument to ECADD so we can have a tight loop.
        bool success = true;
        assembly ("memory-safe") {
            let f := mload(0x40)
            let g := add(f, 0x40)
            let s
            mstore(f, CONSTANT_X)
            mstore(add(f, 0x20), CONSTANT_Y)
            mstore(g, mload(commitments))
            mstore(add(g, 0x20), mload(add(commitments, 0x20)))
            success := and(success,  staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_0_X)
            mstore(add(g, 0x20), PUB_0_Y)
            s :=  calldataload(input)
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_1_X)
            mstore(add(g, 0x20), PUB_1_Y)
            s :=  calldataload(add(input, 32))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_2_X)
            mstore(add(g, 0x20), PUB_2_Y)
            s :=  calldataload(add(input, 64))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_3_X)
            mstore(add(g, 0x20), PUB_3_Y)
            s :=  calldataload(add(input, 96))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_4_X)
            mstore(add(g, 0x20), PUB_4_Y)
            s :=  calldataload(add(input, 128))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_5_X)
            mstore(add(g, 0x20), PUB_5_Y)
            s :=  calldataload(add(input, 160))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_6_X)
            mstore(add(g, 0x20), PUB_6_Y)
            s :=  calldataload(add(input, 192))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_7_X)
            mstore(add(g, 0x20), PUB_7_Y)
            s :=  calldataload(add(input, 224))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_8_X)
            mstore(add(g, 0x20), PUB_8_Y)
            s :=  calldataload(add(input, 256))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_9_X)
            mstore(add(g, 0x20), PUB_9_Y)
            s :=  calldataload(add(input, 288))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_10_X)
            mstore(add(g, 0x20), PUB_10_Y)
            s :=  calldataload(add(input, 320))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_11_X)
            mstore(add(g, 0x20), PUB_11_Y)
            s :=  calldataload(add(input, 352))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_12_X)
            mstore(add(g, 0x20), PUB_12_Y)
            s :=  calldataload(add(input, 384))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_13_X)
            mstore(add(g, 0x20), PUB_13_Y)
            s :=  calldataload(add(input, 416))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_14_X)
            mstore(add(g, 0x20), PUB_14_Y)
            s :=  calldataload(add(input, 448))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_15_X)
            mstore(add(g, 0x20), PUB_15_Y)
            s :=  calldataload(add(input, 480))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_16_X)
            mstore(add(g, 0x20), PUB_16_Y)
            s :=  calldataload(add(input, 512))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_17_X)
            mstore(add(g, 0x20), PUB_17_Y)
            s :=  calldataload(add(input, 544))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_18_X)
            mstore(add(g, 0x20), PUB_18_Y)
            s :=  calldataload(add(input, 576))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_19_X)
            mstore(add(g, 0x20), PUB_19_Y)
            s :=  calldataload(add(input, 608))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_20_X)
            mstore(add(g, 0x20), PUB_20_Y)
            s :=  calldataload(add(input, 640))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_21_X)
            mstore(add(g, 0x20), PUB_21_Y)
            s :=  calldataload(add(input, 672))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_22_X)
            mstore(add(g, 0x20), PUB_22_Y)
            s :=  calldataload(add(input, 704))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_23_X)
            mstore(add(g, 0x20), PUB_23_Y)
            s :=  calldataload(add(input, 736))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_24_X)
            mstore(add(g, 0x20), PUB_24_Y)
            s :=  calldataload(add(input, 768))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_25_X)
            mstore(add(g, 0x20), PUB_25_Y)
            s :=  calldataload(add(input, 800))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_26_X)
            mstore(add(g, 0x20), PUB_26_Y)
            s :=  calldataload(add(input, 832))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_27_X)
            mstore(add(g, 0x20), PUB_27_Y)
            s :=  calldataload(add(input, 864))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_28_X)
            mstore(add(g, 0x20), PUB_28_Y)
            s :=  calldataload(add(input, 896))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_29_X)
            mstore(add(g, 0x20), PUB_29_Y)
            s :=  calldataload(add(input, 928))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_30_X)
            mstore(add(g, 0x20), PUB_30_Y)
            s :=  calldataload(add(input, 960))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_31_X)
            mstore(add(g, 0x20), PUB_31_Y)
            s :=  calldataload(add(input, 992))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_32_X)
            mstore(add(g, 0x20), PUB_32_Y)
            s :=  calldataload(add(input, 1024))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_33_X)
            mstore(add(g, 0x20), PUB_33_Y)
            s :=  calldataload(add(input, 1056))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_34_X)
            mstore(add(g, 0x20), PUB_34_Y)
            s :=  calldataload(add(input, 1088))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_35_X)
            mstore(add(g, 0x20), PUB_35_Y)
            s :=  calldataload(add(input, 1120))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_36_X)
            mstore(add(g, 0x20), PUB_36_Y)
            s :=  calldataload(add(input, 1152))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_37_X)
            mstore(add(g, 0x20), PUB_37_Y)
            s :=  calldataload(add(input, 1184))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_38_X)
            mstore(add(g, 0x20), PUB_38_Y)
            s :=  calldataload(add(input, 1216))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_39_X)
            mstore(add(g, 0x20), PUB_39_Y)
            s :=  calldataload(add(input, 1248))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_40_X)
            mstore(add(g, 0x20), PUB_40_Y)
            s :=  calldataload(add(input, 1280))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_41_X)
            mstore(add(g, 0x20), PUB_41_Y)
            s :=  calldataload(add(input, 1312))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_42_X)
            mstore(add(g, 0x20), PUB_42_Y)
            s :=  calldataload(add(input, 1344))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_43_X)
            mstore(add(g, 0x20), PUB_43_Y)
            s :=  calldataload(add(input, 1376))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_44_X)
            mstore(add(g, 0x20), PUB_44_Y)
            s :=  calldataload(add(input, 1408))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_45_X)
            mstore(add(g, 0x20), PUB_45_Y)
            s :=  calldataload(add(input, 1440))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_46_X)
            mstore(add(g, 0x20), PUB_46_Y)
            s :=  calldataload(add(input, 1472))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_47_X)
            mstore(add(g, 0x20), PUB_47_Y)
            s :=  calldataload(add(input, 1504))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_48_X)
            mstore(add(g, 0x20), PUB_48_Y)
            s :=  calldataload(add(input, 1536))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_49_X)
            mstore(add(g, 0x20), PUB_49_Y)
            s :=  calldataload(add(input, 1568))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_50_X)
            mstore(add(g, 0x20), PUB_50_Y)
            s :=  calldataload(add(input, 1600))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_51_X)
            mstore(add(g, 0x20), PUB_51_Y)
            s :=  calldataload(add(input, 1632))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_52_X)
            mstore(add(g, 0x20), PUB_52_Y)
            s :=  calldataload(add(input, 1664))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_53_X)
            mstore(add(g, 0x20), PUB_53_Y)
            s :=  calldataload(add(input, 1696))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_54_X)
            mstore(add(g, 0x20), PUB_54_Y)
            s :=  calldataload(add(input, 1728))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_55_X)
            mstore(add(g, 0x20), PUB_55_Y)
            s :=  calldataload(add(input, 1760))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_56_X)
            mstore(add(g, 0x20), PUB_56_Y)
            s :=  calldataload(add(input, 1792))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_57_X)
            mstore(add(g, 0x20), PUB_57_Y)
            s :=  calldataload(add(input, 1824))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_58_X)
            mstore(add(g, 0x20), PUB_58_Y)
            s :=  calldataload(add(input, 1856))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_59_X)
            mstore(add(g, 0x20), PUB_59_Y)
            s :=  calldataload(add(input, 1888))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_60_X)
            mstore(add(g, 0x20), PUB_60_Y)
            s :=  calldataload(add(input, 1920))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_61_X)
            mstore(add(g, 0x20), PUB_61_Y)
            s :=  calldataload(add(input, 1952))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_62_X)
            mstore(add(g, 0x20), PUB_62_Y)
            s :=  calldataload(add(input, 1984))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_63_X)
            mstore(add(g, 0x20), PUB_63_Y)
            s :=  calldataload(add(input, 2016))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_64_X)
            mstore(add(g, 0x20), PUB_64_Y)
            s :=  calldataload(add(input, 2048))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_65_X)
            mstore(add(g, 0x20), PUB_65_Y)
            s :=  calldataload(add(input, 2080))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_66_X)
            mstore(add(g, 0x20), PUB_66_Y)
            s :=  calldataload(add(input, 2112))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_67_X)
            mstore(add(g, 0x20), PUB_67_Y)
            s :=  calldataload(add(input, 2144))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_68_X)
            mstore(add(g, 0x20), PUB_68_Y)
            s :=  calldataload(add(input, 2176))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_69_X)
            mstore(add(g, 0x20), PUB_69_Y)
            s :=  calldataload(add(input, 2208))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_70_X)
            mstore(add(g, 0x20), PUB_70_Y)
            s :=  calldataload(add(input, 2240))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_71_X)
            mstore(add(g, 0x20), PUB_71_Y)
            s :=  calldataload(add(input, 2272))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_72_X)
            mstore(add(g, 0x20), PUB_72_Y)
            s :=  calldataload(add(input, 2304))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_73_X)
            mstore(add(g, 0x20), PUB_73_Y)
            s :=  calldataload(add(input, 2336))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_74_X)
            mstore(add(g, 0x20), PUB_74_Y)
            s :=  calldataload(add(input, 2368))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_75_X)
            mstore(add(g, 0x20), PUB_75_Y)
            s :=  calldataload(add(input, 2400))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_76_X)
            mstore(add(g, 0x20), PUB_76_Y)
            s :=  calldataload(add(input, 2432))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_77_X)
            mstore(add(g, 0x20), PUB_77_Y)
            s :=  calldataload(add(input, 2464))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_78_X)
            mstore(add(g, 0x20), PUB_78_Y)
            s :=  calldataload(add(input, 2496))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_79_X)
            mstore(add(g, 0x20), PUB_79_Y)
            s :=  calldataload(add(input, 2528))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_80_X)
            mstore(add(g, 0x20), PUB_80_Y)
            s :=  calldataload(add(input, 2560))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_81_X)
            mstore(add(g, 0x20), PUB_81_Y)
            s :=  calldataload(add(input, 2592))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_82_X)
            mstore(add(g, 0x20), PUB_82_Y)
            s :=  calldataload(add(input, 2624))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_83_X)
            mstore(add(g, 0x20), PUB_83_Y)
            s :=  calldataload(add(input, 2656))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_84_X)
            mstore(add(g, 0x20), PUB_84_Y)
            s :=  calldataload(add(input, 2688))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_85_X)
            mstore(add(g, 0x20), PUB_85_Y)
            s :=  calldataload(add(input, 2720))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_86_X)
            mstore(add(g, 0x20), PUB_86_Y)
            s :=  calldataload(add(input, 2752))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_87_X)
            mstore(add(g, 0x20), PUB_87_Y)
            s :=  calldataload(add(input, 2784))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_88_X)
            mstore(add(g, 0x20), PUB_88_Y)
            s :=  calldataload(add(input, 2816))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_89_X)
            mstore(add(g, 0x20), PUB_89_Y)
            s :=  calldataload(add(input, 2848))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_90_X)
            mstore(add(g, 0x20), PUB_90_Y)
            s :=  calldataload(add(input, 2880))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_91_X)
            mstore(add(g, 0x20), PUB_91_Y)
            s :=  calldataload(add(input, 2912))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_92_X)
            mstore(add(g, 0x20), PUB_92_Y)
            s :=  calldataload(add(input, 2944))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_93_X)
            mstore(add(g, 0x20), PUB_93_Y)
            s :=  calldataload(add(input, 2976))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_94_X)
            mstore(add(g, 0x20), PUB_94_Y)
            s :=  calldataload(add(input, 3008))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_95_X)
            mstore(add(g, 0x20), PUB_95_Y)
            s :=  calldataload(add(input, 3040))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_96_X)
            mstore(add(g, 0x20), PUB_96_Y)
            s :=  calldataload(add(input, 3072))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_97_X)
            mstore(add(g, 0x20), PUB_97_Y)
            s :=  calldataload(add(input, 3104))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_98_X)
            mstore(add(g, 0x20), PUB_98_Y)
            s :=  calldataload(add(input, 3136))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_99_X)
            mstore(add(g, 0x20), PUB_99_Y)
            s :=  calldataload(add(input, 3168))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_100_X)
            mstore(add(g, 0x20), PUB_100_Y)
            s :=  calldataload(add(input, 3200))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_101_X)
            mstore(add(g, 0x20), PUB_101_Y)
            s :=  calldataload(add(input, 3232))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_102_X)
            mstore(add(g, 0x20), PUB_102_Y)
            s :=  calldataload(add(input, 3264))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_103_X)
            mstore(add(g, 0x20), PUB_103_Y)
            s :=  calldataload(add(input, 3296))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_104_X)
            mstore(add(g, 0x20), PUB_104_Y)
            s :=  calldataload(add(input, 3328))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_105_X)
            mstore(add(g, 0x20), PUB_105_Y)
            s :=  calldataload(add(input, 3360))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_106_X)
            mstore(add(g, 0x20), PUB_106_Y)
            s :=  calldataload(add(input, 3392))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_107_X)
            mstore(add(g, 0x20), PUB_107_Y)
            s :=  calldataload(add(input, 3424))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_108_X)
            mstore(add(g, 0x20), PUB_108_Y)
            s :=  calldataload(add(input, 3456))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_109_X)
            mstore(add(g, 0x20), PUB_109_Y)
            s :=  calldataload(add(input, 3488))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_110_X)
            mstore(add(g, 0x20), PUB_110_Y)
            s :=  calldataload(add(input, 3520))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_111_X)
            mstore(add(g, 0x20), PUB_111_Y)
            s :=  calldataload(add(input, 3552))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_112_X)
            mstore(add(g, 0x20), PUB_112_Y)
            s :=  calldataload(add(input, 3584))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_113_X)
            mstore(add(g, 0x20), PUB_113_Y)
            s :=  calldataload(add(input, 3616))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_114_X)
            mstore(add(g, 0x20), PUB_114_Y)
            s :=  calldataload(add(input, 3648))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_115_X)
            mstore(add(g, 0x20), PUB_115_Y)
            s :=  calldataload(add(input, 3680))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_116_X)
            mstore(add(g, 0x20), PUB_116_Y)
            s :=  calldataload(add(input, 3712))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_117_X)
            mstore(add(g, 0x20), PUB_117_Y)
            s :=  calldataload(add(input, 3744))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_118_X)
            mstore(add(g, 0x20), PUB_118_Y)
            s :=  calldataload(add(input, 3776))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_119_X)
            mstore(add(g, 0x20), PUB_119_Y)
            s :=  calldataload(add(input, 3808))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_120_X)
            mstore(add(g, 0x20), PUB_120_Y)
            s :=  calldataload(add(input, 3840))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_121_X)
            mstore(add(g, 0x20), PUB_121_Y)
            s :=  calldataload(add(input, 3872))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_122_X)
            mstore(add(g, 0x20), PUB_122_Y)
            s :=  calldataload(add(input, 3904))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_123_X)
            mstore(add(g, 0x20), PUB_123_Y)
            s :=  calldataload(add(input, 3936))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_124_X)
            mstore(add(g, 0x20), PUB_124_Y)
            s :=  calldataload(add(input, 3968))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_125_X)
            mstore(add(g, 0x20), PUB_125_Y)
            s :=  calldataload(add(input, 4000))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_126_X)
            mstore(add(g, 0x20), PUB_126_Y)
            s :=  calldataload(add(input, 4032))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_127_X)
            mstore(add(g, 0x20), PUB_127_Y)
            s :=  calldataload(add(input, 4064))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_128_X)
            mstore(add(g, 0x20), PUB_128_Y)
            s :=  calldataload(add(input, 4096))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_129_X)
            mstore(add(g, 0x20), PUB_129_Y)
            s :=  calldataload(add(input, 4128))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_130_X)
            mstore(add(g, 0x20), PUB_130_Y)
            s :=  calldataload(add(input, 4160))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_131_X)
            mstore(add(g, 0x20), PUB_131_Y)
            s :=  calldataload(add(input, 4192))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_132_X)
            mstore(add(g, 0x20), PUB_132_Y)
            s :=  calldataload(add(input, 4224))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_133_X)
            mstore(add(g, 0x20), PUB_133_Y)
            s :=  calldataload(add(input, 4256))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_134_X)
            mstore(add(g, 0x20), PUB_134_Y)
            s :=  calldataload(add(input, 4288))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_135_X)
            mstore(add(g, 0x20), PUB_135_Y)
            s :=  calldataload(add(input, 4320))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_136_X)
            mstore(add(g, 0x20), PUB_136_Y)
            s :=  calldataload(add(input, 4352))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_137_X)
            mstore(add(g, 0x20), PUB_137_Y)
            s :=  calldataload(add(input, 4384))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_138_X)
            mstore(add(g, 0x20), PUB_138_Y)
            s :=  calldataload(add(input, 4416))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_139_X)
            mstore(add(g, 0x20), PUB_139_Y)
            s :=  calldataload(add(input, 4448))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_140_X)
            mstore(add(g, 0x20), PUB_140_Y)
            s :=  calldataload(add(input, 4480))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_141_X)
            mstore(add(g, 0x20), PUB_141_Y)
            s :=  calldataload(add(input, 4512))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_142_X)
            mstore(add(g, 0x20), PUB_142_Y)
            s :=  calldataload(add(input, 4544))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_143_X)
            mstore(add(g, 0x20), PUB_143_Y)
            s :=  calldataload(add(input, 4576))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_144_X)
            mstore(add(g, 0x20), PUB_144_Y)
            s :=  calldataload(add(input, 4608))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_145_X)
            mstore(add(g, 0x20), PUB_145_Y)
            s :=  calldataload(add(input, 4640))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_146_X)
            mstore(add(g, 0x20), PUB_146_Y)
            s :=  calldataload(add(input, 4672))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_147_X)
            mstore(add(g, 0x20), PUB_147_Y)
            s :=  calldataload(add(input, 4704))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_148_X)
            mstore(add(g, 0x20), PUB_148_Y)
            s :=  calldataload(add(input, 4736))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_149_X)
            mstore(add(g, 0x20), PUB_149_Y)
            s :=  calldataload(add(input, 4768))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_150_X)
            mstore(add(g, 0x20), PUB_150_Y)
            s :=  calldataload(add(input, 4800))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_151_X)
            mstore(add(g, 0x20), PUB_151_Y)
            s :=  calldataload(add(input, 4832))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_152_X)
            mstore(add(g, 0x20), PUB_152_Y)
            s :=  calldataload(add(input, 4864))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_153_X)
            mstore(add(g, 0x20), PUB_153_Y)
            s :=  calldataload(add(input, 4896))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_154_X)
            mstore(add(g, 0x20), PUB_154_Y)
            s :=  calldataload(add(input, 4928))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_155_X)
            mstore(add(g, 0x20), PUB_155_Y)
            s :=  calldataload(add(input, 4960))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_156_X)
            mstore(add(g, 0x20), PUB_156_Y)
            s :=  calldataload(add(input, 4992))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_157_X)
            mstore(add(g, 0x20), PUB_157_Y)
            s :=  calldataload(add(input, 5024))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_158_X)
            mstore(add(g, 0x20), PUB_158_Y)
            s :=  calldataload(add(input, 5056))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_159_X)
            mstore(add(g, 0x20), PUB_159_Y)
            s :=  calldataload(add(input, 5088))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_160_X)
            mstore(add(g, 0x20), PUB_160_Y)
            s :=  calldataload(add(input, 5120))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_161_X)
            mstore(add(g, 0x20), PUB_161_Y)
            s :=  calldataload(add(input, 5152))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_162_X)
            mstore(add(g, 0x20), PUB_162_Y)
            s :=  calldataload(add(input, 5184))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_163_X)
            mstore(add(g, 0x20), PUB_163_Y)
            s :=  calldataload(add(input, 5216))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_164_X)
            mstore(add(g, 0x20), PUB_164_Y)
            s :=  calldataload(add(input, 5248))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_165_X)
            mstore(add(g, 0x20), PUB_165_Y)
            s :=  calldataload(add(input, 5280))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_166_X)
            mstore(add(g, 0x20), PUB_166_Y)
            s :=  calldataload(add(input, 5312))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_167_X)
            mstore(add(g, 0x20), PUB_167_Y)
            s :=  calldataload(add(input, 5344))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_168_X)
            mstore(add(g, 0x20), PUB_168_Y)
            s :=  calldataload(add(input, 5376))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_169_X)
            mstore(add(g, 0x20), PUB_169_Y)
            s :=  calldataload(add(input, 5408))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_170_X)
            mstore(add(g, 0x20), PUB_170_Y)
            s :=  calldataload(add(input, 5440))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_171_X)
            mstore(add(g, 0x20), PUB_171_Y)
            s :=  calldataload(add(input, 5472))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_172_X)
            mstore(add(g, 0x20), PUB_172_Y)
            s :=  calldataload(add(input, 5504))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_173_X)
            mstore(add(g, 0x20), PUB_173_Y)
            s :=  calldataload(add(input, 5536))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_174_X)
            mstore(add(g, 0x20), PUB_174_Y)
            s :=  calldataload(add(input, 5568))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_175_X)
            mstore(add(g, 0x20), PUB_175_Y)
            s :=  calldataload(add(input, 5600))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_176_X)
            mstore(add(g, 0x20), PUB_176_Y)
            s :=  calldataload(add(input, 5632))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_177_X)
            mstore(add(g, 0x20), PUB_177_Y)
            s :=  calldataload(add(input, 5664))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_178_X)
            mstore(add(g, 0x20), PUB_178_Y)
            s :=  calldataload(add(input, 5696))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_179_X)
            mstore(add(g, 0x20), PUB_179_Y)
            s :=  calldataload(add(input, 5728))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_180_X)
            mstore(add(g, 0x20), PUB_180_Y)
            s :=  calldataload(add(input, 5760))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_181_X)
            mstore(add(g, 0x20), PUB_181_Y)
            s :=  calldataload(add(input, 5792))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_182_X)
            mstore(add(g, 0x20), PUB_182_Y)
            s :=  calldataload(add(input, 5824))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_183_X)
            mstore(add(g, 0x20), PUB_183_Y)
            s :=  calldataload(add(input, 5856))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_184_X)
            mstore(add(g, 0x20), PUB_184_Y)
            s :=  calldataload(add(input, 5888))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_185_X)
            mstore(add(g, 0x20), PUB_185_Y)
            s :=  calldataload(add(input, 5920))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_186_X)
            mstore(add(g, 0x20), PUB_186_Y)
            s :=  calldataload(add(input, 5952))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_187_X)
            mstore(add(g, 0x20), PUB_187_Y)
            s :=  calldataload(add(input, 5984))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_188_X)
            mstore(add(g, 0x20), PUB_188_Y)
            s :=  calldataload(add(input, 6016))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_189_X)
            mstore(add(g, 0x20), PUB_189_Y)
            s :=  calldataload(add(input, 6048))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_190_X)
            mstore(add(g, 0x20), PUB_190_Y)
            s :=  calldataload(add(input, 6080))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_191_X)
            mstore(add(g, 0x20), PUB_191_Y)
            s :=  calldataload(add(input, 6112))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_192_X)
            mstore(add(g, 0x20), PUB_192_Y)
            s :=  calldataload(add(input, 6144))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_193_X)
            mstore(add(g, 0x20), PUB_193_Y)
            s :=  calldataload(add(input, 6176))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_194_X)
            mstore(add(g, 0x20), PUB_194_Y)
            s :=  calldataload(add(input, 6208))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_195_X)
            mstore(add(g, 0x20), PUB_195_Y)
            s :=  calldataload(add(input, 6240))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_196_X)
            mstore(add(g, 0x20), PUB_196_Y)
            s :=  calldataload(add(input, 6272))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_197_X)
            mstore(add(g, 0x20), PUB_197_Y)
            s :=  calldataload(add(input, 6304))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_198_X)
            mstore(add(g, 0x20), PUB_198_Y)
            s :=  calldataload(add(input, 6336))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_199_X)
            mstore(add(g, 0x20), PUB_199_Y)
            s :=  calldataload(add(input, 6368))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_200_X)
            mstore(add(g, 0x20), PUB_200_Y)
            s :=  calldataload(add(input, 6400))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_201_X)
            mstore(add(g, 0x20), PUB_201_Y)
            s :=  calldataload(add(input, 6432))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_202_X)
            mstore(add(g, 0x20), PUB_202_Y)
            s :=  calldataload(add(input, 6464))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_203_X)
            mstore(add(g, 0x20), PUB_203_Y)
            s :=  calldataload(add(input, 6496))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_204_X)
            mstore(add(g, 0x20), PUB_204_Y)
            s :=  calldataload(add(input, 6528))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_205_X)
            mstore(add(g, 0x20), PUB_205_Y)
            s :=  calldataload(add(input, 6560))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_206_X)
            mstore(add(g, 0x20), PUB_206_Y)
            s :=  calldataload(add(input, 6592))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_207_X)
            mstore(add(g, 0x20), PUB_207_Y)
            s :=  calldataload(add(input, 6624))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_208_X)
            mstore(add(g, 0x20), PUB_208_Y)
            s :=  calldataload(add(input, 6656))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_209_X)
            mstore(add(g, 0x20), PUB_209_Y)
            s :=  calldataload(add(input, 6688))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_210_X)
            mstore(add(g, 0x20), PUB_210_Y)
            s :=  calldataload(add(input, 6720))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_211_X)
            mstore(add(g, 0x20), PUB_211_Y)
            s :=  calldataload(add(input, 6752))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_212_X)
            mstore(add(g, 0x20), PUB_212_Y)
            s :=  calldataload(add(input, 6784))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_213_X)
            mstore(add(g, 0x20), PUB_213_Y)
            s :=  calldataload(add(input, 6816))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_214_X)
            mstore(add(g, 0x20), PUB_214_Y)
            s :=  calldataload(add(input, 6848))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_215_X)
            mstore(add(g, 0x20), PUB_215_Y)
            s :=  calldataload(add(input, 6880))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_216_X)
            mstore(add(g, 0x20), PUB_216_Y)
            s :=  calldataload(add(input, 6912))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_217_X)
            mstore(add(g, 0x20), PUB_217_Y)
            s :=  calldataload(add(input, 6944))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_218_X)
            mstore(add(g, 0x20), PUB_218_Y)
            s :=  calldataload(add(input, 6976))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_219_X)
            mstore(add(g, 0x20), PUB_219_Y)
            s :=  calldataload(add(input, 7008))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_220_X)
            mstore(add(g, 0x20), PUB_220_Y)
            s :=  calldataload(add(input, 7040))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_221_X)
            mstore(add(g, 0x20), PUB_221_Y)
            s :=  calldataload(add(input, 7072))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_222_X)
            mstore(add(g, 0x20), PUB_222_Y)
            s :=  calldataload(add(input, 7104))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_223_X)
            mstore(add(g, 0x20), PUB_223_Y)
            s :=  calldataload(add(input, 7136))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_224_X)
            mstore(add(g, 0x20), PUB_224_Y)
            s :=  calldataload(add(input, 7168))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_225_X)
            mstore(add(g, 0x20), PUB_225_Y)
            s :=  calldataload(add(input, 7200))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_226_X)
            mstore(add(g, 0x20), PUB_226_Y)
            s :=  calldataload(add(input, 7232))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_227_X)
            mstore(add(g, 0x20), PUB_227_Y)
            s :=  calldataload(add(input, 7264))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_228_X)
            mstore(add(g, 0x20), PUB_228_Y)
            s :=  calldataload(add(input, 7296))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_229_X)
            mstore(add(g, 0x20), PUB_229_Y)
            s :=  calldataload(add(input, 7328))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_230_X)
            mstore(add(g, 0x20), PUB_230_Y)
            s :=  calldataload(add(input, 7360))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_231_X)
            mstore(add(g, 0x20), PUB_231_Y)
            s :=  calldataload(add(input, 7392))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_232_X)
            mstore(add(g, 0x20), PUB_232_Y)
            s :=  calldataload(add(input, 7424))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_233_X)
            mstore(add(g, 0x20), PUB_233_Y)
            s :=  calldataload(add(input, 7456))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_234_X)
            mstore(add(g, 0x20), PUB_234_Y)
            s :=  calldataload(add(input, 7488))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_235_X)
            mstore(add(g, 0x20), PUB_235_Y)
            s :=  calldataload(add(input, 7520))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_236_X)
            mstore(add(g, 0x20), PUB_236_Y)
            s :=  calldataload(add(input, 7552))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_237_X)
            mstore(add(g, 0x20), PUB_237_Y)
            s :=  calldataload(add(input, 7584))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_238_X)
            mstore(add(g, 0x20), PUB_238_Y)
            s :=  calldataload(add(input, 7616))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_239_X)
            mstore(add(g, 0x20), PUB_239_Y)
            s :=  calldataload(add(input, 7648))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_240_X)
            mstore(add(g, 0x20), PUB_240_Y)
            s :=  calldataload(add(input, 7680))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_241_X)
            mstore(add(g, 0x20), PUB_241_Y)
            s :=  calldataload(add(input, 7712))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_242_X)
            mstore(add(g, 0x20), PUB_242_Y)
            s :=  calldataload(add(input, 7744))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_243_X)
            mstore(add(g, 0x20), PUB_243_Y)
            s :=  calldataload(add(input, 7776))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_244_X)
            mstore(add(g, 0x20), PUB_244_Y)
            s :=  calldataload(add(input, 7808))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_245_X)
            mstore(add(g, 0x20), PUB_245_Y)
            s :=  calldataload(add(input, 7840))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_246_X)
            mstore(add(g, 0x20), PUB_246_Y)
            s :=  calldataload(add(input, 7872))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_247_X)
            mstore(add(g, 0x20), PUB_247_Y)
            s :=  calldataload(add(input, 7904))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_248_X)
            mstore(add(g, 0x20), PUB_248_Y)
            s :=  calldataload(add(input, 7936))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_249_X)
            mstore(add(g, 0x20), PUB_249_Y)
            s := mload(publicCommitments)
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))

            x := mload(f)
            y := mload(add(f, 0x20))
        }
        if (!success) {
            // Either Public input not in field, or verification key invalid.
            // We assume the contract is correctly generated, so the verification key is valid.
            revert PublicInputNotInField();
        }
    }

    /// Compress a proof.
    /// @notice Will revert with InvalidProof if the curve points are invalid,
    /// but does not verify the proof itself.
    /// @param proof The uncompressed Groth16 proof. Elements are in the same order as for
    /// verifyProof. I.e. Groth16 points (A, B, C) encoded as in EIP-197.
    /// @param commitments Pedersen commitments from the proof.
    /// @param commitmentPok proof of knowledge for the Pedersen commitments.
    /// @return compressed The compressed proof. Elements are in the same order as for
    /// verifyCompressedProof. I.e. points (A, B, C) in compressed format.
    /// @return compressedCommitments compressed Pedersen commitments from the proof.
    /// @return compressedCommitmentPok compressed proof of knowledge for the Pedersen commitments.
    function compressProof(
        uint256[8] calldata proof,
        uint256[2] calldata commitments,
        uint256[2] calldata commitmentPok
    )
    public view returns (
        uint256[4] memory compressed,
        uint256[1] memory compressedCommitments,
        uint256 compressedCommitmentPok
    ) {
        compressed[0] = compress_g1(proof[0], proof[1]);
        (compressed[2], compressed[1]) = compress_g2(proof[3], proof[2], proof[5], proof[4]);
        compressed[3] = compress_g1(proof[6], proof[7]);
        compressedCommitments[0] = compress_g1(commitments[0], commitments[1]);
        compressedCommitmentPok = compress_g1(commitmentPok[0], commitmentPok[1]);
    }

    /// Verify a Groth16 proof with compressed points.
    /// @notice Reverts with InvalidProof if the proof is invalid or
    /// with PublicInputNotInField the public input is not reduced.
    /// @notice There is no return value. If the function does not revert, the
    /// proof was successfully verified.
    /// @param compressedProof the points (A, B, C) in compressed format
    /// matching the output of compressProof.
    /// @param compressedCommitments compressed Pedersen commitments from the proof.
    /// @param compressedCommitmentPok compressed proof of knowledge for the Pedersen commitments.
    /// @param input the public input field elements in the scalar field Fr.
    /// Elements must be reduced.
    function verifyCompressedProof(
        uint256[4] calldata compressedProof,
        uint256[1] calldata compressedCommitments,
        uint256 compressedCommitmentPok,
        uint256[249] calldata input
    ) public view {
        uint256[1] memory publicCommitments;
        uint256[2] memory commitments;
        uint256[24] memory pairings;
        {
            (commitments[0], commitments[1]) = decompress_g1(compressedCommitments[0]);
            (uint256 Px, uint256 Py) = decompress_g1(compressedCommitmentPok);

            uint256[] memory publicAndCommitmentCommitted;
            publicAndCommitmentCommitted = new uint256[](86);
            assembly ("memory-safe") {
                let publicAndCommitmentCommittedOffset := add(publicAndCommitmentCommitted, 0x20)
                calldatacopy(add(publicAndCommitmentCommittedOffset, 0), add(input, 5152), 2752)
            }

            publicCommitments[0] = uint256(
                keccak256(
                    abi.encodePacked(
                        commitments[0],
                        commitments[1],
                        publicAndCommitmentCommitted
                    )
                )
            ) % R;
            // Commitments
            pairings[ 0] = commitments[0];
            pairings[ 1] = commitments[1];
            pairings[ 2] = PEDERSEN_GSIGMANEG_X_1;
            pairings[ 3] = PEDERSEN_GSIGMANEG_X_0;
            pairings[ 4] = PEDERSEN_GSIGMANEG_Y_1;
            pairings[ 5] = PEDERSEN_GSIGMANEG_Y_0;
            pairings[ 6] = Px;
            pairings[ 7] = Py;
            pairings[ 8] = PEDERSEN_G_X_1;
            pairings[ 9] = PEDERSEN_G_X_0;
            pairings[10] = PEDERSEN_G_Y_1;
            pairings[11] = PEDERSEN_G_Y_0;

            // Verify pedersen commitments
            bool success;
            assembly ("memory-safe") {
                let f := mload(0x40)

                success := staticcall(gas(), PRECOMPILE_VERIFY, pairings, 0x180, f, 0x20)
                success := and(success, mload(f))
            }
            if (!success) {
                revert CommitmentInvalid();
            }
        }

        {
            (uint256 Ax, uint256 Ay) = decompress_g1(compressedProof[0]);
            (uint256 Bx0, uint256 Bx1, uint256 By0, uint256 By1) = decompress_g2(compressedProof[2], compressedProof[1]);
            (uint256 Cx, uint256 Cy) = decompress_g1(compressedProof[3]);
            (uint256 Lx, uint256 Ly) = publicInputMSM(
                input,
                publicCommitments,
                commitments
            );

            // Verify the pairing
            // Note: The precompile expects the F2 coefficients in big-endian order.
            // Note: The pairing precompile rejects unreduced values, so we won't check that here.
            // e(A, B)
            pairings[ 0] = Ax;
            pairings[ 1] = Ay;
            pairings[ 2] = Bx1;
            pairings[ 3] = Bx0;
            pairings[ 4] = By1;
            pairings[ 5] = By0;
            // e(C, -δ)
            pairings[ 6] = Cx;
            pairings[ 7] = Cy;
            pairings[ 8] = DELTA_NEG_X_1;
            pairings[ 9] = DELTA_NEG_X_0;
            pairings[10] = DELTA_NEG_Y_1;
            pairings[11] = DELTA_NEG_Y_0;
            // e(α, -β)
            pairings[12] = ALPHA_X;
            pairings[13] = ALPHA_Y;
            pairings[14] = BETA_NEG_X_1;
            pairings[15] = BETA_NEG_X_0;
            pairings[16] = BETA_NEG_Y_1;
            pairings[17] = BETA_NEG_Y_0;
            // e(L_pub, -γ)
            pairings[18] = Lx;
            pairings[19] = Ly;
            pairings[20] = GAMMA_NEG_X_1;
            pairings[21] = GAMMA_NEG_X_0;
            pairings[22] = GAMMA_NEG_Y_1;
            pairings[23] = GAMMA_NEG_Y_0;

            // Check pairing equation.
            bool success;
            uint256[1] memory output;
            assembly ("memory-safe") {
                success := staticcall(gas(), PRECOMPILE_VERIFY, pairings, 0x300, output, 0x20)
            }
            if (!success || output[0] != 1) {
                // Either proof or verification key invalid.
                // We assume the contract is correctly generated, so the verification key is valid.
                revert ProofInvalid();
            }
        }
    }

    /// Verify an uncompressed Groth16 proof.
    /// @notice Reverts with InvalidProof if the proof is invalid or
    /// with PublicInputNotInField the public input is not reduced.
    /// @notice There is no return value. If the function does not revert, the
    /// proof was successfully verified.
    /// @param proof the points (A, B, C) in EIP-197 format matching the output
    /// of compressProof.
    /// @param commitments the Pedersen commitments from the proof.
    /// @param commitmentPok the proof of knowledge for the Pedersen commitments.
    /// @param input the public input field elements in the scalar field Fr.
    /// Elements must be reduced.
    function verifyProof(
        uint256[8] calldata proof,
        uint256[2] calldata commitments,
        uint256[2] calldata commitmentPok,
        uint256[249] calldata input
    ) public view {
        // HashToField
        uint256[1] memory publicCommitments;
        uint256[] memory publicAndCommitmentCommitted;
        publicAndCommitmentCommitted = new uint256[](86);
        assembly ("memory-safe") {
            let publicAndCommitmentCommittedOffset := add(publicAndCommitmentCommitted, 0x20)
            calldatacopy(add(publicAndCommitmentCommittedOffset, 0), add(input, 5152), 2752)
        }

            publicCommitments[0] = uint256(
                keccak256(
                    abi.encodePacked(
                        commitments[0],
                        commitments[1],
                        publicAndCommitmentCommitted
                    )
                )
            ) % R;

        // Verify pedersen commitments
        bool success;
        assembly ("memory-safe") {
            let f := mload(0x40)

            calldatacopy(f, commitments, 0x40) // Copy Commitments
            mstore(add(f, 0x40), PEDERSEN_GSIGMANEG_X_1)
            mstore(add(f, 0x60), PEDERSEN_GSIGMANEG_X_0)
            mstore(add(f, 0x80), PEDERSEN_GSIGMANEG_Y_1)
            mstore(add(f, 0xa0), PEDERSEN_GSIGMANEG_Y_0)
            calldatacopy(add(f, 0xc0), commitmentPok, 0x40)
            mstore(add(f, 0x100), PEDERSEN_G_X_1)
            mstore(add(f, 0x120), PEDERSEN_G_X_0)
            mstore(add(f, 0x140), PEDERSEN_G_Y_1)
            mstore(add(f, 0x160), PEDERSEN_G_Y_0)

            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x180, f, 0x20)
            success := and(success, mload(f))
        }
        if (!success) {
            revert CommitmentInvalid();
        }

        (uint256 x, uint256 y) = publicInputMSM(
            input,
            publicCommitments,
            commitments
        );

        // Note: The precompile expects the F2 coefficients in big-endian order.
        // Note: The pairing precompile rejects unreduced values, so we won't check that here.
        assembly ("memory-safe") {
            let f := mload(0x40) // Free memory pointer.

            // Copy points (A, B, C) to memory. They are already in correct encoding.
            // This is pairing e(A, B) and G1 of e(C, -δ).
            calldatacopy(f, proof, 0x100)

            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.
            // OPT: This could be better done using a single codecopy, but
            //      Solidity (unlike standalone Yul) doesn't provide a way to
            //      to do this.
            mstore(add(f, 0x100), DELTA_NEG_X_1)
            mstore(add(f, 0x120), DELTA_NEG_X_0)
            mstore(add(f, 0x140), DELTA_NEG_Y_1)
            mstore(add(f, 0x160), DELTA_NEG_Y_0)
            mstore(add(f, 0x180), ALPHA_X)
            mstore(add(f, 0x1a0), ALPHA_Y)
            mstore(add(f, 0x1c0), BETA_NEG_X_1)
            mstore(add(f, 0x1e0), BETA_NEG_X_0)
            mstore(add(f, 0x200), BETA_NEG_Y_1)
            mstore(add(f, 0x220), BETA_NEG_Y_0)
            mstore(add(f, 0x240), x)
            mstore(add(f, 0x260), y)
            mstore(add(f, 0x280), GAMMA_NEG_X_1)
            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)
            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)
            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)

            // Check pairing equation.
            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x300, f, 0x20)
            // Also check returned value (both are either 1 or 0).
            success := and(success, mload(f))
        }
        if (!success) {
            // Either proof or verification key invalid.
            // We assume the contract is correctly generated, so the verification key is valid.
            revert ProofInvalid();
        }
    }
}
