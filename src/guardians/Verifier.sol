
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/// @title Groth16 verifier template.
/// @author Remco Bloemen
/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed
/// (256 bytes) and compressed (128 bytes) format. A view function is provided
/// to compress proofs.
/// @notice See <https://2π.com/23/bn254-compression> for further explanation.
contract Verifier {

    /// Some of the provided public input values are larger than the field modulus.
    /// @dev Public input elements are not automatically reduced, as this is can be
    /// a dangerous source of bugs.
    error PublicInputNotInField();

    /// The proof is invalid.
    /// @dev This can mean that provided Groth16 proof points are not on their
    /// curves, that pairing equation fails, or that the proof is not for the
    /// provided public input.
    error ProofInvalid();
    /// The commitment is invalid
    /// @dev This can mean that provided commitment points and/or proof of knowledge are not on their
    /// curves, that pairing equation fails, or that the commitment and/or proof of knowledge is not for the
    /// commitment key.
    error CommitmentInvalid();

    // Addresses of precompiles
    uint256 constant PRECOMPILE_MODEXP = 0x05;
    uint256 constant PRECOMPILE_ADD = 0x06;
    uint256 constant PRECOMPILE_MUL = 0x07;
    uint256 constant PRECOMPILE_VERIFY = 0x08;

    // Base field Fp order P and scalar field Fr order R.
    // For BN254 these are computed as follows:
    //     t = 4965661367192848881
    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1
    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1
    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;
    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;

    // Extension field Fp2 = Fp[i] / (i² + 1)
    // Note: This is the complex extension field of Fp with i² = -1.
    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.
    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which
    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which
    //       Fp2 elements are encoded in the public interface as this became convention.

    // Constants in Fp
    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;
    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;
    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;

    // Exponents for inversions and square roots mod P
    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2
    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;

    // Groth16 alpha point in G1
    uint256 constant ALPHA_X = 4616003582516232999353643809593841970502040549427123144380986922951457557712;
    uint256 constant ALPHA_Y = 2119224811029486480246910554514766818242623686925653760680396864259157073495;

    // Groth16 beta point in G2 in powers of i
    uint256 constant BETA_NEG_X_0 = 12475888808536037275448756551430721751167034399828525822708123474146184345127;
    uint256 constant BETA_NEG_X_1 = 10489900796660337970858732384227332980244610954387146471050516496069493583348;
    uint256 constant BETA_NEG_Y_0 = 13156770107397997621095063450057469878669140378240279967267181814384542682677;
    uint256 constant BETA_NEG_Y_1 = 3168520431105251027442329837267927957578025121499979098116820920492456675015;

    // Groth16 gamma point in G2 in powers of i
    uint256 constant GAMMA_NEG_X_0 = 9974693533797493290801160232985143376417666081397485831702313830695454828571;
    uint256 constant GAMMA_NEG_X_1 = 168785217131902665601762242784839882168857997031988048705709671996438655704;
    uint256 constant GAMMA_NEG_Y_0 = 12294812239421301825400602233426813043234058654590094027608083606876279047528;
    uint256 constant GAMMA_NEG_Y_1 = 5546111731383180115431946740831619593892222147351261757795819825886340685241;

    // Groth16 delta point in G2 in powers of i
    uint256 constant DELTA_NEG_X_0 = 1266568301646389070939558519728862130037779663822377136523795290706859946332;
    uint256 constant DELTA_NEG_X_1 = 14092712447749828610018232728153434615879830245703518871902775850799909322356;
    uint256 constant DELTA_NEG_Y_0 = 5864845059345664605495799506137920839010898353218570384166709236518758914029;
    uint256 constant DELTA_NEG_Y_1 = 161231570799758052181115013248860452946691246179310353806042338682662071168;
    // Pedersen G point in G2 in powers of i
    uint256 constant PEDERSEN_G_X_0 = 17001767455760170057254735312579360641341204454447515145797348130574716411388;
    uint256 constant PEDERSEN_G_X_1 = 21414290660957384483284218710772220214341393482599135534209257885271686352541;
    uint256 constant PEDERSEN_G_Y_0 = 11055856275870540870907417786387399415364656869706801388053497189007267338807;
    uint256 constant PEDERSEN_G_Y_1 = 19122105305798636493365923480977100003791838796897221386298968816611770371618;

    // Pedersen GSigmaNeg point in G2 in powers of i
    uint256 constant PEDERSEN_GSIGMANEG_X_0 = 7659968052643077541840730620051314553618031260751196099514751099510441903802;
    uint256 constant PEDERSEN_GSIGMANEG_X_1 = 19357998279946240159097816147735767829053645860503342570907825184259121231354;
    uint256 constant PEDERSEN_GSIGMANEG_Y_0 = 7383890246698520570471216716687932887457362058949617425719135587724724411560;
    uint256 constant PEDERSEN_GSIGMANEG_Y_1 = 13078555709476405178689646996494648946184905443633793972856592796690869235352;

    // Constant and public input points
    uint256 constant CONSTANT_X = 13463837474847805000242394042706769835382113366413914251553512587978487237844;
    uint256 constant CONSTANT_Y = 7559615365045606161474700513610531161555148806912861983167126769353807933192;
    uint256 constant PUB_0_X = 6855360745876197966692818546474929240139631536662103962194977335377757253707;
    uint256 constant PUB_0_Y = 8638974989342088212184674533048419526025759159972827724894518317325080653179;
    uint256 constant PUB_1_X = 2155936158508977874367416482777049164328399044662048659041493322953388245404;
    uint256 constant PUB_1_Y = 16105434647454846777598919035963587112959242790639374140980623036987885983115;
    uint256 constant PUB_2_X = 18218676042715716886735585276532555720486096712722860783752636119230648200112;
    uint256 constant PUB_2_Y = 11947375006748932418071138128898371087541655237007864389399436796481777809790;
    uint256 constant PUB_3_X = 5173508932325898879521549672731713288083690632124354402519452177627559090014;
    uint256 constant PUB_3_Y = 757121107821548605324403604353687825094565086674915221139143599698841315736;
    uint256 constant PUB_4_X = 5857485330150804854365842601690663814680814164749355269058882052487387018472;
    uint256 constant PUB_4_Y = 14675910804974525554509148731576314635959895244475150583517480517390739120585;
    uint256 constant PUB_5_X = 273739108630487889092591025500115535724082991208415452015507305720863201052;
    uint256 constant PUB_5_Y = 21331461191446101356023307619956329634196824679802201900271353218360515755178;
    uint256 constant PUB_6_X = 20415927832064826203593240718705371297413940827966578503029514878906162081282;
    uint256 constant PUB_6_Y = 4094110106094644059227263239152542218208886117027532063576608757947993945213;
    uint256 constant PUB_7_X = 9869744588455875303648546783284626607733757146765293321064837229155779248603;
    uint256 constant PUB_7_Y = 16482687464540730398115716968984857980300133605403825725316832320086059833471;
    uint256 constant PUB_8_X = 10230772191503906702789424438024840027418403374647063528592021487305081639728;
    uint256 constant PUB_8_Y = 6866125602267593411659193735907316308374743000973309081531746472768186901127;
    uint256 constant PUB_9_X = 21877838955283642280297816242147406705063362136636646730374556092068084512704;
    uint256 constant PUB_9_Y = 10916855170857024096498996716010564041537175951112871533317764959812140397485;
    uint256 constant PUB_10_X = 2849675068155504273399583426807612611673953245313445784051127546429278488062;
    uint256 constant PUB_10_Y = 18127485603573303362633445293526482603973003247187169754069196571479452927888;
    uint256 constant PUB_11_X = 21713009813366910107361644263305909829602874606353091184274592084581847701056;
    uint256 constant PUB_11_Y = 18341569437935769475364824480243280426980019848671036619303219944223922925324;
    uint256 constant PUB_12_X = 19855869907402765267339371922654412433771408122713655109161201527041354310763;
    uint256 constant PUB_12_Y = 3862954570483742136138161852131082782238954049592576036841384312079984867643;
    uint256 constant PUB_13_X = 2181039531008379458176842779252283162829372506829423131948826616103870550061;
    uint256 constant PUB_13_Y = 9179611614145133273815002917247226230294574753889437002375661810777534511412;
    uint256 constant PUB_14_X = 19657976978386787323213859573785664213401283194367687250449664947368495924378;
    uint256 constant PUB_14_Y = 17022405282492884615166401887910983391521052551335612414207790282690203670583;
    uint256 constant PUB_15_X = 1255707814367391685630653423272822975340642678108865790742386501862494854027;
    uint256 constant PUB_15_Y = 15481355019753939523592876373443265466238539766792871730398560256121941930149;
    uint256 constant PUB_16_X = 951790030574882532700962755370125815043576837216644305587785601936177413407;
    uint256 constant PUB_16_Y = 15713392798544016179576532535086189805234895636583876831634230354966464242199;
    uint256 constant PUB_17_X = 5779381703482107636684462448027548730423655653398444293993613651487027512737;
    uint256 constant PUB_17_Y = 21010816742301132907040988757007299635397755672481361979887615102489313319414;
    uint256 constant PUB_18_X = 5385236911099608826949384315369267278731013128854768148500636082428436635573;
    uint256 constant PUB_18_Y = 11349516334419601688617365879806444814988907338509046715267835883406086308094;
    uint256 constant PUB_19_X = 17171310823137834831335138765106489488125612707717098772722439616094473147383;
    uint256 constant PUB_19_Y = 8798203912298537164348017437715154250274604665870030538204590383505481798407;
    uint256 constant PUB_20_X = 4569739147474006605255568428553950535877280502201530970310403380140752563540;
    uint256 constant PUB_20_Y = 20344986294503338384333710694116709701667636488354284804015983623598050434035;
    uint256 constant PUB_21_X = 6771127136393462969191885848256421223824467729175318805193022963068673017142;
    uint256 constant PUB_21_Y = 7146697144557734477445328776948161271202546068817166614150771353240253959341;
    uint256 constant PUB_22_X = 2729149271434580775313876146932529286824503485374479469210739798561176504272;
    uint256 constant PUB_22_Y = 7987079432955965015923203167827069333861605369714206411579246611771495218829;
    uint256 constant PUB_23_X = 12895331449878215641541186170628811017446141843015067046757238411002950735973;
    uint256 constant PUB_23_Y = 16070330109015906163777876866057183827784885876225383314727716208634876594284;
    uint256 constant PUB_24_X = 6041981872627723234244030788672664499181476308635354653966156142324909710627;
    uint256 constant PUB_24_Y = 8025141155554198074784116956949054364434467016673689260827960748805757431689;
    uint256 constant PUB_25_X = 13264488760518377596282127517096835855663246715491664022376108978311953746056;
    uint256 constant PUB_25_Y = 18828467591714975968675585251800085135725700286939344426242242269563836425728;
    uint256 constant PUB_26_X = 15404611796080269232088639817899797666830560614478022365232326543091069804314;
    uint256 constant PUB_26_Y = 7258830167768073039621421226035483010943502711685984445588714084531266618583;
    uint256 constant PUB_27_X = 14895934719725042960905773705577581079586403202194448937496489397941497685499;
    uint256 constant PUB_27_Y = 10516780570873323578865997065117885345386312266050005174319350677171346757503;
    uint256 constant PUB_28_X = 15393105720367936660211671619054513182264411920742860485144924785924032204827;
    uint256 constant PUB_28_Y = 16308642485268187135789871100818447373785274693525392095169477883501120578547;
    uint256 constant PUB_29_X = 4159391511667413143271708401326519501288456469778221377104607931517865018598;
    uint256 constant PUB_29_Y = 10712112610013500344651005923796504072375156263311039411361281160092656695223;
    uint256 constant PUB_30_X = 415963579148807262709535543580457520613268230709970046229574204507484291143;
    uint256 constant PUB_30_Y = 5490223789947707243187345684133204881611522220925373325756769477798513680021;
    uint256 constant PUB_31_X = 8631978150344830760437257193333888348332795815741041974469981688979998425039;
    uint256 constant PUB_31_Y = 21705318219981621643256869148253232608734922702542148138094501895727843892789;
    uint256 constant PUB_32_X = 15839739312836525691939775022905322944618835004828678240447281292218848935232;
    uint256 constant PUB_32_Y = 11316829222493869934024508081256728811866285363076003561843117845922683910303;
    uint256 constant PUB_33_X = 19289108782885192731796656611438588948980512330602241234946403557701438371298;
    uint256 constant PUB_33_Y = 594554802522953894021375238108725688591199319348560497566317060820312049282;
    uint256 constant PUB_34_X = 1060377050365131103270221513779096805066293414455687229529679084500565015377;
    uint256 constant PUB_34_Y = 11172824042490595059056371523569174239443662075284800780400969940903880346408;
    uint256 constant PUB_35_X = 5912329952405904639900447700414075262477301670642397429139198982815362997941;
    uint256 constant PUB_35_Y = 19611951235585403188073226019412038097512331599279414479530730747763775936132;
    uint256 constant PUB_36_X = 7787657770685016900554830489354606101349220806748612545080211270290854615478;
    uint256 constant PUB_36_Y = 4099046939472070125452263320865333393648919918783892313244214042672515480825;
    uint256 constant PUB_37_X = 8200846978259364039660570452924867357788989000052650987398300604129727739975;
    uint256 constant PUB_37_Y = 14518121180423052723939196353856601995666115374882066274328521077869256677169;
    uint256 constant PUB_38_X = 1575829168277981771603456908232266873497721659789498869245943094469013541285;
    uint256 constant PUB_38_Y = 8335484334479318672319224326433885228877082396703090557211034875993641197929;
    uint256 constant PUB_39_X = 1528331975711815183159525443396767907921545914932322314515955618131345857611;
    uint256 constant PUB_39_Y = 15852869179151983007298660325212736281543187205777101013556886623406298311051;
    uint256 constant PUB_40_X = 3798369915511270697267012477672773373731249629606265979589951240475326941429;
    uint256 constant PUB_40_Y = 5624241853589087200488476992429741200107457910759074007757058217189589172307;
    uint256 constant PUB_41_X = 1968967737048038712310104326913147928152168377750104828532268061446464948588;
    uint256 constant PUB_41_Y = 16605710507852467277948663544789537635457464458474125192961998669141797961049;
    uint256 constant PUB_42_X = 9340104841193051259332761391207587641018046011928094344139154145215459897049;
    uint256 constant PUB_42_Y = 11020334649247267045649104697848040879366807571535499963271178444299389148413;
    uint256 constant PUB_43_X = 18077427604265547339661865754520199652052182360612124105685702637079505843658;
    uint256 constant PUB_43_Y = 15581089542385901408148394702283887038510400450526612347655619836165587014513;
    uint256 constant PUB_44_X = 17403303166436643232076953731557166706862482548270216232642570145735718484421;
    uint256 constant PUB_44_Y = 17480359296638483777341310341323829879046646836711983788572597710208950533960;
    uint256 constant PUB_45_X = 5912184844778535389082188327440866673883170323197516660844901590932471123824;
    uint256 constant PUB_45_Y = 11418448651337988344904379483741413517140656450542204942122020869420807936025;
    uint256 constant PUB_46_X = 6342977028259721912296157144731843831782058686417026884727151283648535939692;
    uint256 constant PUB_46_Y = 20089173087082619749684185516215515194375464923142255070120165929812054136679;
    uint256 constant PUB_47_X = 4135848316561585409411015614163197083345552446065556688084601532698374703110;
    uint256 constant PUB_47_Y = 12405759262840147403484157690072010615838116811659271522593492333596485800256;
    uint256 constant PUB_48_X = 9258431972943602842606356260590569873905978029904126122959504172350131855834;
    uint256 constant PUB_48_Y = 3375786410474211481348894023993502243126202627993881363189890965540223406113;
    uint256 constant PUB_49_X = 6260903922172205054676016701791727662204615380182792542978020417079113360625;
    uint256 constant PUB_49_Y = 10480263813987327133397763991534188488693860031200541025687517774542591402133;
    uint256 constant PUB_50_X = 6608989510336610063229132149162158450761567366885087473047226500801165237030;
    uint256 constant PUB_50_Y = 2092667032786312874650487673742184354090927391635581565359747510238236134849;
    uint256 constant PUB_51_X = 15134654445276509241814217444465798509777505940004220356000908720661962755899;
    uint256 constant PUB_51_Y = 8507841733368240871451451487983872510723929138653469495016917121278308840322;
    uint256 constant PUB_52_X = 9592705898520462546127678905151969740699424439958273540768633925510080444892;
    uint256 constant PUB_52_Y = 12441379397149671951936194127912153471818782324651789639563525931818622120665;
    uint256 constant PUB_53_X = 18517542832546407521288191005715561275130708896105198730296954314607334799994;
    uint256 constant PUB_53_Y = 323506237484700173991238267823100256395315410784386657005195713816188955419;
    uint256 constant PUB_54_X = 14857529542298860104732939035084809467503487154503871624446780414458099496518;
    uint256 constant PUB_54_Y = 816990974144773663731174191408192902213474065111034804022802705598055055014;
    uint256 constant PUB_55_X = 20799643545457198114178913019328724939932082302140127729433620101454243456891;
    uint256 constant PUB_55_Y = 2872541366246223851418524396614602105584543460563317608878485982892574958119;
    uint256 constant PUB_56_X = 17960342442153730940684970759853173927583453380975817013315502774110332287192;
    uint256 constant PUB_56_Y = 4542341007155192405215866961667998615793099049753915576850621788615818285556;
    uint256 constant PUB_57_X = 2726990144834476537223609729479975205012201387978370887863901070206163415317;
    uint256 constant PUB_57_Y = 5580756364221842701651358235236733653381935536788934877099287098826677904144;
    uint256 constant PUB_58_X = 11417629579753369592485825675805968230207624249278844698075733852162654412162;
    uint256 constant PUB_58_Y = 8980870755348685247334535768772155955340731593459788239857553651613877660508;
    uint256 constant PUB_59_X = 9217747560186176685122207804465257711359009295393129652473064529722359137948;
    uint256 constant PUB_59_Y = 12973857117881150794730857944288648160239770453471720065802350361980734374146;
    uint256 constant PUB_60_X = 9883509873414228404604594958159863577499376713462425556980515673973781117740;
    uint256 constant PUB_60_Y = 4398868729889654728051501645423603905206816127459563532600552740132068145351;
    uint256 constant PUB_61_X = 6480995543595069805105043207193687916599648606876224390642692115879014607181;
    uint256 constant PUB_61_Y = 16443206900104248506931864085179657986133391224356968654265335853053745970335;
    uint256 constant PUB_62_X = 3551965915085259535591837939236919903689820700465515184791063486837487592456;
    uint256 constant PUB_62_Y = 13978136057246591224328569137084237486530180976862822626567901259897988725518;
    uint256 constant PUB_63_X = 1235787498244229889994329733126337196670588409568856463078187240515943558013;
    uint256 constant PUB_63_Y = 5318930448033751938059965717858627185790453528550537070345412748074063539768;
    uint256 constant PUB_64_X = 12972190438439044421875661527691251568844086748248446893551569373322369914040;
    uint256 constant PUB_64_Y = 5093826879204504121475953389911364205228413471907904058255368703046195776770;
    uint256 constant PUB_65_X = 10953804279929250984645569077428821057445736340955911038938841193294386528364;
    uint256 constant PUB_65_Y = 11852596241424434977100293104999721047459912967736319999735187152903044843591;
    uint256 constant PUB_66_X = 12569784527120509202576389439496579503155923864918372915808180760318713198182;
    uint256 constant PUB_66_Y = 18811853376022895059818479949041246284516078185332262115438572676441955898272;
    uint256 constant PUB_67_X = 17324308222750266245194595963357198302201629929266015015811647343670573346367;
    uint256 constant PUB_67_Y = 18633271980900839362486799195872704495683873302355760941515776193622069975114;
    uint256 constant PUB_68_X = 3875447015592795974629835752377518767531764841330496714492546051466162323881;
    uint256 constant PUB_68_Y = 20197464438127845969569269100067285563967489155048998078249056388117967810823;
    uint256 constant PUB_69_X = 20666005123395206232922578613171491527535378957230773195499286065720186162289;
    uint256 constant PUB_69_Y = 8364820290835726849743018418857109901945680672367942212723614272941793756914;
    uint256 constant PUB_70_X = 15438698981050388076442185651780650394212691328565489414759709882057898940668;
    uint256 constant PUB_70_Y = 4019895471648925617659313477715930414548756082711383905435177370865353681979;
    uint256 constant PUB_71_X = 8528509338268963045331806370405120412460381541798042164396324703445430188481;
    uint256 constant PUB_71_Y = 11504767659549243298808709116008654636137965270508083854984961628805359850842;
    uint256 constant PUB_72_X = 16038113405627808985716044165285603208934346552519857526880974082787963192145;
    uint256 constant PUB_72_Y = 8778580242655255485111343100263139701872790570578000189771508373551005027412;
    uint256 constant PUB_73_X = 13844442292529221580382566896240551802290253743840983932606399867829292869892;
    uint256 constant PUB_73_Y = 11071142255635038331472025549829380695298040370790831588908834337855627151711;
    uint256 constant PUB_74_X = 16917941134064268537415486067392194407216890527270498381390473263198351541333;
    uint256 constant PUB_74_Y = 794084826928980114028921669677387795551018172526838860690377893312037045642;
    uint256 constant PUB_75_X = 6625602832783192007447646528992711478414124443401227592581890896931151626357;
    uint256 constant PUB_75_Y = 9766733846964670014067974100854775912459074541425830115792305566330687371804;
    uint256 constant PUB_76_X = 13074147746522897887230994416086040374660734607097301685514513811362477694324;
    uint256 constant PUB_76_Y = 17224960599120254872676574284119515139003138864944309079060722686328320624521;
    uint256 constant PUB_77_X = 2415673086712460936934450897092124642976284781667403314281868918161863996866;
    uint256 constant PUB_77_Y = 19084539918956196613002604332469975266667614632970480138614355974111015905048;
    uint256 constant PUB_78_X = 7583848568520577128493157477152900878361726497309373038015789252593826811737;
    uint256 constant PUB_78_Y = 4047146356100065465541431753025915752298180747346550844081586463306963549759;
    uint256 constant PUB_79_X = 12410186006314490871269805237652262323746539593552170687783797390221482103762;
    uint256 constant PUB_79_Y = 4382586681195476450795244618649881968827255384569682803218641553716738085198;
    uint256 constant PUB_80_X = 10827616294740237580613723302290891961656917154701430270846373239228693797357;
    uint256 constant PUB_80_Y = 4211839777616535065281965322874817344397864538040683230074444867486089169419;
    uint256 constant PUB_81_X = 21489482919188407949044368008466019750737996125178938911094126942433587379650;
    uint256 constant PUB_81_Y = 18539800442135842760401384549003364290497302674122128825253203049351986678958;
    uint256 constant PUB_82_X = 16295907329013248433098940382140463252605398068655923529610587685794277123762;
    uint256 constant PUB_82_Y = 16697407212972074756424702521151949666897300200815769473376008133283671793247;
    uint256 constant PUB_83_X = 6624963494746564853489488150928108030834302942494796161939804208275623057520;
    uint256 constant PUB_83_Y = 765196021501290628399302840678590339368838202679844005040733987384362370946;
    uint256 constant PUB_84_X = 19709329468702083990404428277927094450292615906184761123815964947562156615865;
    uint256 constant PUB_84_Y = 8184934757605446390106262900712592204516054551678686307661771017582831573567;
    uint256 constant PUB_85_X = 7226647389481725225794150035149974428820123750473567290682982502536172560308;
    uint256 constant PUB_85_Y = 11402223964905509986670416790215126956689452284226033806052165321673070455779;
    uint256 constant PUB_86_X = 4380019898704039311798778926316345859961915044501544539011608770892914006053;
    uint256 constant PUB_86_Y = 12520446181708798768611248596884163947890910896366722249269293679712112110490;
    uint256 constant PUB_87_X = 12358826459773845671538289882344981496357863508830614039765796476937893449888;
    uint256 constant PUB_87_Y = 793455781069190395497362717663067546026358577721950097897536748897108241304;
    uint256 constant PUB_88_X = 10059993066073427750701998320699933215235572530676932154553870618943733944266;
    uint256 constant PUB_88_Y = 4755148692019886761172599589106999754485170910273946777902754054275366796446;
    uint256 constant PUB_89_X = 18803209207815492258755882513623473194922410525576595311035180845028158996451;
    uint256 constant PUB_89_Y = 21680012489929748596631879432613182961846259652804882645452397356269288984072;
    uint256 constant PUB_90_X = 10445425679161011503351282504915478376244361873497341697892708761360557183795;
    uint256 constant PUB_90_Y = 16043368409473131992087719670261313982912530643526539714006546548047870752718;
    uint256 constant PUB_91_X = 17347666817210050488856924866715344241869635881292312559234735703247204325087;
    uint256 constant PUB_91_Y = 3632883734159253707805989502519201473462051209118851467986959239263243140653;
    uint256 constant PUB_92_X = 11509939363094502323056944242076404363465732105162546249057950244024262084804;
    uint256 constant PUB_92_Y = 1432839144475386726730940832648830872699225518105335860458065838777286342876;
    uint256 constant PUB_93_X = 5704380209182911400610617848397565406629493930109362428203660194820653770399;
    uint256 constant PUB_93_Y = 13855041158786653758111157037255551954132801727347137997306104334721175528746;
    uint256 constant PUB_94_X = 12297755448618953679033558285259223774470064016108032883281682517025083240425;
    uint256 constant PUB_94_Y = 9758655041918125376863106489960576887651809034493101017641841537265298055430;
    uint256 constant PUB_95_X = 9822641446864233286885343327168500101493570168275534477292665230239548021745;
    uint256 constant PUB_95_Y = 12956585205673653730693112200424230234768683250055292185653318081141221309654;
    uint256 constant PUB_96_X = 2965785379322706282583113008469594664078112635489329338799079469405471914037;
    uint256 constant PUB_96_Y = 6979338809802517744571275998765963769082630080480639980345795150542634184666;
    uint256 constant PUB_97_X = 2625599665624752671579345349832369931979154630370921333672928221584973515871;
    uint256 constant PUB_97_Y = 17969864608725748711242003233166910020754371831509186446182073285227329640763;
    uint256 constant PUB_98_X = 502226675894763136191198463856225134549357455148118959700160905217711929249;
    uint256 constant PUB_98_Y = 2575268542470324982945891808167971586658987547070659256136690362982294263587;
    uint256 constant PUB_99_X = 8915152542461776096303783543162857896085827415432089989271063759842840513172;
    uint256 constant PUB_99_Y = 14675306526257059098096787416889743532721556691036663059743262027048633611624;
    uint256 constant PUB_100_X = 11587815863699117448691959420760531252347564958689500362211824178828913738897;
    uint256 constant PUB_100_Y = 5498564693398745385342193689834712430683104528087060131702470667283440330528;
    uint256 constant PUB_101_X = 13189532679691510587597507957003961281087468487918805681810188546148197190221;
    uint256 constant PUB_101_Y = 1503672382689929456258558270180465588648083886467211259704694817948279323382;
    uint256 constant PUB_102_X = 10324515904701559051084228283629989701918264473478279945731090063883340163136;
    uint256 constant PUB_102_Y = 15083025611066118954828220546519949481924861079147236733058842705845538736127;
    uint256 constant PUB_103_X = 21614117015002385998778290208841193306054252443252499302963759314683303554281;
    uint256 constant PUB_103_Y = 19237771447445031917308652890537124409705191176056897938905208076274141826136;
    uint256 constant PUB_104_X = 11515565063156388052193861265103341122028699260942535717062486254028569991026;
    uint256 constant PUB_104_Y = 10508729885686631534278118844870575027722192614659535261185620477959776295485;
    uint256 constant PUB_105_X = 10952461229247747586143410739598535131798327232371665111598512732138543501389;
    uint256 constant PUB_105_Y = 18406917333929665066808741223201583832625385742961937197597287270376631455023;
    uint256 constant PUB_106_X = 5397406660685810716993080573710956311205347080266056528307055402276443508157;
    uint256 constant PUB_106_Y = 17563576567547221882195286597985075051248783839293330457069537959597084167067;
    uint256 constant PUB_107_X = 17268441455173540905401026566547098222684296391674998508729850773128837186767;
    uint256 constant PUB_107_Y = 7854543484434636834275469827501067664015312405036764389314222427454506292499;
    uint256 constant PUB_108_X = 11752364800440894759921182556120129197565870650944122928498959345419963580345;
    uint256 constant PUB_108_Y = 17890637792440251538708140512739824154168241343452976713423446704532391075822;
    uint256 constant PUB_109_X = 8931171903443861244694642222997106359567112902915173467588886131050142330089;
    uint256 constant PUB_109_Y = 10280924293352928479431020687180077137473775827186514310901595461701655071764;
    uint256 constant PUB_110_X = 11345093710400906634055712063510025304861931355479253582532954407563833511488;
    uint256 constant PUB_110_Y = 16299210502683631440194954378179886702618530030783312964099961892950211291935;
    uint256 constant PUB_111_X = 12638812985012694337756942254615352988640705782476896561932016564152600524695;
    uint256 constant PUB_111_Y = 10244997096595087980476376428046503359462425539593749441651915344606815057503;
    uint256 constant PUB_112_X = 14977247970256902106422076834862327051727687438554998460960689247061645125941;
    uint256 constant PUB_112_Y = 15400365640879990763106812882519191369949652552051594522040232011194424474606;
    uint256 constant PUB_113_X = 15363643279058020810987384425827818477453384994925679499061485916837934493633;
    uint256 constant PUB_113_Y = 11450080809521356210022659634173182906095317995955440610980498038196132699000;
    uint256 constant PUB_114_X = 517533692487589134494283953643961566478460559271987540728476637885863040218;
    uint256 constant PUB_114_Y = 9495430191044999171488964072276774333575682593847952301950565388421411302436;
    uint256 constant PUB_115_X = 143554682207978016432644208979218249579458724563879660714570444902137245615;
    uint256 constant PUB_115_Y = 16131817400625855670090618387399252291477651502817374376546840602880062527335;
    uint256 constant PUB_116_X = 12097766334254113910946652959676002105091497759100022698750919734789125546957;
    uint256 constant PUB_116_Y = 260333247887888441195920024387925147038853090177832687706990872223476647202;
    uint256 constant PUB_117_X = 14462519605114359140062331585020157009692995109941704750319611064160177604693;
    uint256 constant PUB_117_Y = 20442074880853139636084253870094441328316981438026963707082370609501540615273;
    uint256 constant PUB_118_X = 617840539623002192551815057956152468262896833057304654853239622987209116054;
    uint256 constant PUB_118_Y = 3999067549742204917105006912184432511895302212899158846594893419963002854592;
    uint256 constant PUB_119_X = 16673790268965433397147770130414120239530246421852462685273852012824004458123;
    uint256 constant PUB_119_Y = 9820897292232569031541575477422708009020502083646763142726426980340949771100;
    uint256 constant PUB_120_X = 4573520995467059813286321503471642186337709112487957804777402031143711356913;
    uint256 constant PUB_120_Y = 5185979546288316237382921504783687631453987610150663748750776685703415166844;
    uint256 constant PUB_121_X = 10733848085803434430881185786012266742904305023365950361755492742638709003793;
    uint256 constant PUB_121_Y = 10677393354923357100034986290199098622403407461621832236687037100407631758490;
    uint256 constant PUB_122_X = 6738223624963816139585328445198312975583483210885452409389453083802179742108;
    uint256 constant PUB_122_Y = 4812558038006206251297096911585923755153829182348921481359097296773599723572;
    uint256 constant PUB_123_X = 5875377126121124490923804017367637765454994843725613182090358855146533336431;
    uint256 constant PUB_123_Y = 13404714572469327596250698184883164408558119746939277652873564400882472538658;
    uint256 constant PUB_124_X = 13575110893949980867656113481491139610140373344073666314940739633435879346656;
    uint256 constant PUB_124_Y = 17243852898076355503506614237825245783388595295004529638105671656921114630291;
    uint256 constant PUB_125_X = 12367007283246707464079906026771668063768382412948621922834546805421524315786;
    uint256 constant PUB_125_Y = 15158432797765319291247314339732699093267567407982257571493569423642786405202;
    uint256 constant PUB_126_X = 18279114645995202249931431836472132447975555530617365047939157312112424674766;
    uint256 constant PUB_126_Y = 11017797580419506025059508839041866500090291734720112270219399970026064995732;
    uint256 constant PUB_127_X = 12926647166210452704424038958565815381533928599425506297648090899524892177918;
    uint256 constant PUB_127_Y = 11510813557596727154309964927735506139811083682554072649954535195882059741060;
    uint256 constant PUB_128_X = 13898472515614813380518853395962530424371769426813416144314386893972577385614;
    uint256 constant PUB_128_Y = 16125474168667527590745678612662889108208544569820360064837036341568245366638;
    uint256 constant PUB_129_X = 2621083371036867756802482277949334114723409281888481753651374346015360349553;
    uint256 constant PUB_129_Y = 1340555869795802582420344936968174858395138736877153846396439709231187088088;
    uint256 constant PUB_130_X = 2326550587741660915014175765936741595008918830593628263753833580597251970578;
    uint256 constant PUB_130_Y = 5589806756540402750056294204229918904492851057645819540338101942413353797138;
    uint256 constant PUB_131_X = 20221403781282519602408450914697170675049657897376264686102235414509842124735;
    uint256 constant PUB_131_Y = 21742068166038855984204601155026205980539801557472652004850085681415417757189;
    uint256 constant PUB_132_X = 11205933732835886325542366273548357606244696640852520761418587263477997598349;
    uint256 constant PUB_132_Y = 17762673332299308183949842498543753385183604697073617969164606657625882404779;
    uint256 constant PUB_133_X = 7014556619689142667662145969051543906380992695147776218530721447690767795418;
    uint256 constant PUB_133_Y = 8114282483275932452595821057133904757127329822511632169101863955988492912944;
    uint256 constant PUB_134_X = 10496981185650092241976914201584992372153613736540978962030887902026298323488;
    uint256 constant PUB_134_Y = 21850786073676908301544879379910284272094299590083813237022249301139166768350;
    uint256 constant PUB_135_X = 19725835456091664523579581141807456803522184363206633892804400829475335381991;
    uint256 constant PUB_135_Y = 7130069632196562140722542544608560250834530178229815811693241877289471332466;
    uint256 constant PUB_136_X = 807758063462752302624170313222143891172771368431474660178047970469495384443;
    uint256 constant PUB_136_Y = 11594612871218235708624995316351445501672782441169708825091498031655029354598;
    uint256 constant PUB_137_X = 17129058520196805671708878281444475214291172992812317030509256330561179288065;
    uint256 constant PUB_137_Y = 3578331762913339803957087998266520842933835147783314160416186198131137583552;
    uint256 constant PUB_138_X = 4701289584950678449749666468613187967791399501993627390102057754103612558613;
    uint256 constant PUB_138_Y = 19453148191851691626269636719645713073342458446377934703005914960898513024105;
    uint256 constant PUB_139_X = 10175244258852858827711250849383967426352758746368137898774374422688225919683;
    uint256 constant PUB_139_Y = 21468452840905984602423472171005916465792299914703124823939208496327095777113;
    uint256 constant PUB_140_X = 15239736581787669224233063680742700776009664665725319502775298066852123534233;
    uint256 constant PUB_140_Y = 8847694805300511989057608290816445303782572538948486850891072474593819420065;
    uint256 constant PUB_141_X = 16515086688049149951563751371116551544954186769630478732557801989467328014044;
    uint256 constant PUB_141_Y = 9575057865176160409996209529803738819357811230974639897774417175327071565207;
    uint256 constant PUB_142_X = 476163116441646107511045508262204598320195837399738333516011325133361710291;
    uint256 constant PUB_142_Y = 21055415448692168208600802050370628488914080670278755712379046611929135491005;
    uint256 constant PUB_143_X = 14089323355597337223031030129448933105469340651788182921083380560912845213962;
    uint256 constant PUB_143_Y = 11576912894129773136072834727650625818546424052434263238598512547096526822418;
    uint256 constant PUB_144_X = 5518571997924494895825367835214743095066979743754285987107940563315918383309;
    uint256 constant PUB_144_Y = 21582987849242035635413988410395726902692057675751731185774481692801544945944;
    uint256 constant PUB_145_X = 13994844615566746779197980112810259698511039511839516653120775468001641781506;
    uint256 constant PUB_145_Y = 9708566046356294190189714050198819925494228436427944985941274737138311139191;
    uint256 constant PUB_146_X = 1343507239298304852870884663402132631979142301520675760854644715256293051210;
    uint256 constant PUB_146_Y = 3043382692107628642363316921815912453998714632976389871213503288912040968303;
    uint256 constant PUB_147_X = 14673791726709236502700155490128347251337394140785307929426172926676337334994;
    uint256 constant PUB_147_Y = 7031242450835985614728533941201862370738802715652045045848610274065468470565;
    uint256 constant PUB_148_X = 3040607457835341101309922611375841689138370091513465877645357263978606578185;
    uint256 constant PUB_148_Y = 1714724687294435654945486465626013001280981377188113375785286024209721130804;
    uint256 constant PUB_149_X = 17117813913591452517812205363259320066780349328017429977586049307916984133811;
    uint256 constant PUB_149_Y = 15353066742487851909203170674245855688972080894693769851587247343592027306476;
    uint256 constant PUB_150_X = 9108406224235983099312288335113129769694891431716254728330283635160176691295;
    uint256 constant PUB_150_Y = 19243563333210653941629979374671742088921233919804545565048635646799858031958;
    uint256 constant PUB_151_X = 2900561190751611316914406490111658593572615358136693040220700226093145446653;
    uint256 constant PUB_151_Y = 16414413173585064919101052912306033934512600703372105481557493441252655433121;
    uint256 constant PUB_152_X = 1636875647442840533424267455366422526685382144895892680810097400479468147825;
    uint256 constant PUB_152_Y = 7188867504791837626327059974620120196251800020677641008027702029076945666920;
    uint256 constant PUB_153_X = 18635245417259991497837676911417624469257303295257642157191279150608957031673;
    uint256 constant PUB_153_Y = 6862070253392004942135674827886462070532605692158157358632803437718457726663;
    uint256 constant PUB_154_X = 4833949608087558147509248619784367606613138095116201266265685978419538791837;
    uint256 constant PUB_154_Y = 8575998939463984062686068308041951448279709639884750627472419614520093254227;
    uint256 constant PUB_155_X = 21874030705715812132461493782096683819340033936391555860461620181662734669993;
    uint256 constant PUB_155_Y = 19177766307112751141149285726070189183528382272630463166724694337957436226446;
    uint256 constant PUB_156_X = 6557990375745404900560421958615146441984121976407002347037908558186874573045;
    uint256 constant PUB_156_Y = 10229245424264226509768040242616449749527996013570255883733375206735037560204;
    uint256 constant PUB_157_X = 12378418547665549081849880592219587426050484329269978129740472339219477066117;
    uint256 constant PUB_157_Y = 8755432287233141916646836694801801333695103489366139878085519163169280439603;
    uint256 constant PUB_158_X = 11362385069902269317361732190442991188943499048276453139414955375581090711343;
    uint256 constant PUB_158_Y = 14730170196427592466423498885074685570857211547554858326974114760348979306827;
    uint256 constant PUB_159_X = 19745576545518030700085975242955867768931344536592434073602163147156478391584;
    uint256 constant PUB_159_Y = 8574570576389417571005321325385945190938445734050030832758932119790860695348;
    uint256 constant PUB_160_X = 20357602738508575133932743346114174064325983076754576709383557905094329418073;
    uint256 constant PUB_160_Y = 3898777817918472577169023461018140787628917857048994635780196464125656918092;
    uint256 constant PUB_161_X = 8708369513172739699344806376414575311879252950033876236122581589372452348007;
    uint256 constant PUB_161_Y = 2943781225911100741972917450787209572925324745319775492504988755996180280713;
    uint256 constant PUB_162_X = 2178465212503593116324486057862122376534344037442917627173811523145936504193;
    uint256 constant PUB_162_Y = 17595803657935466964628321471829440351665351070602703263481043154926896303271;
    uint256 constant PUB_163_X = 414940735287728602481848095358532831471758543382887194744159017069305647026;
    uint256 constant PUB_163_Y = 18758219586361610684605767312307800912368259165350609655171780626003800540267;
    uint256 constant PUB_164_X = 19569147171113769905461332004879839169343772851320568503475958201352823556290;
    uint256 constant PUB_164_Y = 8899018541268989118500976527440235191674311833364493738916168785516809607994;
    uint256 constant PUB_165_X = 2191297362180750114195204389466182768380916800984274386814253956652503454679;
    uint256 constant PUB_165_Y = 13294723534722454276342324625427008948654088823539824853680007209201313857737;
    uint256 constant PUB_166_X = 673311355630298603050392563437577191578831980259789711058341457917070964169;
    uint256 constant PUB_166_Y = 2662298972051549683662111679292364481077581399310004413347515281471799960745;
    uint256 constant PUB_167_X = 5124042150540182685579009421236014532261164449804026206755731364559208014288;
    uint256 constant PUB_167_Y = 20465963100454463146099615218253236834111144980793402664428177155561585114445;
    uint256 constant PUB_168_X = 15681259163379809144379835452183312340843193466496807926184538971598033417307;
    uint256 constant PUB_168_Y = 6802774438848369569515705915167012511476757473243595777169325666116882067929;
    uint256 constant PUB_169_X = 2157100274191498969209282946588287694939438191567093177077201886241970002835;
    uint256 constant PUB_169_Y = 15704752208131593041899184030421375620982518666148853641394565225779035439319;
    uint256 constant PUB_170_X = 18581283328269634374881922866402722515774569827928440382315196973636282905162;
    uint256 constant PUB_170_Y = 6257819579881598315300462958053570659236015532135550855112776902979972608215;
    uint256 constant PUB_171_X = 21525998938202872102957474306197154689085470973507002320938927757822510904642;
    uint256 constant PUB_171_Y = 12337731958317418335418365158750731776207523589851785147781558623133680671849;
    uint256 constant PUB_172_X = 16362511585341960788872006947046444058359918202784945477879879690597694189240;
    uint256 constant PUB_172_Y = 6312200813218033390084192386966520610367142110799629721531912410403584141121;
    uint256 constant PUB_173_X = 19523222806730698048135529743905256329809686411097745145640963473407158982235;
    uint256 constant PUB_173_Y = 13606333827865019359784578711841852441726591112978053547546051496381065857297;
    uint256 constant PUB_174_X = 15732829065760600057705847247618300348127306731425525019514586177835100747065;
    uint256 constant PUB_174_Y = 5811554952727096382554519294382944502430171157670355649510292788898914544612;
    uint256 constant PUB_175_X = 13487250264431917178109556607877803044331951519425710418127905046014905745264;
    uint256 constant PUB_175_Y = 6578672249677824460110296158956204458941622279979429316685966753566282057965;
    uint256 constant PUB_176_X = 12376038270982264790023159717971053077439350377387355101167763389001357186082;
    uint256 constant PUB_176_Y = 2032461531062690772409519455956485022923367442429778373902298314222690786943;
    uint256 constant PUB_177_X = 3399242021047538775107955594015125680465852193343343683935489864957495048094;
    uint256 constant PUB_177_Y = 16196398162498732952767391002137137537671884042927060546102289504807168550204;
    uint256 constant PUB_178_X = 18940887647591456566967611110276226126997399988657563872222443436557470933051;
    uint256 constant PUB_178_Y = 6982570310285352744956803063014559143294465621672843282100927428991064314562;
    uint256 constant PUB_179_X = 17702893030060872654856036192735317847546411875715282127256632960218549574438;
    uint256 constant PUB_179_Y = 19231157261216474761649046723381101109092169243514930729495697839907361380116;
    uint256 constant PUB_180_X = 2990220478408992705564723419780962619976584635083049854530080930960179534504;
    uint256 constant PUB_180_Y = 3199484792464532220206320233726995102791220890288701572240722551208440902047;
    uint256 constant PUB_181_X = 19641365916307402916652457270084223099806747436578280116570398756155116644394;
    uint256 constant PUB_181_Y = 17811862302636044748130106983474082776853577917043598450106387484511649793387;
    uint256 constant PUB_182_X = 10693551137610338186860905838505492977740785013545120372821563499419292369786;
    uint256 constant PUB_182_Y = 15119888267750867870510587258968972969637217371576567336675975730582768482187;
    uint256 constant PUB_183_X = 2853736712028700830740599915391216986325873444127355760853011926328658299056;
    uint256 constant PUB_183_Y = 8039663472507117655667846282506194021906411718526387554817663638161573096451;
    uint256 constant PUB_184_X = 189568991471775084798185936090676103373230020983005817764385686394243124748;
    uint256 constant PUB_184_Y = 17310853534586292480028629071066341170831155969861781405907116211084618232358;
    uint256 constant PUB_185_X = 1107394172428951626049326339368228864652156393238562875985246311287055742516;
    uint256 constant PUB_185_Y = 13712445876474411455496031074473642347417618717035468522615825288406343560525;
    uint256 constant PUB_186_X = 2711136125651088646083828853725018860212693143339936472251301242227641878499;
    uint256 constant PUB_186_Y = 14084894933211801491589123474154791251326681413875784077197955221197959619965;
    uint256 constant PUB_187_X = 9755877338540203748033398645545554766744663140840739315591383053683228987144;
    uint256 constant PUB_187_Y = 16706006272789181544996184582619655411548774995375375818116481501248893049552;
    uint256 constant PUB_188_X = 3450066387152715679377120433408048021312208395863202752437776760269213484267;
    uint256 constant PUB_188_Y = 20139873167506277488643694534222134282212275946797182218660806380004907092581;
    uint256 constant PUB_189_X = 7996536579055628314739222735485600851158331735122627152947217022486747264508;
    uint256 constant PUB_189_Y = 11401714982740165186797759168036050112025057370369476570075965639832176079848;
    uint256 constant PUB_190_X = 21807094258905772430732126849577812811321514012664496117543555101051719136621;
    uint256 constant PUB_190_Y = 6037481369420892796425639057205648585631162628791714206539471640456001705705;
    uint256 constant PUB_191_X = 11883673012024181066284509504320618601941489720403976408580751281015186300447;
    uint256 constant PUB_191_Y = 21354288266395507445062125103947110416104972462772997566855427371607481644660;
    uint256 constant PUB_192_X = 8774940393535769084155149002679833942623003459532410641811604164222251023401;
    uint256 constant PUB_192_Y = 7295745089126508810128077588742643936500654952395058247373437640717597006708;
    uint256 constant PUB_193_X = 19570433389759162335451039909177226168374719861509363231317679182647019564468;
    uint256 constant PUB_193_Y = 15808570295405286432804503126346857459272371945236775717738861007286461208957;
    uint256 constant PUB_194_X = 5762149929772748020062229347018708048244446826114189507631377274664266063257;
    uint256 constant PUB_194_Y = 10530944550825678688157586964027572195527841074563858084535202559940916883868;
    uint256 constant PUB_195_X = 11317973440288321426366854044950988786555873907234712873360230262025048277047;
    uint256 constant PUB_195_Y = 18985626967945824860687557589104828448175736729837123189190108997282752502597;
    uint256 constant PUB_196_X = 2313593706705259858491901501685932688793931491343464465205897325876072379090;
    uint256 constant PUB_196_Y = 11430319980041105614927399058565416873337534833038421268844163513624906625193;
    uint256 constant PUB_197_X = 6431181735458150053831804584703111933975287448762811956954871594566867563421;
    uint256 constant PUB_197_Y = 6354389898955613441266968418009415901643175936179413517474097538605072473688;
    uint256 constant PUB_198_X = 645093333516622264261960513618966197908515214905599308726840220235521995376;
    uint256 constant PUB_198_Y = 18627611178920301666460742261900730019787222608034935172291690957176998575659;
    uint256 constant PUB_199_X = 248150077062875541986516366779287440553826969219703971960261151891890137090;
    uint256 constant PUB_199_Y = 4448981064971701931928916872693315926048357082301603055768403396451863290933;
    uint256 constant PUB_200_X = 11025146476288753865332674941875569085590664385001908994849965227885246156740;
    uint256 constant PUB_200_Y = 19543701453881163316252942993097463755151803982811540118184349747774920418105;
    uint256 constant PUB_201_X = 8772080826078657811755645144386380844410502746712740079830818419675703913709;
    uint256 constant PUB_201_Y = 17181878778190857187183800911549260038704311176221307711064405012712025654030;
    uint256 constant PUB_202_X = 14683833219155437186700306981746713084319199888812896689672480096767330106548;
    uint256 constant PUB_202_Y = 12309393784522073766281021161709056088193442771170755167896273101425287665303;
    uint256 constant PUB_203_X = 6272599839718814907309954039798419388862892426097031941582606653028314759640;
    uint256 constant PUB_203_Y = 8558818627356511218667295240308439687874903786063971351504277168743205046351;
    uint256 constant PUB_204_X = 19128466551898815747191951154513261988850443176442275456086926718272939245513;
    uint256 constant PUB_204_Y = 6793502130834377096648778874587490411557597877412630131688495515552153628270;
    uint256 constant PUB_205_X = 20501257387157582248201087139235335295758736524258880969069530388262126700596;
    uint256 constant PUB_205_Y = 21787375779456402041037095412124217835954154071196227027582008281380879486335;
    uint256 constant PUB_206_X = 1820481447061714416159731157378095088583859411711987992648032257260013556020;
    uint256 constant PUB_206_Y = 17977156742143875647849450320380249069581220392905668987790410361829200542213;
    uint256 constant PUB_207_X = 17010557234484555557016005918340354861638850889967760284353451940457091316661;
    uint256 constant PUB_207_Y = 14610739014020235880655621494698228078942572933504633759153029351901062931912;
    uint256 constant PUB_208_X = 18554432853627730153804434035185733102350827867074074319091187877736612276111;
    uint256 constant PUB_208_Y = 4109799369009960554511283504285463844447857434449868829472921294692863103973;
    uint256 constant PUB_209_X = 2901438960922818954345161154535142120696940913591934973272020903460352780562;
    uint256 constant PUB_209_Y = 1198688178455900731555657618836205670013855878621866585740610164962036679340;
    uint256 constant PUB_210_X = 20576429873253952027201241177585024801965785332824265360290264187058950924213;
    uint256 constant PUB_210_Y = 4150305954519962852150974401926951637623502465064486010082783507305332554948;
    uint256 constant PUB_211_X = 17626907419633800999617546737933611773517935595972927890304885946443691237305;
    uint256 constant PUB_211_Y = 7806556105725771282780934149005497667595678753561385747475511057001092024615;
    uint256 constant PUB_212_X = 11918531806762211085286286696964143443688713087633870113775686534808622423881;
    uint256 constant PUB_212_Y = 3045253811338369503684087547407565864794161458924366435012319623225504040968;
    uint256 constant PUB_213_X = 15754973074734107163088208463468139805100890233107397835350022841280817119439;
    uint256 constant PUB_213_Y = 103460334035555755135426756187122712931860455645068117769410888125909899742;
    uint256 constant PUB_214_X = 995940556686326273083759300208967586325178668098398977028027753610902150939;
    uint256 constant PUB_214_Y = 7925015950370794545390857001398753697672078224723676313816588452929097848707;
    uint256 constant PUB_215_X = 5266480584797922224544935068105217271268438098632425741873113194197070364418;
    uint256 constant PUB_215_Y = 20929956392626763620410848970709352214399597075909836289637704598839560885901;
    uint256 constant PUB_216_X = 17129307557277811985322213230924959622706436859672075486237024707411905874759;
    uint256 constant PUB_216_Y = 20614568040809719421821059700852300966298371117954875821570424031092740844936;
    uint256 constant PUB_217_X = 9382741912042729974906676210896891800601218477612619500782038192131742807962;
    uint256 constant PUB_217_Y = 10160696588932804533366650338977137611233214997598045077337685241290200434894;
    uint256 constant PUB_218_X = 20016305901005768807612131268672081796943864642981935169200217501773865788390;
    uint256 constant PUB_218_Y = 3285985324977484688772201569502398740054886154460599968686619309836311878476;
    uint256 constant PUB_219_X = 11381280485752918302760450571141842826785986218849055554482228562653171558832;
    uint256 constant PUB_219_Y = 21436561625095102016268097279768976300412913400930089233404413188547665257371;
    uint256 constant PUB_220_X = 14691702275511097502138745944488721082101501733020594070372050131158213521762;
    uint256 constant PUB_220_Y = 14425746974433199764523240651502385644394618682994834701199510125602262467809;
    uint256 constant PUB_221_X = 1081523980700427668756000580839172909815233918325303879824870629092642633685;
    uint256 constant PUB_221_Y = 6005067692244651555995684271622032125725300900647008122283208020637662407385;
    uint256 constant PUB_222_X = 17532783805454972262305288770003898721698708158189001789778917579446692932738;
    uint256 constant PUB_222_Y = 2500186745278824706422192782230624904368102609515479555442188883850383318508;
    uint256 constant PUB_223_X = 715541291040129096124259863263570840248843936215215865575478327465785026117;
    uint256 constant PUB_223_Y = 4198805356960840622066922392211852669616683989691638510229322559852731430945;
    uint256 constant PUB_224_X = 5159631911490539501992739066631909701598187463441728158515451436028328354598;
    uint256 constant PUB_224_Y = 9688533355046771328212092191437359564162676119108402479390976087632616204222;
    uint256 constant PUB_225_X = 20545680987206775427294473363483157114481365327210794312740018867960374774749;
    uint256 constant PUB_225_Y = 18092706261050398356691834453887852214860410602454469457955670143755440227275;
    uint256 constant PUB_226_X = 3935641663346635748181870374605778598488103092150797896377340587045041087707;
    uint256 constant PUB_226_Y = 6059590155241976227800253623292549131871748119422295326049509493229745980860;
    uint256 constant PUB_227_X = 15822123338331750153487558687980021840081801166246513164139720070840792467322;
    uint256 constant PUB_227_Y = 11270374250892769707929935057388166998171239525274728746157405631664139420719;
    uint256 constant PUB_228_X = 9257117739473623116209422357260266724530046867269579598286162326337339663010;
    uint256 constant PUB_228_Y = 20330292274115806342631988215513872391924692069244149266144084556651185171758;
    uint256 constant PUB_229_X = 10855891596909591411731691561132241096532407517673474047832708065085017137615;
    uint256 constant PUB_229_Y = 20988317227622459060110298735455519636611988645762966685336615303687259803717;
    uint256 constant PUB_230_X = 6731542294098160190493216660706403285933910492369718661498707434898305211682;
    uint256 constant PUB_230_Y = 3388044054159350212147910559065577298998578160084542628094237611135540416477;
    uint256 constant PUB_231_X = 16870164101305337751952032207854920240865063448449070453350826026272098242932;
    uint256 constant PUB_231_Y = 6976544438163014965857142301685750949211649801670202923988572939730381209730;
    uint256 constant PUB_232_X = 12056023544640167174818132018686500931183308560264985607549601190304546572176;
    uint256 constant PUB_232_Y = 18763934279050148283408444594598691298995260761038898947105047107001596224399;
    uint256 constant PUB_233_X = 3159127367169371138563520024973419140681822524920907041021531759682642839572;
    uint256 constant PUB_233_Y = 7300405417027906806918742156866213203623967037528476616789006989314290648884;
    uint256 constant PUB_234_X = 7680323937179740580111994277275128958330201722474897007267241480741308450027;
    uint256 constant PUB_234_Y = 20713892421413789343118275572886413447175256702903250907918096740838301867269;
    uint256 constant PUB_235_X = 93601574053220767938520139900174660114768658253234011024605932466048239481;
    uint256 constant PUB_235_Y = 13114602283253250616016138315614992245850617448462889804819856534611023638439;
    uint256 constant PUB_236_X = 20695792715444989642606099051130051101134774555915065044718935765849749504117;
    uint256 constant PUB_236_Y = 13309359004555067981071071782932833236978805332928230367808804667636115500699;
    uint256 constant PUB_237_X = 13756087927590503128677404515916149492363128166293789075881622971112031870424;
    uint256 constant PUB_237_Y = 16014675609257675725344202864383764317177962563269450405563283666126783911827;
    uint256 constant PUB_238_X = 8006403768054104373820759410500132211221368276708853672237109716302328139077;
    uint256 constant PUB_238_Y = 4991600681714929756041283202293177083681010853370176019982707606316500461289;
    uint256 constant PUB_239_X = 4863836508899678995483219001565377461302886666519316174673286892691320054044;
    uint256 constant PUB_239_Y = 17318868537905081058768955046126758309088108940010048762558076749940893974870;
    uint256 constant PUB_240_X = 5537383173679160178209981849380269628054672094434516332390978120584787958369;
    uint256 constant PUB_240_Y = 9453002681324307463216606381815246650590406228187740374374089263386497914567;
    uint256 constant PUB_241_X = 6312909928028558573579142006343323482757038648074195529446795149325074333860;
    uint256 constant PUB_241_Y = 4218183994030946512110528533061426436545912509888515812938890785728437218165;
    uint256 constant PUB_242_X = 7852373414516363015551002974611091782446642816315147016027877833743587825048;
    uint256 constant PUB_242_Y = 12474244996629887433319974479515258333774806171085607357623366488423971333019;
    uint256 constant PUB_243_X = 5272733156675239499974197214351322210755712593714460232018870514388863195239;
    uint256 constant PUB_243_Y = 14065078721702405690176342317698140274044186470145765497934955693250172484309;
    uint256 constant PUB_244_X = 14343216680336112849815739902305644901602092533040148305283085894354002461904;
    uint256 constant PUB_244_Y = 11550360557493388385088078642764405105854965790993282301486588046503797308501;
    uint256 constant PUB_245_X = 19076100169377898584605434799914476755024302970091286764675456543114251755871;
    uint256 constant PUB_245_Y = 20494011927391757780839258947612640284461351695830547300567644225565152169897;
    uint256 constant PUB_246_X = 7396841373474253742442935527028651962560843925841274958463717520763654585544;
    uint256 constant PUB_246_Y = 18513682503578795480552661852296559307304673323292253821996975394632116560437;
    uint256 constant PUB_247_X = 3644327307484661085424440352396227391088251278486974144347859676596482662031;
    uint256 constant PUB_247_Y = 17220641437711629857029193566891223852420824224720221839411762036393667938347;
    uint256 constant PUB_248_X = 8179608209455806461444932280113367619612458277270180664618655929890279038176;
    uint256 constant PUB_248_Y = 21341439881998212114730361011581207094693197369773666645827550785198698434741;
    uint256 constant PUB_249_X = 5807194281462080758058191302022039888968653562669113583828710605592159402754;
    uint256 constant PUB_249_Y = 13764799861427699476599657451252169193609113235344075317392327672066477149255;
    uint256 constant PUB_250_X = 3850745095009561541161729448815607998105467877112552224529697492346292915808;
    uint256 constant PUB_250_Y = 5586674102628348018729316302724887934642540141192820485762606184636075141684;
    uint256 constant PUB_251_X = 6205149284344351481422419545015413282982748792192250580395687084014674206631;
    uint256 constant PUB_251_Y = 8650912498496285028854547350024613631644055528800922926461771696760816012690;
    uint256 constant PUB_252_X = 11996562771634402376900623340365026045160912709607416685577847628251949595431;
    uint256 constant PUB_252_Y = 11631546425422877995379139055833635443999650365608770898442819542537845266016;
    uint256 constant PUB_253_X = 11045325189613469572643060047052503876066352109682410747328962195174458473334;
    uint256 constant PUB_253_Y = 3331313629109799473778425918627578056793221524572211817541191062130926672019;
    uint256 constant PUB_254_X = 20699992396989310601929748016646459273291119562691557936570405567046032003230;
    uint256 constant PUB_254_Y = 16313667470381634522916641755970859169722813968582104964351964516761500166033;
    uint256 constant PUB_255_X = 812652623480258913155446439351152482115336874695174780403068930622979369438;
    uint256 constant PUB_255_Y = 2516128373195004044322224724689370127076070568523461075333023037115316612539;
    uint256 constant PUB_256_X = 8600084165751813039121809919592375591864248481613786428868094542607196109938;
    uint256 constant PUB_256_Y = 5323777735304878839785737007785194070177227383349435967240722133842586207752;
    uint256 constant PUB_257_X = 10239676635499266795579941886465954686860141253253621010477626782059143416205;
    uint256 constant PUB_257_Y = 2156069635182460498432012277498825804093869542944516222993817843407868584361;
    uint256 constant PUB_258_X = 11941175978937604608785721926497594301113762852146886841510155395136476467237;
    uint256 constant PUB_258_Y = 18915001379152643875568746674260294014602836568667644171543687922321188451299;
    uint256 constant PUB_259_X = 20686838516761984711957236000002907335366433046572439512008331932395029494852;
    uint256 constant PUB_259_Y = 15842367405777565144132797077849712971927647704634705670352764349818492297093;
    uint256 constant PUB_260_X = 20193697135227254215018582551441587094191135213076214406550122249592028168534;
    uint256 constant PUB_260_Y = 14344766162596450396449413185788722274576270594445039267200915358998351667101;
    uint256 constant PUB_261_X = 9098055538281446447789333307691456821343388625543725151821980646768118951372;
    uint256 constant PUB_261_Y = 17179696464198087508700502120557773184457656716907531944321055079775134456246;
    uint256 constant PUB_262_X = 10905702030737490834222323296289034505566131597823085687957973789602500214361;
    uint256 constant PUB_262_Y = 19373654236794181601721546547468518487947609430212799053392243410870623061002;
    uint256 constant PUB_263_X = 6008614617206688552077737616474737337282210337862738312539479123175410398849;
    uint256 constant PUB_263_Y = 11282578488549570000069775315295202015481966311314176815328120544453459025250;
    uint256 constant PUB_264_X = 18420762267274040251952449605140971848124641415516415407555308139561211492866;
    uint256 constant PUB_264_Y = 19735437395136497008592610979164286538302668942642973027497218689054283647453;
    uint256 constant PUB_265_X = 5692294084521203440464216186636726374536446929255685905873512091501863079954;
    uint256 constant PUB_265_Y = 4571924545050705305752232200025691814254696828096827032659830495852933794325;
    uint256 constant PUB_266_X = 17430717985240004883663701676097730768498488438895508158848514956180672935544;
    uint256 constant PUB_266_Y = 4081912087959244538127867441073428610815144605794255093322752342451573037406;
    uint256 constant PUB_267_X = 2100383888391400762988840704051039012925627194456859388954773227240803509981;
    uint256 constant PUB_267_Y = 16127617293413718546034445206587896308494906954264358254120702455624546986515;
    uint256 constant PUB_268_X = 11237953263955835506032401051541278572798324857835455927705927924583698687912;
    uint256 constant PUB_268_Y = 6111769936656465436406981404440680701501882244971241404127414369974584550642;
    uint256 constant PUB_269_X = 2030119852392077576024815093751840006466066127694635968351207111225976140319;
    uint256 constant PUB_269_Y = 17271330243214285087178344758553516319875016406545290785537591276996224094729;
    uint256 constant PUB_270_X = 9580422061561242281481829795307465450452716551108027218248831107959618860910;
    uint256 constant PUB_270_Y = 8617668230547233900152240707858359329209764990775822989507926555400301059050;
    uint256 constant PUB_271_X = 16314397493859366625773038148057342753990659760652299154451355859520060261797;
    uint256 constant PUB_271_Y = 11144900476904347898561956691282127839817576353959640234086312718891646529884;
    uint256 constant PUB_272_X = 17598096943309874657269736603181297915379010194738419016091218409821963140215;
    uint256 constant PUB_272_Y = 11621492514835640474525668495864669972065290865905002045970125677025546136359;
    uint256 constant PUB_273_X = 20192006811447381359846773990525375051272774835104078049471220068248694065057;
    uint256 constant PUB_273_Y = 17878164011924252001345494003994591408297096116260607047902501166081771812780;
    uint256 constant PUB_274_X = 14083894749041408581608957491458247981884164794505715310988662202109740715134;
    uint256 constant PUB_274_Y = 7641854121436455021076661768149102733031857090506237483815753281289056119640;
    uint256 constant PUB_275_X = 11900778719890299477361095473714176945488718572537156480509001087074629819857;
    uint256 constant PUB_275_Y = 14169384475932053066667642384784072194377439486659639674409071909511243618694;
    uint256 constant PUB_276_X = 13538588989108419188293535792041821859798637977174723431200308667587005486193;
    uint256 constant PUB_276_Y = 14408156344414608572205580817770050360106111295253616249966142506552626511256;
    uint256 constant PUB_277_X = 9811554515257613824406951768893349399837522570010337260885947906311652210136;
    uint256 constant PUB_277_Y = 1815735722682366759090785464799057373753038834585371703905662435707446968657;
    uint256 constant PUB_278_X = 19060168706683600226711053429494747748067069653283930988376556177135024803993;
    uint256 constant PUB_278_Y = 10714417362581777099000874678753033842041418119791456289202918644072389015158;
    uint256 constant PUB_279_X = 7299356305556789948045296944237799579915600502863688573017198703852461920058;
    uint256 constant PUB_279_Y = 20065208189182973908359477301009546367751725263183981889998302615916190518445;
    uint256 constant PUB_280_X = 898540732730032309577814789874770616554898527820897295086775403772444809631;
    uint256 constant PUB_280_Y = 8894099979720451625723633078968735578680955632798235305472622976889518952613;
    uint256 constant PUB_281_X = 11368738417847152886381239423152963374984144585541467279250509561235362514599;
    uint256 constant PUB_281_Y = 17248056677117740728566426673747147422155930119768149165445858655955050768048;
    uint256 constant PUB_282_X = 1707130078902511386984561603950578366377211791682869098162823457954080155832;
    uint256 constant PUB_282_Y = 9094746710068936302912648648868094299141797384965500803537982824688718728689;
    uint256 constant PUB_283_X = 11459500954485799159449457967991157174833528759134728061173498433016872045612;
    uint256 constant PUB_283_Y = 14921054749126564981189383919743387114927941411188253861082343854638736987431;
    uint256 constant PUB_284_X = 12072695317698763607202954668100208260406037243736522978721114634414109722171;
    uint256 constant PUB_284_Y = 4012932410746235333741545143172915868008848979070241242052972181443212411692;
    uint256 constant PUB_285_X = 8628460205655660236325273381410373864491397120257152435010077049494473329755;
    uint256 constant PUB_285_Y = 9705751545770489717084643508700642014883632598741612738833924471160196583548;
    uint256 constant PUB_286_X = 2808707050940883144106862085663519912575221908047084903653907286920117385758;
    uint256 constant PUB_286_Y = 3217932205534178643550237609486768490960422313785715857260179228928919454912;
    uint256 constant PUB_287_X = 9546414561670384631523952464196994143097270230637454777542328571152442043512;
    uint256 constant PUB_287_Y = 13473418593190278742716402410175498111702946431237661273561289037338933385828;
    uint256 constant PUB_288_X = 15543637993633798503166049907443510428867531297918147428125353850816123455491;
    uint256 constant PUB_288_Y = 14316606912600179117821488115406843726018310228625216895916333615573251823240;
    uint256 constant PUB_289_X = 18387936097959439915935074168241088935197268848374659403134442170414452831185;
    uint256 constant PUB_289_Y = 4379118873118389440511483759405555021913412416874224304189502439389619140749;
    uint256 constant PUB_290_X = 19772209662289023318749043755974750061041250535263975416788614799369641459587;
    uint256 constant PUB_290_Y = 18792666239106941903746652861973024631654210116151230449553026545487285765913;
    uint256 constant PUB_291_X = 1334987685492579163008582154330044848964244782078159147393804185048285793112;
    uint256 constant PUB_291_Y = 1152149339399671248961355317994214750312846324101280259930670390055128623982;
    uint256 constant PUB_292_X = 21868123576151239910870504492139634771808339876262842318217128380661089927388;
    uint256 constant PUB_292_Y = 4301808571774433187992936806840256282404597642058339751489661920025393011129;
    uint256 constant PUB_293_X = 16868413221288499796056017143081689976453022119572938217928057345756958753122;
    uint256 constant PUB_293_Y = 12313428568733122296501819085084346971583454398495999204133606870847068227226;
    uint256 constant PUB_294_X = 7832042506216313067020257898669841014869148939414225893673206768076143786948;
    uint256 constant PUB_294_Y = 21511764799968296701346251394204367264590355349075911501811275002315476748549;
    uint256 constant PUB_295_X = 4699612653854758107350043833212887423351835862352121084913699061355080934969;
    uint256 constant PUB_295_Y = 5350423110833735023565285250435143860284670668899144395554058940426911145401;
    uint256 constant PUB_296_X = 5565449998831698028581755772712763866006450977431272036905504599874968710107;
    uint256 constant PUB_296_Y = 4556032627203492514422562214480713259482764195314781898604295618195526013981;
    uint256 constant PUB_297_X = 14580405450643418783607664023795633772397490224415586223013480557302536515932;
    uint256 constant PUB_297_Y = 10430405852719762766720207119841052371618954923179024738767395549211131223102;
    uint256 constant PUB_298_X = 18225533238189456305520202188931237239382319093337559538932375732139355974579;
    uint256 constant PUB_298_Y = 5823090731861671921930186655414522801020439903256066333016773404527237441396;
    uint256 constant PUB_299_X = 14957563112813005082078174959205552648253837922738268356597782421628485285096;
    uint256 constant PUB_299_Y = 4385121444896047911876327017320205873850303849188863178233276144641463837035;
    uint256 constant PUB_300_X = 16837104200062816055585265044156892699665054999502591599182588365983196848224;
    uint256 constant PUB_300_Y = 11803972520885474128502689463383995341628897392311840506779908168959145582476;
    uint256 constant PUB_301_X = 938558361319753724595752669727488977200872695567613355342738558187428906313;
    uint256 constant PUB_301_Y = 13378403787445295642751821957773588750295999555020755610744944360215380706921;
    uint256 constant PUB_302_X = 8373690339235597597743797381004984826096824316862362552192900804262364308730;
    uint256 constant PUB_302_Y = 14141515142472931353517799669462047245557737223229049733461365593132143954673;
    uint256 constant PUB_303_X = 1569646952175153159453089679402958735944763343035588277917433278095398434338;
    uint256 constant PUB_303_Y = 16010220572228489687977759645211446889647621446366698063013467168356704458845;
    uint256 constant PUB_304_X = 2135523538308450514136354223801666662217120963971997309908992180525399253906;
    uint256 constant PUB_304_Y = 3267052093446768478481644527446912835263537415445514652876045119474288035993;
    uint256 constant PUB_305_X = 15799319358398256220331641857080826893044908746994753424045057784050889869252;
    uint256 constant PUB_305_Y = 7235591555513322748161718297242080131523167573616007538672442759101557319011;
    uint256 constant PUB_306_X = 19296963407917444608909689673469336261616355352709394940591772746298163604396;
    uint256 constant PUB_306_Y = 12048456106203537259094241614589818751095196276657291679658663401330199152441;
    uint256 constant PUB_307_X = 5857091982731613601635666113888236118997775413064435605877759047062095533097;
    uint256 constant PUB_307_Y = 13890296729520609034606041805286486888171665718269275537402674681674168714368;
    uint256 constant PUB_308_X = 2952056173378298584927153128264016375505752309391194254605288579965847025387;
    uint256 constant PUB_308_Y = 7748616842975782532219528732296489495922663161877343153695359501826882832154;
    uint256 constant PUB_309_X = 7788768212980294143794423356496166430952910606020311894636993254127341509409;
    uint256 constant PUB_309_Y = 15499990257997314376408110951968934603824897827910779010621642539965145648935;
    uint256 constant PUB_310_X = 16909122433216464047735574036662631122087863890310897143649540433426526513755;
    uint256 constant PUB_310_Y = 3292543173532206242703721432070236869448225763727005805138879920510465135704;
    uint256 constant PUB_311_X = 1526663624425790746565763874640982799163958079126760795641052974147504420781;
    uint256 constant PUB_311_Y = 2296129160746192793259440835346402400969705074357621852642829002043118214660;
    uint256 constant PUB_312_X = 5506781149311411129964593647336117284162857556517510005621166332424235592175;
    uint256 constant PUB_312_Y = 14690339590322337696412267137431848328510743295367430695779899787656326460263;
    uint256 constant PUB_313_X = 20299711671369239023193426994447220147014994078969989818534091165967026962150;
    uint256 constant PUB_313_Y = 6334211963650110951650359856481076264762099553929905010049207736136803224659;
    uint256 constant PUB_314_X = 20542803521107801055565146556072832844275086101747227045446060956195071968515;
    uint256 constant PUB_314_Y = 20486041137307857232322317456649941016543783225542084231534465269665462947579;
    uint256 constant PUB_315_X = 11810817455100916101172432419782313801884358033279004754465918529422449082390;
    uint256 constant PUB_315_Y = 17969205932432223287531056835417839551583085261812381410428430058665662802949;
    uint256 constant PUB_316_X = 18919706073844927893485165863704191341072911350138941370474584061520885816214;
    uint256 constant PUB_316_Y = 16784672473619339555936043737394805000415876938243596041047923849573647155833;
    uint256 constant PUB_317_X = 8539140277044446401225038106121689191750289768800525378811659482003315470753;
    uint256 constant PUB_317_Y = 9243752576712529438555044977757764277112449572391630155306646460568948604195;
    uint256 constant PUB_318_X = 19575260277040679021160413962698535173198060742114772207328169155840546268943;
    uint256 constant PUB_318_Y = 4960329893480031351128318228271580039471602289865214914915629387647142292030;
    uint256 constant PUB_319_X = 10425849732362747496229428250730538017445831639491562755777429639255510121993;
    uint256 constant PUB_319_Y = 13483476353511028824650379531540350693063403430472023190942131412652481321886;
    uint256 constant PUB_320_X = 7067461358734692711168403159291105517485674283740289179435182354232057580834;
    uint256 constant PUB_320_Y = 4829222575404826455724119357666315948686529946882866633433733948973728537469;
    uint256 constant PUB_321_X = 886155210964409642814390143694079167181320411370973572180099432370283263580;
    uint256 constant PUB_321_Y = 12597086103896335657308284012371223776653580000111848902399448715516759644125;
    uint256 constant PUB_322_X = 896573362675992600178738111211696651863633044241214079771106100592260325655;
    uint256 constant PUB_322_Y = 7194432742670392500719830584140918596387469894230513796944467660886790528666;
    uint256 constant PUB_323_X = 1121632801139962881454894829641804171368008642822757754252048054617478692859;
    uint256 constant PUB_323_Y = 16261949524767566564363650987202996764423067665679017518908880120103599764626;
    uint256 constant PUB_324_X = 15969606851299657749225520858477313821083700880856816262055904709194870565116;
    uint256 constant PUB_324_Y = 43873075665753510744802909820347892597896499198946990600628635011511790092;
    uint256 constant PUB_325_X = 18119142152081293661102751013197405319287337005356079647817481854092831819602;
    uint256 constant PUB_325_Y = 13494784135047522776298810709900809553945252593961062713364128997481794305953;
    uint256 constant PUB_326_X = 14877447679523115852380520169047375066777670746230688880060906037196454550801;
    uint256 constant PUB_326_Y = 16808545543406524018570038972727622459921503782988527681316827247848805816205;
    uint256 constant PUB_327_X = 6126527420149399144976866872552984850425040536916864395236198221251549702735;
    uint256 constant PUB_327_Y = 3584883163376471458069680720183451850722753831538521921608894149837500141840;
    uint256 constant PUB_328_X = 21315731057942050590735562105725196480502358092068103568150242287806472885922;
    uint256 constant PUB_328_Y = 18007147038527287278044085076388900344804486087732117625636266142598810126190;
    uint256 constant PUB_329_X = 17549139046940565448859921492821105034887273862323790183848978716798891698258;
    uint256 constant PUB_329_Y = 18880322314045081005344213703908716611645251378689796430109359404182979805937;

    /// Negation in Fp.
    /// @notice Returns a number x such that a + x = 0 in Fp.
    /// @notice The input does not need to be reduced.
    /// @param a the base
    /// @return x the result
    function negate(uint256 a) internal pure returns (uint256 x) {
        unchecked {
            x = (P - (a % P)) % P; // Modulo is cheaper than branching
        }
    }

    /// Exponentiation in Fp.
    /// @notice Returns a number x such that a ^ e = x in Fp.
    /// @notice The input does not need to be reduced.
    /// @param a the base
    /// @param e the exponent
    /// @return x the result
    function exp(uint256 a, uint256 e) internal view returns (uint256 x) {
        bool success;
        assembly ("memory-safe") {
            let f := mload(0x40)
            mstore(f, 0x20)
            mstore(add(f, 0x20), 0x20)
            mstore(add(f, 0x40), 0x20)
            mstore(add(f, 0x60), a)
            mstore(add(f, 0x80), e)
            mstore(add(f, 0xa0), P)
            success := staticcall(gas(), PRECOMPILE_MODEXP, f, 0xc0, f, 0x20)
            x := mload(f)
        }
        if (!success) {
            // Exponentiation failed.
            // Should not happen.
            revert ProofInvalid();
        }
    }

    /// Invertsion in Fp.
    /// @notice Returns a number x such that a * x = 1 in Fp.
    /// @notice The input does not need to be reduced.
    /// @notice Reverts with ProofInvalid() if the inverse does not exist
    /// @param a the input
    /// @return x the solution
    function invert_Fp(uint256 a) internal view returns (uint256 x) {
        x = exp(a, EXP_INVERSE_FP);
        if (mulmod(a, x, P) != 1) {
            // Inverse does not exist.
            // Can only happen during G2 point decompression.
            revert ProofInvalid();
        }
    }

    /// Square root in Fp.
    /// @notice Returns a number x such that x * x = a in Fp.
    /// @notice Will revert with InvalidProof() if the input is not a square
    /// or not reduced.
    /// @param a the square
    /// @return x the solution
    function sqrt_Fp(uint256 a) internal view returns (uint256 x) {
        x = exp(a, EXP_SQRT_FP);
        if (mulmod(x, x, P) != a) {
            // Square root does not exist or a is not reduced.
            // Happens when G1 point is not on curve.
            revert ProofInvalid();
        }
    }

    /// Square test in Fp.
    /// @notice Returns whether a number x exists such that x * x = a in Fp.
    /// @notice Will revert with InvalidProof() if the input is not a square
    /// or not reduced.
    /// @param a the square
    /// @return x the solution
    function isSquare_Fp(uint256 a) internal view returns (bool) {
        uint256 x = exp(a, EXP_SQRT_FP);
        return mulmod(x, x, P) == a;
    }

    /// Square root in Fp2.
    /// @notice Fp2 is the complex extension Fp[i]/(i^2 + 1). The input is
    /// a0 + a1 ⋅ i and the result is x0 + x1 ⋅ i.
    /// @notice Will revert with InvalidProof() if
    ///   * the input is not a square,
    ///   * the hint is incorrect, or
    ///   * the input coefficients are not reduced.
    /// @param a0 The real part of the input.
    /// @param a1 The imaginary part of the input.
    /// @param hint A hint which of two possible signs to pick in the equation.
    /// @return x0 The real part of the square root.
    /// @return x1 The imaginary part of the square root.
    function sqrt_Fp2(uint256 a0, uint256 a1, bool hint) internal view returns (uint256 x0, uint256 x1) {
        // If this square root reverts there is no solution in Fp2.
        uint256 d = sqrt_Fp(addmod(mulmod(a0, a0, P), mulmod(a1, a1, P), P));
        if (hint) {
            d = negate(d);
        }
        // If this square root reverts there is no solution in Fp2.
        x0 = sqrt_Fp(mulmod(addmod(a0, d, P), FRACTION_1_2_FP, P));
        x1 = mulmod(a1, invert_Fp(mulmod(x0, 2, P)), P);

        // Check result to make sure we found a root.
        // Note: this also fails if a0 or a1 is not reduced.
        if (a0 != addmod(mulmod(x0, x0, P), negate(mulmod(x1, x1, P)), P)
        ||  a1 != mulmod(2, mulmod(x0, x1, P), P)) {
            revert ProofInvalid();
        }
    }

    /// Compress a G1 point.
    /// @notice Reverts with InvalidProof if the coordinates are not reduced
    /// or if the point is not on the curve.
    /// @notice The point at infinity is encoded as (0,0) and compressed to 0.
    /// @param x The X coordinate in Fp.
    /// @param y The Y coordinate in Fp.
    /// @return c The compresed point (x with one signal bit).
    function compress_g1(uint256 x, uint256 y) internal view returns (uint256 c) {
        if (x >= P || y >= P) {
            // G1 point not in field.
            revert ProofInvalid();
        }
        if (x == 0 && y == 0) {
            // Point at infinity
            return 0;
        }

        // Note: sqrt_Fp reverts if there is no solution, i.e. the x coordinate is invalid.
        uint256 y_pos = sqrt_Fp(addmod(mulmod(mulmod(x, x, P), x, P), 3, P));
        if (y == y_pos) {
            return (x << 1) | 0;
        } else if (y == negate(y_pos)) {
            return (x << 1) | 1;
        } else {
            // G1 point not on curve.
            revert ProofInvalid();
        }
    }

    /// Decompress a G1 point.
    /// @notice Reverts with InvalidProof if the input does not represent a valid point.
    /// @notice The point at infinity is encoded as (0,0) and compressed to 0.
    /// @param c The compresed point (x with one signal bit).
    /// @return x The X coordinate in Fp.
    /// @return y The Y coordinate in Fp.
    function decompress_g1(uint256 c) internal view returns (uint256 x, uint256 y) {
        // Note that X = 0 is not on the curve since 0³ + 3 = 3 is not a square.
        // so we can use it to represent the point at infinity.
        if (c == 0) {
            // Point at infinity as encoded in EIP196 and EIP197.
            return (0, 0);
        }
        bool negate_point = c & 1 == 1;
        x = c >> 1;
        if (x >= P) {
            // G1 x coordinate not in field.
            revert ProofInvalid();
        }

        // Note: (x³ + 3) is irreducible in Fp, so it can not be zero and therefore
        //       y can not be zero.
        // Note: sqrt_Fp reverts if there is no solution, i.e. the point is not on the curve.
        y = sqrt_Fp(addmod(mulmod(mulmod(x, x, P), x, P), 3, P));
        if (negate_point) {
            y = negate(y);
        }
    }

    /// Compress a G2 point.
    /// @notice Reverts with InvalidProof if the coefficients are not reduced
    /// or if the point is not on the curve.
    /// @notice The G2 curve is defined over the complex extension Fp[i]/(i^2 + 1)
    /// with coordinates (x0 + x1 ⋅ i, y0 + y1 ⋅ i).
    /// @notice The point at infinity is encoded as (0,0,0,0) and compressed to (0,0).
    /// @param x0 The real part of the X coordinate.
    /// @param x1 The imaginary poart of the X coordinate.
    /// @param y0 The real part of the Y coordinate.
    /// @param y1 The imaginary part of the Y coordinate.
    /// @return c0 The first half of the compresed point (x0 with two signal bits).
    /// @return c1 The second half of the compressed point (x1 unmodified).
    function compress_g2(uint256 x0, uint256 x1, uint256 y0, uint256 y1)
    internal view returns (uint256 c0, uint256 c1) {
        if (x0 >= P || x1 >= P || y0 >= P || y1 >= P) {
            // G2 point not in field.
            revert ProofInvalid();
        }
        if ((x0 | x1 | y0 | y1) == 0) {
            // Point at infinity
            return (0, 0);
        }

        // Compute y^2
        // Note: shadowing variables and scoping to avoid stack-to-deep.
        uint256 y0_pos;
        uint256 y1_pos;
        {
            uint256 n3ab = mulmod(mulmod(x0, x1, P), P-3, P);
            uint256 a_3 = mulmod(mulmod(x0, x0, P), x0, P);
            uint256 b_3 = mulmod(mulmod(x1, x1, P), x1, P);
            y0_pos = addmod(FRACTION_27_82_FP, addmod(a_3, mulmod(n3ab, x1, P), P), P);
            y1_pos = negate(addmod(FRACTION_3_82_FP,  addmod(b_3, mulmod(n3ab, x0, P), P), P));
        }

        // Determine hint bit
        // If this sqrt fails the x coordinate is not on the curve.
        bool hint;
        {
            uint256 d = sqrt_Fp(addmod(mulmod(y0_pos, y0_pos, P), mulmod(y1_pos, y1_pos, P), P));
            hint = !isSquare_Fp(mulmod(addmod(y0_pos, d, P), FRACTION_1_2_FP, P));
        }

        // Recover y
        (y0_pos, y1_pos) = sqrt_Fp2(y0_pos, y1_pos, hint);
        if (y0 == y0_pos && y1 == y1_pos) {
            c0 = (x0 << 2) | (hint ? 2  : 0) | 0;
            c1 = x1;
        } else if (y0 == negate(y0_pos) && y1 == negate(y1_pos)) {
            c0 = (x0 << 2) | (hint ? 2  : 0) | 1;
            c1 = x1;
        } else {
            // G1 point not on curve.
            revert ProofInvalid();
        }
    }

    /// Decompress a G2 point.
    /// @notice Reverts with InvalidProof if the input does not represent a valid point.
    /// @notice The G2 curve is defined over the complex extension Fp[i]/(i^2 + 1)
    /// with coordinates (x0 + x1 ⋅ i, y0 + y1 ⋅ i).
    /// @notice The point at infinity is encoded as (0,0,0,0) and compressed to (0,0).
    /// @param c0 The first half of the compresed point (x0 with two signal bits).
    /// @param c1 The second half of the compressed point (x1 unmodified).
    /// @return x0 The real part of the X coordinate.
    /// @return x1 The imaginary poart of the X coordinate.
    /// @return y0 The real part of the Y coordinate.
    /// @return y1 The imaginary part of the Y coordinate.
    function decompress_g2(uint256 c0, uint256 c1)
    internal view returns (uint256 x0, uint256 x1, uint256 y0, uint256 y1) {
        // Note that X = (0, 0) is not on the curve since 0³ + 3/(9 + i) is not a square.
        // so we can use it to represent the point at infinity.
        if (c0 == 0 && c1 == 0) {
            // Point at infinity as encoded in EIP197.
            return (0, 0, 0, 0);
        }
        bool negate_point = c0 & 1 == 1;
        bool hint = c0 & 2 == 2;
        x0 = c0 >> 2;
        x1 = c1;
        if (x0 >= P || x1 >= P) {
            // G2 x0 or x1 coefficient not in field.
            revert ProofInvalid();
        }

        uint256 n3ab = mulmod(mulmod(x0, x1, P), P-3, P);
        uint256 a_3 = mulmod(mulmod(x0, x0, P), x0, P);
        uint256 b_3 = mulmod(mulmod(x1, x1, P), x1, P);

        y0 = addmod(FRACTION_27_82_FP, addmod(a_3, mulmod(n3ab, x1, P), P), P);
        y1 = negate(addmod(FRACTION_3_82_FP,  addmod(b_3, mulmod(n3ab, x0, P), P), P));

        // Note: sqrt_Fp2 reverts if there is no solution, i.e. the point is not on the curve.
        // Note: (X³ + 3/(9 + i)) is irreducible in Fp2, so y can not be zero.
        //       But y0 or y1 may still independently be zero.
        (y0, y1) = sqrt_Fp2(y0, y1, hint);
        if (negate_point) {
            y0 = negate(y0);
            y1 = negate(y1);
        }
    }

    /// Compute the public input linear combination.
    /// @notice Reverts with PublicInputNotInField if the input is not in the field.
    /// @notice Computes the multi-scalar-multiplication of the public input
    /// elements and the verification key including the constant term.
    /// @param input The public inputs. These are elements of the scalar field Fr.
    /// @param publicCommitments public inputs generated from pedersen commitments.
    /// @param commitments The Pedersen commitments from the proof.
    /// @return x The X coordinate of the resulting G1 point.
    /// @return y The Y coordinate of the resulting G1 point.
    function publicInputMSM(
        uint256[329] calldata input,
        uint256[1] memory publicCommitments,
        uint256[2] memory commitments
    )
    internal view returns (uint256 x, uint256 y) {
        // Note: The ECMUL precompile does not reject unreduced values, so we check this.
        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the
        //       code-size is in the PUB_ constants.
        // ECMUL has input (x, y, scalar) and output (x', y').
        // ECADD has input (x1, y1, x2, y2) and output (x', y').
        // We reduce commitments(if any) with constants as the first point argument to ECADD.
        // We call them such that ecmul output is already in the second point
        // argument to ECADD so we can have a tight loop.
        bool success = true;
        assembly ("memory-safe") {
            let f := mload(0x40)
            let g := add(f, 0x40)
            let s
            mstore(f, CONSTANT_X)
            mstore(add(f, 0x20), CONSTANT_Y)
            mstore(g, mload(commitments))
            mstore(add(g, 0x20), mload(add(commitments, 0x20)))
            success := and(success,  staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_0_X)
            mstore(add(g, 0x20), PUB_0_Y)
            s :=  calldataload(input)
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_1_X)
            mstore(add(g, 0x20), PUB_1_Y)
            s :=  calldataload(add(input, 32))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_2_X)
            mstore(add(g, 0x20), PUB_2_Y)
            s :=  calldataload(add(input, 64))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_3_X)
            mstore(add(g, 0x20), PUB_3_Y)
            s :=  calldataload(add(input, 96))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_4_X)
            mstore(add(g, 0x20), PUB_4_Y)
            s :=  calldataload(add(input, 128))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_5_X)
            mstore(add(g, 0x20), PUB_5_Y)
            s :=  calldataload(add(input, 160))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_6_X)
            mstore(add(g, 0x20), PUB_6_Y)
            s :=  calldataload(add(input, 192))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_7_X)
            mstore(add(g, 0x20), PUB_7_Y)
            s :=  calldataload(add(input, 224))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_8_X)
            mstore(add(g, 0x20), PUB_8_Y)
            s :=  calldataload(add(input, 256))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_9_X)
            mstore(add(g, 0x20), PUB_9_Y)
            s :=  calldataload(add(input, 288))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_10_X)
            mstore(add(g, 0x20), PUB_10_Y)
            s :=  calldataload(add(input, 320))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_11_X)
            mstore(add(g, 0x20), PUB_11_Y)
            s :=  calldataload(add(input, 352))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_12_X)
            mstore(add(g, 0x20), PUB_12_Y)
            s :=  calldataload(add(input, 384))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_13_X)
            mstore(add(g, 0x20), PUB_13_Y)
            s :=  calldataload(add(input, 416))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_14_X)
            mstore(add(g, 0x20), PUB_14_Y)
            s :=  calldataload(add(input, 448))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_15_X)
            mstore(add(g, 0x20), PUB_15_Y)
            s :=  calldataload(add(input, 480))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_16_X)
            mstore(add(g, 0x20), PUB_16_Y)
            s :=  calldataload(add(input, 512))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_17_X)
            mstore(add(g, 0x20), PUB_17_Y)
            s :=  calldataload(add(input, 544))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_18_X)
            mstore(add(g, 0x20), PUB_18_Y)
            s :=  calldataload(add(input, 576))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_19_X)
            mstore(add(g, 0x20), PUB_19_Y)
            s :=  calldataload(add(input, 608))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_20_X)
            mstore(add(g, 0x20), PUB_20_Y)
            s :=  calldataload(add(input, 640))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_21_X)
            mstore(add(g, 0x20), PUB_21_Y)
            s :=  calldataload(add(input, 672))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_22_X)
            mstore(add(g, 0x20), PUB_22_Y)
            s :=  calldataload(add(input, 704))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_23_X)
            mstore(add(g, 0x20), PUB_23_Y)
            s :=  calldataload(add(input, 736))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_24_X)
            mstore(add(g, 0x20), PUB_24_Y)
            s :=  calldataload(add(input, 768))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_25_X)
            mstore(add(g, 0x20), PUB_25_Y)
            s :=  calldataload(add(input, 800))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_26_X)
            mstore(add(g, 0x20), PUB_26_Y)
            s :=  calldataload(add(input, 832))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_27_X)
            mstore(add(g, 0x20), PUB_27_Y)
            s :=  calldataload(add(input, 864))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_28_X)
            mstore(add(g, 0x20), PUB_28_Y)
            s :=  calldataload(add(input, 896))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_29_X)
            mstore(add(g, 0x20), PUB_29_Y)
            s :=  calldataload(add(input, 928))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_30_X)
            mstore(add(g, 0x20), PUB_30_Y)
            s :=  calldataload(add(input, 960))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_31_X)
            mstore(add(g, 0x20), PUB_31_Y)
            s :=  calldataload(add(input, 992))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_32_X)
            mstore(add(g, 0x20), PUB_32_Y)
            s :=  calldataload(add(input, 1024))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_33_X)
            mstore(add(g, 0x20), PUB_33_Y)
            s :=  calldataload(add(input, 1056))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_34_X)
            mstore(add(g, 0x20), PUB_34_Y)
            s :=  calldataload(add(input, 1088))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_35_X)
            mstore(add(g, 0x20), PUB_35_Y)
            s :=  calldataload(add(input, 1120))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_36_X)
            mstore(add(g, 0x20), PUB_36_Y)
            s :=  calldataload(add(input, 1152))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_37_X)
            mstore(add(g, 0x20), PUB_37_Y)
            s :=  calldataload(add(input, 1184))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_38_X)
            mstore(add(g, 0x20), PUB_38_Y)
            s :=  calldataload(add(input, 1216))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_39_X)
            mstore(add(g, 0x20), PUB_39_Y)
            s :=  calldataload(add(input, 1248))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_40_X)
            mstore(add(g, 0x20), PUB_40_Y)
            s :=  calldataload(add(input, 1280))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_41_X)
            mstore(add(g, 0x20), PUB_41_Y)
            s :=  calldataload(add(input, 1312))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_42_X)
            mstore(add(g, 0x20), PUB_42_Y)
            s :=  calldataload(add(input, 1344))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_43_X)
            mstore(add(g, 0x20), PUB_43_Y)
            s :=  calldataload(add(input, 1376))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_44_X)
            mstore(add(g, 0x20), PUB_44_Y)
            s :=  calldataload(add(input, 1408))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_45_X)
            mstore(add(g, 0x20), PUB_45_Y)
            s :=  calldataload(add(input, 1440))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_46_X)
            mstore(add(g, 0x20), PUB_46_Y)
            s :=  calldataload(add(input, 1472))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_47_X)
            mstore(add(g, 0x20), PUB_47_Y)
            s :=  calldataload(add(input, 1504))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_48_X)
            mstore(add(g, 0x20), PUB_48_Y)
            s :=  calldataload(add(input, 1536))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_49_X)
            mstore(add(g, 0x20), PUB_49_Y)
            s :=  calldataload(add(input, 1568))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_50_X)
            mstore(add(g, 0x20), PUB_50_Y)
            s :=  calldataload(add(input, 1600))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_51_X)
            mstore(add(g, 0x20), PUB_51_Y)
            s :=  calldataload(add(input, 1632))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_52_X)
            mstore(add(g, 0x20), PUB_52_Y)
            s :=  calldataload(add(input, 1664))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_53_X)
            mstore(add(g, 0x20), PUB_53_Y)
            s :=  calldataload(add(input, 1696))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_54_X)
            mstore(add(g, 0x20), PUB_54_Y)
            s :=  calldataload(add(input, 1728))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_55_X)
            mstore(add(g, 0x20), PUB_55_Y)
            s :=  calldataload(add(input, 1760))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_56_X)
            mstore(add(g, 0x20), PUB_56_Y)
            s :=  calldataload(add(input, 1792))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_57_X)
            mstore(add(g, 0x20), PUB_57_Y)
            s :=  calldataload(add(input, 1824))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_58_X)
            mstore(add(g, 0x20), PUB_58_Y)
            s :=  calldataload(add(input, 1856))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_59_X)
            mstore(add(g, 0x20), PUB_59_Y)
            s :=  calldataload(add(input, 1888))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_60_X)
            mstore(add(g, 0x20), PUB_60_Y)
            s :=  calldataload(add(input, 1920))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_61_X)
            mstore(add(g, 0x20), PUB_61_Y)
            s :=  calldataload(add(input, 1952))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_62_X)
            mstore(add(g, 0x20), PUB_62_Y)
            s :=  calldataload(add(input, 1984))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_63_X)
            mstore(add(g, 0x20), PUB_63_Y)
            s :=  calldataload(add(input, 2016))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_64_X)
            mstore(add(g, 0x20), PUB_64_Y)
            s :=  calldataload(add(input, 2048))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_65_X)
            mstore(add(g, 0x20), PUB_65_Y)
            s :=  calldataload(add(input, 2080))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_66_X)
            mstore(add(g, 0x20), PUB_66_Y)
            s :=  calldataload(add(input, 2112))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_67_X)
            mstore(add(g, 0x20), PUB_67_Y)
            s :=  calldataload(add(input, 2144))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_68_X)
            mstore(add(g, 0x20), PUB_68_Y)
            s :=  calldataload(add(input, 2176))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_69_X)
            mstore(add(g, 0x20), PUB_69_Y)
            s :=  calldataload(add(input, 2208))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_70_X)
            mstore(add(g, 0x20), PUB_70_Y)
            s :=  calldataload(add(input, 2240))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_71_X)
            mstore(add(g, 0x20), PUB_71_Y)
            s :=  calldataload(add(input, 2272))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_72_X)
            mstore(add(g, 0x20), PUB_72_Y)
            s :=  calldataload(add(input, 2304))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_73_X)
            mstore(add(g, 0x20), PUB_73_Y)
            s :=  calldataload(add(input, 2336))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_74_X)
            mstore(add(g, 0x20), PUB_74_Y)
            s :=  calldataload(add(input, 2368))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_75_X)
            mstore(add(g, 0x20), PUB_75_Y)
            s :=  calldataload(add(input, 2400))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_76_X)
            mstore(add(g, 0x20), PUB_76_Y)
            s :=  calldataload(add(input, 2432))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_77_X)
            mstore(add(g, 0x20), PUB_77_Y)
            s :=  calldataload(add(input, 2464))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_78_X)
            mstore(add(g, 0x20), PUB_78_Y)
            s :=  calldataload(add(input, 2496))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_79_X)
            mstore(add(g, 0x20), PUB_79_Y)
            s :=  calldataload(add(input, 2528))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_80_X)
            mstore(add(g, 0x20), PUB_80_Y)
            s :=  calldataload(add(input, 2560))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_81_X)
            mstore(add(g, 0x20), PUB_81_Y)
            s :=  calldataload(add(input, 2592))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_82_X)
            mstore(add(g, 0x20), PUB_82_Y)
            s :=  calldataload(add(input, 2624))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_83_X)
            mstore(add(g, 0x20), PUB_83_Y)
            s :=  calldataload(add(input, 2656))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_84_X)
            mstore(add(g, 0x20), PUB_84_Y)
            s :=  calldataload(add(input, 2688))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_85_X)
            mstore(add(g, 0x20), PUB_85_Y)
            s :=  calldataload(add(input, 2720))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_86_X)
            mstore(add(g, 0x20), PUB_86_Y)
            s :=  calldataload(add(input, 2752))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_87_X)
            mstore(add(g, 0x20), PUB_87_Y)
            s :=  calldataload(add(input, 2784))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_88_X)
            mstore(add(g, 0x20), PUB_88_Y)
            s :=  calldataload(add(input, 2816))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_89_X)
            mstore(add(g, 0x20), PUB_89_Y)
            s :=  calldataload(add(input, 2848))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_90_X)
            mstore(add(g, 0x20), PUB_90_Y)
            s :=  calldataload(add(input, 2880))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_91_X)
            mstore(add(g, 0x20), PUB_91_Y)
            s :=  calldataload(add(input, 2912))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_92_X)
            mstore(add(g, 0x20), PUB_92_Y)
            s :=  calldataload(add(input, 2944))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_93_X)
            mstore(add(g, 0x20), PUB_93_Y)
            s :=  calldataload(add(input, 2976))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_94_X)
            mstore(add(g, 0x20), PUB_94_Y)
            s :=  calldataload(add(input, 3008))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_95_X)
            mstore(add(g, 0x20), PUB_95_Y)
            s :=  calldataload(add(input, 3040))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_96_X)
            mstore(add(g, 0x20), PUB_96_Y)
            s :=  calldataload(add(input, 3072))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_97_X)
            mstore(add(g, 0x20), PUB_97_Y)
            s :=  calldataload(add(input, 3104))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_98_X)
            mstore(add(g, 0x20), PUB_98_Y)
            s :=  calldataload(add(input, 3136))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_99_X)
            mstore(add(g, 0x20), PUB_99_Y)
            s :=  calldataload(add(input, 3168))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_100_X)
            mstore(add(g, 0x20), PUB_100_Y)
            s :=  calldataload(add(input, 3200))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_101_X)
            mstore(add(g, 0x20), PUB_101_Y)
            s :=  calldataload(add(input, 3232))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_102_X)
            mstore(add(g, 0x20), PUB_102_Y)
            s :=  calldataload(add(input, 3264))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_103_X)
            mstore(add(g, 0x20), PUB_103_Y)
            s :=  calldataload(add(input, 3296))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_104_X)
            mstore(add(g, 0x20), PUB_104_Y)
            s :=  calldataload(add(input, 3328))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_105_X)
            mstore(add(g, 0x20), PUB_105_Y)
            s :=  calldataload(add(input, 3360))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_106_X)
            mstore(add(g, 0x20), PUB_106_Y)
            s :=  calldataload(add(input, 3392))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_107_X)
            mstore(add(g, 0x20), PUB_107_Y)
            s :=  calldataload(add(input, 3424))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_108_X)
            mstore(add(g, 0x20), PUB_108_Y)
            s :=  calldataload(add(input, 3456))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_109_X)
            mstore(add(g, 0x20), PUB_109_Y)
            s :=  calldataload(add(input, 3488))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_110_X)
            mstore(add(g, 0x20), PUB_110_Y)
            s :=  calldataload(add(input, 3520))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_111_X)
            mstore(add(g, 0x20), PUB_111_Y)
            s :=  calldataload(add(input, 3552))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_112_X)
            mstore(add(g, 0x20), PUB_112_Y)
            s :=  calldataload(add(input, 3584))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_113_X)
            mstore(add(g, 0x20), PUB_113_Y)
            s :=  calldataload(add(input, 3616))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_114_X)
            mstore(add(g, 0x20), PUB_114_Y)
            s :=  calldataload(add(input, 3648))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_115_X)
            mstore(add(g, 0x20), PUB_115_Y)
            s :=  calldataload(add(input, 3680))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_116_X)
            mstore(add(g, 0x20), PUB_116_Y)
            s :=  calldataload(add(input, 3712))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_117_X)
            mstore(add(g, 0x20), PUB_117_Y)
            s :=  calldataload(add(input, 3744))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_118_X)
            mstore(add(g, 0x20), PUB_118_Y)
            s :=  calldataload(add(input, 3776))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_119_X)
            mstore(add(g, 0x20), PUB_119_Y)
            s :=  calldataload(add(input, 3808))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_120_X)
            mstore(add(g, 0x20), PUB_120_Y)
            s :=  calldataload(add(input, 3840))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_121_X)
            mstore(add(g, 0x20), PUB_121_Y)
            s :=  calldataload(add(input, 3872))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_122_X)
            mstore(add(g, 0x20), PUB_122_Y)
            s :=  calldataload(add(input, 3904))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_123_X)
            mstore(add(g, 0x20), PUB_123_Y)
            s :=  calldataload(add(input, 3936))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_124_X)
            mstore(add(g, 0x20), PUB_124_Y)
            s :=  calldataload(add(input, 3968))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_125_X)
            mstore(add(g, 0x20), PUB_125_Y)
            s :=  calldataload(add(input, 4000))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_126_X)
            mstore(add(g, 0x20), PUB_126_Y)
            s :=  calldataload(add(input, 4032))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_127_X)
            mstore(add(g, 0x20), PUB_127_Y)
            s :=  calldataload(add(input, 4064))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_128_X)
            mstore(add(g, 0x20), PUB_128_Y)
            s :=  calldataload(add(input, 4096))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_129_X)
            mstore(add(g, 0x20), PUB_129_Y)
            s :=  calldataload(add(input, 4128))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_130_X)
            mstore(add(g, 0x20), PUB_130_Y)
            s :=  calldataload(add(input, 4160))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_131_X)
            mstore(add(g, 0x20), PUB_131_Y)
            s :=  calldataload(add(input, 4192))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_132_X)
            mstore(add(g, 0x20), PUB_132_Y)
            s :=  calldataload(add(input, 4224))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_133_X)
            mstore(add(g, 0x20), PUB_133_Y)
            s :=  calldataload(add(input, 4256))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_134_X)
            mstore(add(g, 0x20), PUB_134_Y)
            s :=  calldataload(add(input, 4288))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_135_X)
            mstore(add(g, 0x20), PUB_135_Y)
            s :=  calldataload(add(input, 4320))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_136_X)
            mstore(add(g, 0x20), PUB_136_Y)
            s :=  calldataload(add(input, 4352))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_137_X)
            mstore(add(g, 0x20), PUB_137_Y)
            s :=  calldataload(add(input, 4384))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_138_X)
            mstore(add(g, 0x20), PUB_138_Y)
            s :=  calldataload(add(input, 4416))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_139_X)
            mstore(add(g, 0x20), PUB_139_Y)
            s :=  calldataload(add(input, 4448))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_140_X)
            mstore(add(g, 0x20), PUB_140_Y)
            s :=  calldataload(add(input, 4480))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_141_X)
            mstore(add(g, 0x20), PUB_141_Y)
            s :=  calldataload(add(input, 4512))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_142_X)
            mstore(add(g, 0x20), PUB_142_Y)
            s :=  calldataload(add(input, 4544))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_143_X)
            mstore(add(g, 0x20), PUB_143_Y)
            s :=  calldataload(add(input, 4576))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_144_X)
            mstore(add(g, 0x20), PUB_144_Y)
            s :=  calldataload(add(input, 4608))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_145_X)
            mstore(add(g, 0x20), PUB_145_Y)
            s :=  calldataload(add(input, 4640))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_146_X)
            mstore(add(g, 0x20), PUB_146_Y)
            s :=  calldataload(add(input, 4672))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_147_X)
            mstore(add(g, 0x20), PUB_147_Y)
            s :=  calldataload(add(input, 4704))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_148_X)
            mstore(add(g, 0x20), PUB_148_Y)
            s :=  calldataload(add(input, 4736))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_149_X)
            mstore(add(g, 0x20), PUB_149_Y)
            s :=  calldataload(add(input, 4768))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_150_X)
            mstore(add(g, 0x20), PUB_150_Y)
            s :=  calldataload(add(input, 4800))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_151_X)
            mstore(add(g, 0x20), PUB_151_Y)
            s :=  calldataload(add(input, 4832))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_152_X)
            mstore(add(g, 0x20), PUB_152_Y)
            s :=  calldataload(add(input, 4864))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_153_X)
            mstore(add(g, 0x20), PUB_153_Y)
            s :=  calldataload(add(input, 4896))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_154_X)
            mstore(add(g, 0x20), PUB_154_Y)
            s :=  calldataload(add(input, 4928))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_155_X)
            mstore(add(g, 0x20), PUB_155_Y)
            s :=  calldataload(add(input, 4960))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_156_X)
            mstore(add(g, 0x20), PUB_156_Y)
            s :=  calldataload(add(input, 4992))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_157_X)
            mstore(add(g, 0x20), PUB_157_Y)
            s :=  calldataload(add(input, 5024))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_158_X)
            mstore(add(g, 0x20), PUB_158_Y)
            s :=  calldataload(add(input, 5056))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_159_X)
            mstore(add(g, 0x20), PUB_159_Y)
            s :=  calldataload(add(input, 5088))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_160_X)
            mstore(add(g, 0x20), PUB_160_Y)
            s :=  calldataload(add(input, 5120))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_161_X)
            mstore(add(g, 0x20), PUB_161_Y)
            s :=  calldataload(add(input, 5152))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_162_X)
            mstore(add(g, 0x20), PUB_162_Y)
            s :=  calldataload(add(input, 5184))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_163_X)
            mstore(add(g, 0x20), PUB_163_Y)
            s :=  calldataload(add(input, 5216))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_164_X)
            mstore(add(g, 0x20), PUB_164_Y)
            s :=  calldataload(add(input, 5248))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_165_X)
            mstore(add(g, 0x20), PUB_165_Y)
            s :=  calldataload(add(input, 5280))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_166_X)
            mstore(add(g, 0x20), PUB_166_Y)
            s :=  calldataload(add(input, 5312))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_167_X)
            mstore(add(g, 0x20), PUB_167_Y)
            s :=  calldataload(add(input, 5344))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_168_X)
            mstore(add(g, 0x20), PUB_168_Y)
            s :=  calldataload(add(input, 5376))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_169_X)
            mstore(add(g, 0x20), PUB_169_Y)
            s :=  calldataload(add(input, 5408))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_170_X)
            mstore(add(g, 0x20), PUB_170_Y)
            s :=  calldataload(add(input, 5440))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_171_X)
            mstore(add(g, 0x20), PUB_171_Y)
            s :=  calldataload(add(input, 5472))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_172_X)
            mstore(add(g, 0x20), PUB_172_Y)
            s :=  calldataload(add(input, 5504))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_173_X)
            mstore(add(g, 0x20), PUB_173_Y)
            s :=  calldataload(add(input, 5536))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_174_X)
            mstore(add(g, 0x20), PUB_174_Y)
            s :=  calldataload(add(input, 5568))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_175_X)
            mstore(add(g, 0x20), PUB_175_Y)
            s :=  calldataload(add(input, 5600))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_176_X)
            mstore(add(g, 0x20), PUB_176_Y)
            s :=  calldataload(add(input, 5632))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_177_X)
            mstore(add(g, 0x20), PUB_177_Y)
            s :=  calldataload(add(input, 5664))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_178_X)
            mstore(add(g, 0x20), PUB_178_Y)
            s :=  calldataload(add(input, 5696))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_179_X)
            mstore(add(g, 0x20), PUB_179_Y)
            s :=  calldataload(add(input, 5728))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_180_X)
            mstore(add(g, 0x20), PUB_180_Y)
            s :=  calldataload(add(input, 5760))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_181_X)
            mstore(add(g, 0x20), PUB_181_Y)
            s :=  calldataload(add(input, 5792))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_182_X)
            mstore(add(g, 0x20), PUB_182_Y)
            s :=  calldataload(add(input, 5824))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_183_X)
            mstore(add(g, 0x20), PUB_183_Y)
            s :=  calldataload(add(input, 5856))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_184_X)
            mstore(add(g, 0x20), PUB_184_Y)
            s :=  calldataload(add(input, 5888))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_185_X)
            mstore(add(g, 0x20), PUB_185_Y)
            s :=  calldataload(add(input, 5920))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_186_X)
            mstore(add(g, 0x20), PUB_186_Y)
            s :=  calldataload(add(input, 5952))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_187_X)
            mstore(add(g, 0x20), PUB_187_Y)
            s :=  calldataload(add(input, 5984))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_188_X)
            mstore(add(g, 0x20), PUB_188_Y)
            s :=  calldataload(add(input, 6016))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_189_X)
            mstore(add(g, 0x20), PUB_189_Y)
            s :=  calldataload(add(input, 6048))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_190_X)
            mstore(add(g, 0x20), PUB_190_Y)
            s :=  calldataload(add(input, 6080))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_191_X)
            mstore(add(g, 0x20), PUB_191_Y)
            s :=  calldataload(add(input, 6112))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_192_X)
            mstore(add(g, 0x20), PUB_192_Y)
            s :=  calldataload(add(input, 6144))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_193_X)
            mstore(add(g, 0x20), PUB_193_Y)
            s :=  calldataload(add(input, 6176))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_194_X)
            mstore(add(g, 0x20), PUB_194_Y)
            s :=  calldataload(add(input, 6208))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_195_X)
            mstore(add(g, 0x20), PUB_195_Y)
            s :=  calldataload(add(input, 6240))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_196_X)
            mstore(add(g, 0x20), PUB_196_Y)
            s :=  calldataload(add(input, 6272))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_197_X)
            mstore(add(g, 0x20), PUB_197_Y)
            s :=  calldataload(add(input, 6304))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_198_X)
            mstore(add(g, 0x20), PUB_198_Y)
            s :=  calldataload(add(input, 6336))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_199_X)
            mstore(add(g, 0x20), PUB_199_Y)
            s :=  calldataload(add(input, 6368))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_200_X)
            mstore(add(g, 0x20), PUB_200_Y)
            s :=  calldataload(add(input, 6400))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_201_X)
            mstore(add(g, 0x20), PUB_201_Y)
            s :=  calldataload(add(input, 6432))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_202_X)
            mstore(add(g, 0x20), PUB_202_Y)
            s :=  calldataload(add(input, 6464))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_203_X)
            mstore(add(g, 0x20), PUB_203_Y)
            s :=  calldataload(add(input, 6496))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_204_X)
            mstore(add(g, 0x20), PUB_204_Y)
            s :=  calldataload(add(input, 6528))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_205_X)
            mstore(add(g, 0x20), PUB_205_Y)
            s :=  calldataload(add(input, 6560))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_206_X)
            mstore(add(g, 0x20), PUB_206_Y)
            s :=  calldataload(add(input, 6592))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_207_X)
            mstore(add(g, 0x20), PUB_207_Y)
            s :=  calldataload(add(input, 6624))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_208_X)
            mstore(add(g, 0x20), PUB_208_Y)
            s :=  calldataload(add(input, 6656))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_209_X)
            mstore(add(g, 0x20), PUB_209_Y)
            s :=  calldataload(add(input, 6688))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_210_X)
            mstore(add(g, 0x20), PUB_210_Y)
            s :=  calldataload(add(input, 6720))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_211_X)
            mstore(add(g, 0x20), PUB_211_Y)
            s :=  calldataload(add(input, 6752))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_212_X)
            mstore(add(g, 0x20), PUB_212_Y)
            s :=  calldataload(add(input, 6784))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_213_X)
            mstore(add(g, 0x20), PUB_213_Y)
            s :=  calldataload(add(input, 6816))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_214_X)
            mstore(add(g, 0x20), PUB_214_Y)
            s :=  calldataload(add(input, 6848))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_215_X)
            mstore(add(g, 0x20), PUB_215_Y)
            s :=  calldataload(add(input, 6880))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_216_X)
            mstore(add(g, 0x20), PUB_216_Y)
            s :=  calldataload(add(input, 6912))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_217_X)
            mstore(add(g, 0x20), PUB_217_Y)
            s :=  calldataload(add(input, 6944))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_218_X)
            mstore(add(g, 0x20), PUB_218_Y)
            s :=  calldataload(add(input, 6976))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_219_X)
            mstore(add(g, 0x20), PUB_219_Y)
            s :=  calldataload(add(input, 7008))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_220_X)
            mstore(add(g, 0x20), PUB_220_Y)
            s :=  calldataload(add(input, 7040))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_221_X)
            mstore(add(g, 0x20), PUB_221_Y)
            s :=  calldataload(add(input, 7072))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_222_X)
            mstore(add(g, 0x20), PUB_222_Y)
            s :=  calldataload(add(input, 7104))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_223_X)
            mstore(add(g, 0x20), PUB_223_Y)
            s :=  calldataload(add(input, 7136))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_224_X)
            mstore(add(g, 0x20), PUB_224_Y)
            s :=  calldataload(add(input, 7168))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_225_X)
            mstore(add(g, 0x20), PUB_225_Y)
            s :=  calldataload(add(input, 7200))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_226_X)
            mstore(add(g, 0x20), PUB_226_Y)
            s :=  calldataload(add(input, 7232))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_227_X)
            mstore(add(g, 0x20), PUB_227_Y)
            s :=  calldataload(add(input, 7264))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_228_X)
            mstore(add(g, 0x20), PUB_228_Y)
            s :=  calldataload(add(input, 7296))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_229_X)
            mstore(add(g, 0x20), PUB_229_Y)
            s :=  calldataload(add(input, 7328))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_230_X)
            mstore(add(g, 0x20), PUB_230_Y)
            s :=  calldataload(add(input, 7360))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_231_X)
            mstore(add(g, 0x20), PUB_231_Y)
            s :=  calldataload(add(input, 7392))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_232_X)
            mstore(add(g, 0x20), PUB_232_Y)
            s :=  calldataload(add(input, 7424))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_233_X)
            mstore(add(g, 0x20), PUB_233_Y)
            s :=  calldataload(add(input, 7456))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_234_X)
            mstore(add(g, 0x20), PUB_234_Y)
            s :=  calldataload(add(input, 7488))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_235_X)
            mstore(add(g, 0x20), PUB_235_Y)
            s :=  calldataload(add(input, 7520))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_236_X)
            mstore(add(g, 0x20), PUB_236_Y)
            s :=  calldataload(add(input, 7552))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_237_X)
            mstore(add(g, 0x20), PUB_237_Y)
            s :=  calldataload(add(input, 7584))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_238_X)
            mstore(add(g, 0x20), PUB_238_Y)
            s :=  calldataload(add(input, 7616))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_239_X)
            mstore(add(g, 0x20), PUB_239_Y)
            s :=  calldataload(add(input, 7648))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_240_X)
            mstore(add(g, 0x20), PUB_240_Y)
            s :=  calldataload(add(input, 7680))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_241_X)
            mstore(add(g, 0x20), PUB_241_Y)
            s :=  calldataload(add(input, 7712))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_242_X)
            mstore(add(g, 0x20), PUB_242_Y)
            s :=  calldataload(add(input, 7744))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_243_X)
            mstore(add(g, 0x20), PUB_243_Y)
            s :=  calldataload(add(input, 7776))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_244_X)
            mstore(add(g, 0x20), PUB_244_Y)
            s :=  calldataload(add(input, 7808))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_245_X)
            mstore(add(g, 0x20), PUB_245_Y)
            s :=  calldataload(add(input, 7840))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_246_X)
            mstore(add(g, 0x20), PUB_246_Y)
            s :=  calldataload(add(input, 7872))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_247_X)
            mstore(add(g, 0x20), PUB_247_Y)
            s :=  calldataload(add(input, 7904))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_248_X)
            mstore(add(g, 0x20), PUB_248_Y)
            s :=  calldataload(add(input, 7936))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_249_X)
            mstore(add(g, 0x20), PUB_249_Y)
            s :=  calldataload(add(input, 7968))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_250_X)
            mstore(add(g, 0x20), PUB_250_Y)
            s :=  calldataload(add(input, 8000))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_251_X)
            mstore(add(g, 0x20), PUB_251_Y)
            s :=  calldataload(add(input, 8032))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_252_X)
            mstore(add(g, 0x20), PUB_252_Y)
            s :=  calldataload(add(input, 8064))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_253_X)
            mstore(add(g, 0x20), PUB_253_Y)
            s :=  calldataload(add(input, 8096))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_254_X)
            mstore(add(g, 0x20), PUB_254_Y)
            s :=  calldataload(add(input, 8128))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_255_X)
            mstore(add(g, 0x20), PUB_255_Y)
            s :=  calldataload(add(input, 8160))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_256_X)
            mstore(add(g, 0x20), PUB_256_Y)
            s :=  calldataload(add(input, 8192))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_257_X)
            mstore(add(g, 0x20), PUB_257_Y)
            s :=  calldataload(add(input, 8224))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_258_X)
            mstore(add(g, 0x20), PUB_258_Y)
            s :=  calldataload(add(input, 8256))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_259_X)
            mstore(add(g, 0x20), PUB_259_Y)
            s :=  calldataload(add(input, 8288))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_260_X)
            mstore(add(g, 0x20), PUB_260_Y)
            s :=  calldataload(add(input, 8320))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_261_X)
            mstore(add(g, 0x20), PUB_261_Y)
            s :=  calldataload(add(input, 8352))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_262_X)
            mstore(add(g, 0x20), PUB_262_Y)
            s :=  calldataload(add(input, 8384))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_263_X)
            mstore(add(g, 0x20), PUB_263_Y)
            s :=  calldataload(add(input, 8416))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_264_X)
            mstore(add(g, 0x20), PUB_264_Y)
            s :=  calldataload(add(input, 8448))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_265_X)
            mstore(add(g, 0x20), PUB_265_Y)
            s :=  calldataload(add(input, 8480))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_266_X)
            mstore(add(g, 0x20), PUB_266_Y)
            s :=  calldataload(add(input, 8512))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_267_X)
            mstore(add(g, 0x20), PUB_267_Y)
            s :=  calldataload(add(input, 8544))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_268_X)
            mstore(add(g, 0x20), PUB_268_Y)
            s :=  calldataload(add(input, 8576))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_269_X)
            mstore(add(g, 0x20), PUB_269_Y)
            s :=  calldataload(add(input, 8608))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_270_X)
            mstore(add(g, 0x20), PUB_270_Y)
            s :=  calldataload(add(input, 8640))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_271_X)
            mstore(add(g, 0x20), PUB_271_Y)
            s :=  calldataload(add(input, 8672))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_272_X)
            mstore(add(g, 0x20), PUB_272_Y)
            s :=  calldataload(add(input, 8704))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_273_X)
            mstore(add(g, 0x20), PUB_273_Y)
            s :=  calldataload(add(input, 8736))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_274_X)
            mstore(add(g, 0x20), PUB_274_Y)
            s :=  calldataload(add(input, 8768))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_275_X)
            mstore(add(g, 0x20), PUB_275_Y)
            s :=  calldataload(add(input, 8800))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_276_X)
            mstore(add(g, 0x20), PUB_276_Y)
            s :=  calldataload(add(input, 8832))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_277_X)
            mstore(add(g, 0x20), PUB_277_Y)
            s :=  calldataload(add(input, 8864))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_278_X)
            mstore(add(g, 0x20), PUB_278_Y)
            s :=  calldataload(add(input, 8896))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_279_X)
            mstore(add(g, 0x20), PUB_279_Y)
            s :=  calldataload(add(input, 8928))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_280_X)
            mstore(add(g, 0x20), PUB_280_Y)
            s :=  calldataload(add(input, 8960))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_281_X)
            mstore(add(g, 0x20), PUB_281_Y)
            s :=  calldataload(add(input, 8992))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_282_X)
            mstore(add(g, 0x20), PUB_282_Y)
            s :=  calldataload(add(input, 9024))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_283_X)
            mstore(add(g, 0x20), PUB_283_Y)
            s :=  calldataload(add(input, 9056))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_284_X)
            mstore(add(g, 0x20), PUB_284_Y)
            s :=  calldataload(add(input, 9088))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_285_X)
            mstore(add(g, 0x20), PUB_285_Y)
            s :=  calldataload(add(input, 9120))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_286_X)
            mstore(add(g, 0x20), PUB_286_Y)
            s :=  calldataload(add(input, 9152))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_287_X)
            mstore(add(g, 0x20), PUB_287_Y)
            s :=  calldataload(add(input, 9184))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_288_X)
            mstore(add(g, 0x20), PUB_288_Y)
            s :=  calldataload(add(input, 9216))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_289_X)
            mstore(add(g, 0x20), PUB_289_Y)
            s :=  calldataload(add(input, 9248))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_290_X)
            mstore(add(g, 0x20), PUB_290_Y)
            s :=  calldataload(add(input, 9280))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_291_X)
            mstore(add(g, 0x20), PUB_291_Y)
            s :=  calldataload(add(input, 9312))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_292_X)
            mstore(add(g, 0x20), PUB_292_Y)
            s :=  calldataload(add(input, 9344))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_293_X)
            mstore(add(g, 0x20), PUB_293_Y)
            s :=  calldataload(add(input, 9376))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_294_X)
            mstore(add(g, 0x20), PUB_294_Y)
            s :=  calldataload(add(input, 9408))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_295_X)
            mstore(add(g, 0x20), PUB_295_Y)
            s :=  calldataload(add(input, 9440))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_296_X)
            mstore(add(g, 0x20), PUB_296_Y)
            s :=  calldataload(add(input, 9472))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_297_X)
            mstore(add(g, 0x20), PUB_297_Y)
            s :=  calldataload(add(input, 9504))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_298_X)
            mstore(add(g, 0x20), PUB_298_Y)
            s :=  calldataload(add(input, 9536))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_299_X)
            mstore(add(g, 0x20), PUB_299_Y)
            s :=  calldataload(add(input, 9568))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_300_X)
            mstore(add(g, 0x20), PUB_300_Y)
            s :=  calldataload(add(input, 9600))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_301_X)
            mstore(add(g, 0x20), PUB_301_Y)
            s :=  calldataload(add(input, 9632))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_302_X)
            mstore(add(g, 0x20), PUB_302_Y)
            s :=  calldataload(add(input, 9664))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_303_X)
            mstore(add(g, 0x20), PUB_303_Y)
            s :=  calldataload(add(input, 9696))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_304_X)
            mstore(add(g, 0x20), PUB_304_Y)
            s :=  calldataload(add(input, 9728))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_305_X)
            mstore(add(g, 0x20), PUB_305_Y)
            s :=  calldataload(add(input, 9760))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_306_X)
            mstore(add(g, 0x20), PUB_306_Y)
            s :=  calldataload(add(input, 9792))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_307_X)
            mstore(add(g, 0x20), PUB_307_Y)
            s :=  calldataload(add(input, 9824))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_308_X)
            mstore(add(g, 0x20), PUB_308_Y)
            s :=  calldataload(add(input, 9856))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_309_X)
            mstore(add(g, 0x20), PUB_309_Y)
            s :=  calldataload(add(input, 9888))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_310_X)
            mstore(add(g, 0x20), PUB_310_Y)
            s :=  calldataload(add(input, 9920))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_311_X)
            mstore(add(g, 0x20), PUB_311_Y)
            s :=  calldataload(add(input, 9952))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_312_X)
            mstore(add(g, 0x20), PUB_312_Y)
            s :=  calldataload(add(input, 9984))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_313_X)
            mstore(add(g, 0x20), PUB_313_Y)
            s :=  calldataload(add(input, 10016))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_314_X)
            mstore(add(g, 0x20), PUB_314_Y)
            s :=  calldataload(add(input, 10048))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_315_X)
            mstore(add(g, 0x20), PUB_315_Y)
            s :=  calldataload(add(input, 10080))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_316_X)
            mstore(add(g, 0x20), PUB_316_Y)
            s :=  calldataload(add(input, 10112))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_317_X)
            mstore(add(g, 0x20), PUB_317_Y)
            s :=  calldataload(add(input, 10144))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_318_X)
            mstore(add(g, 0x20), PUB_318_Y)
            s :=  calldataload(add(input, 10176))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_319_X)
            mstore(add(g, 0x20), PUB_319_Y)
            s :=  calldataload(add(input, 10208))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_320_X)
            mstore(add(g, 0x20), PUB_320_Y)
            s :=  calldataload(add(input, 10240))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_321_X)
            mstore(add(g, 0x20), PUB_321_Y)
            s :=  calldataload(add(input, 10272))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_322_X)
            mstore(add(g, 0x20), PUB_322_Y)
            s :=  calldataload(add(input, 10304))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_323_X)
            mstore(add(g, 0x20), PUB_323_Y)
            s :=  calldataload(add(input, 10336))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_324_X)
            mstore(add(g, 0x20), PUB_324_Y)
            s :=  calldataload(add(input, 10368))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_325_X)
            mstore(add(g, 0x20), PUB_325_Y)
            s :=  calldataload(add(input, 10400))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_326_X)
            mstore(add(g, 0x20), PUB_326_Y)
            s :=  calldataload(add(input, 10432))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_327_X)
            mstore(add(g, 0x20), PUB_327_Y)
            s :=  calldataload(add(input, 10464))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_328_X)
            mstore(add(g, 0x20), PUB_328_Y)
            s :=  calldataload(add(input, 10496))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_329_X)
            mstore(add(g, 0x20), PUB_329_Y)
            s := mload(publicCommitments)
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))

            x := mload(f)
            y := mload(add(f, 0x20))
        }
        if (!success) {
            // Either Public input not in field, or verification key invalid.
            // We assume the contract is correctly generated, so the verification key is valid.
            revert PublicInputNotInField();
        }
    }

    /// Compress a proof.
    /// @notice Will revert with InvalidProof if the curve points are invalid,
    /// but does not verify the proof itself.
    /// @param proof The uncompressed Groth16 proof. Elements are in the same order as for
    /// verifyProof. I.e. Groth16 points (A, B, C) encoded as in EIP-197.
    /// @param commitments Pedersen commitments from the proof.
    /// @param commitmentPok proof of knowledge for the Pedersen commitments.
    /// @return compressed The compressed proof. Elements are in the same order as for
    /// verifyCompressedProof. I.e. points (A, B, C) in compressed format.
    /// @return compressedCommitments compressed Pedersen commitments from the proof.
    /// @return compressedCommitmentPok compressed proof of knowledge for the Pedersen commitments.
    function compressProof(
        uint256[8] calldata proof,
        uint256[2] calldata commitments,
        uint256[2] calldata commitmentPok
    )
    public view returns (
        uint256[4] memory compressed,
        uint256[1] memory compressedCommitments,
        uint256 compressedCommitmentPok
    ) {
        compressed[0] = compress_g1(proof[0], proof[1]);
        (compressed[2], compressed[1]) = compress_g2(proof[3], proof[2], proof[5], proof[4]);
        compressed[3] = compress_g1(proof[6], proof[7]);
        compressedCommitments[0] = compress_g1(commitments[0], commitments[1]);
        compressedCommitmentPok = compress_g1(commitmentPok[0], commitmentPok[1]);
    }

    /// Verify a Groth16 proof with compressed points.
    /// @notice Reverts with InvalidProof if the proof is invalid or
    /// with PublicInputNotInField the public input is not reduced.
    /// @notice There is no return value. If the function does not revert, the
    /// proof was successfully verified.
    /// @param compressedProof the points (A, B, C) in compressed format
    /// matching the output of compressProof.
    /// @param compressedCommitments compressed Pedersen commitments from the proof.
    /// @param compressedCommitmentPok compressed proof of knowledge for the Pedersen commitments.
    /// @param input the public input field elements in the scalar field Fr.
    /// Elements must be reduced.
    function verifyCompressedProof(
        uint256[4] calldata compressedProof,
        uint256[1] calldata compressedCommitments,
        uint256 compressedCommitmentPok,
        uint256[329] calldata input
    ) public view {
        uint256[1] memory publicCommitments;
        uint256[2] memory commitments;
        uint256[24] memory pairings;
        {
            (commitments[0], commitments[1]) = decompress_g1(compressedCommitments[0]);
            (uint256 Px, uint256 Py) = decompress_g1(compressedCommitmentPok);

            uint256[] memory publicAndCommitmentCommitted;
            publicAndCommitmentCommitted = new uint256[](86);
            assembly ("memory-safe") {
                let publicAndCommitmentCommittedOffset := add(publicAndCommitmentCommitted, 0x20)
                calldatacopy(add(publicAndCommitmentCommittedOffset, 0), add(input, 7712), 2752)
            }

            publicCommitments[0] = uint256(
                keccak256(
                    abi.encodePacked(
                        commitments[0],
                        commitments[1],
                        publicAndCommitmentCommitted
                    )
                )
            ) % R;
            // Commitments
            pairings[ 0] = commitments[0];
            pairings[ 1] = commitments[1];
            pairings[ 2] = PEDERSEN_GSIGMANEG_X_1;
            pairings[ 3] = PEDERSEN_GSIGMANEG_X_0;
            pairings[ 4] = PEDERSEN_GSIGMANEG_Y_1;
            pairings[ 5] = PEDERSEN_GSIGMANEG_Y_0;
            pairings[ 6] = Px;
            pairings[ 7] = Py;
            pairings[ 8] = PEDERSEN_G_X_1;
            pairings[ 9] = PEDERSEN_G_X_0;
            pairings[10] = PEDERSEN_G_Y_1;
            pairings[11] = PEDERSEN_G_Y_0;

            // Verify pedersen commitments
            bool success;
            assembly ("memory-safe") {
                let f := mload(0x40)

                success := staticcall(gas(), PRECOMPILE_VERIFY, pairings, 0x180, f, 0x20)
                success := and(success, mload(f))
            }
            if (!success) {
                revert CommitmentInvalid();
            }
        }

        {
            (uint256 Ax, uint256 Ay) = decompress_g1(compressedProof[0]);
            (uint256 Bx0, uint256 Bx1, uint256 By0, uint256 By1) = decompress_g2(compressedProof[2], compressedProof[1]);
            (uint256 Cx, uint256 Cy) = decompress_g1(compressedProof[3]);
            (uint256 Lx, uint256 Ly) = publicInputMSM(
                input,
                publicCommitments,
                commitments
            );

            // Verify the pairing
            // Note: The precompile expects the F2 coefficients in big-endian order.
            // Note: The pairing precompile rejects unreduced values, so we won't check that here.
            // e(A, B)
            pairings[ 0] = Ax;
            pairings[ 1] = Ay;
            pairings[ 2] = Bx1;
            pairings[ 3] = Bx0;
            pairings[ 4] = By1;
            pairings[ 5] = By0;
            // e(C, -δ)
            pairings[ 6] = Cx;
            pairings[ 7] = Cy;
            pairings[ 8] = DELTA_NEG_X_1;
            pairings[ 9] = DELTA_NEG_X_0;
            pairings[10] = DELTA_NEG_Y_1;
            pairings[11] = DELTA_NEG_Y_0;
            // e(α, -β)
            pairings[12] = ALPHA_X;
            pairings[13] = ALPHA_Y;
            pairings[14] = BETA_NEG_X_1;
            pairings[15] = BETA_NEG_X_0;
            pairings[16] = BETA_NEG_Y_1;
            pairings[17] = BETA_NEG_Y_0;
            // e(L_pub, -γ)
            pairings[18] = Lx;
            pairings[19] = Ly;
            pairings[20] = GAMMA_NEG_X_1;
            pairings[21] = GAMMA_NEG_X_0;
            pairings[22] = GAMMA_NEG_Y_1;
            pairings[23] = GAMMA_NEG_Y_0;

            // Check pairing equation.
            bool success;
            uint256[1] memory output;
            assembly ("memory-safe") {
                success := staticcall(gas(), PRECOMPILE_VERIFY, pairings, 0x300, output, 0x20)
            }
            if (!success || output[0] != 1) {
                // Either proof or verification key invalid.
                // We assume the contract is correctly generated, so the verification key is valid.
                revert ProofInvalid();
            }
        }
    }

    /// Verify an uncompressed Groth16 proof.
    /// @notice Reverts with InvalidProof if the proof is invalid or
    /// with PublicInputNotInField the public input is not reduced.
    /// @notice There is no return value. If the function does not revert, the
    /// proof was successfully verified.
    /// @param proof the points (A, B, C) in EIP-197 format matching the output
    /// of compressProof.
    /// @param commitments the Pedersen commitments from the proof.
    /// @param commitmentPok the proof of knowledge for the Pedersen commitments.
    /// @param input the public input field elements in the scalar field Fr.
    /// Elements must be reduced.
    function verifyProof(
        uint256[8] calldata proof,
        uint256[2] calldata commitments,
        uint256[2] calldata commitmentPok,
        uint256[329] calldata input
    ) public view {
        // HashToField
        uint256[1] memory publicCommitments;
        uint256[] memory publicAndCommitmentCommitted;
        publicAndCommitmentCommitted = new uint256[](86);
        assembly ("memory-safe") {
            let publicAndCommitmentCommittedOffset := add(publicAndCommitmentCommitted, 0x20)
            calldatacopy(add(publicAndCommitmentCommittedOffset, 0), add(input, 7712), 2752)
        }

            publicCommitments[0] = uint256(
                keccak256(
                    abi.encodePacked(
                        commitments[0],
                        commitments[1],
                        publicAndCommitmentCommitted
                    )
                )
            ) % R;

        // Verify pedersen commitments
        bool success;
        assembly ("memory-safe") {
            let f := mload(0x40)

            calldatacopy(f, commitments, 0x40) // Copy Commitments
            mstore(add(f, 0x40), PEDERSEN_GSIGMANEG_X_1)
            mstore(add(f, 0x60), PEDERSEN_GSIGMANEG_X_0)
            mstore(add(f, 0x80), PEDERSEN_GSIGMANEG_Y_1)
            mstore(add(f, 0xa0), PEDERSEN_GSIGMANEG_Y_0)
            calldatacopy(add(f, 0xc0), commitmentPok, 0x40)
            mstore(add(f, 0x100), PEDERSEN_G_X_1)
            mstore(add(f, 0x120), PEDERSEN_G_X_0)
            mstore(add(f, 0x140), PEDERSEN_G_Y_1)
            mstore(add(f, 0x160), PEDERSEN_G_Y_0)

            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x180, f, 0x20)
            success := and(success, mload(f))
        }
        if (!success) {
            revert CommitmentInvalid();
        }

        (uint256 x, uint256 y) = publicInputMSM(
            input,
            publicCommitments,
            commitments
        );

        // Note: The precompile expects the F2 coefficients in big-endian order.
        // Note: The pairing precompile rejects unreduced values, so we won't check that here.
        assembly ("memory-safe") {
            let f := mload(0x40) // Free memory pointer.

            // Copy points (A, B, C) to memory. They are already in correct encoding.
            // This is pairing e(A, B) and G1 of e(C, -δ).
            calldatacopy(f, proof, 0x100)

            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.
            // OPT: This could be better done using a single codecopy, but
            //      Solidity (unlike standalone Yul) doesn't provide a way to
            //      to do this.
            mstore(add(f, 0x100), DELTA_NEG_X_1)
            mstore(add(f, 0x120), DELTA_NEG_X_0)
            mstore(add(f, 0x140), DELTA_NEG_Y_1)
            mstore(add(f, 0x160), DELTA_NEG_Y_0)
            mstore(add(f, 0x180), ALPHA_X)
            mstore(add(f, 0x1a0), ALPHA_Y)
            mstore(add(f, 0x1c0), BETA_NEG_X_1)
            mstore(add(f, 0x1e0), BETA_NEG_X_0)
            mstore(add(f, 0x200), BETA_NEG_Y_1)
            mstore(add(f, 0x220), BETA_NEG_Y_0)
            mstore(add(f, 0x240), x)
            mstore(add(f, 0x260), y)
            mstore(add(f, 0x280), GAMMA_NEG_X_1)
            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)
            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)
            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)

            // Check pairing equation.
            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x300, f, 0x20)
            // Also check returned value (both are either 1 or 0).
            success := and(success, mload(f))
        }
        if (!success) {
            // Either proof or verification key invalid.
            // We assume the contract is correctly generated, so the verification key is valid.
            revert ProofInvalid();
        }
    }
}
