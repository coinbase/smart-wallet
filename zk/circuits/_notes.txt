Components:
    - JWT:
        - Header:
            - kid: IDP key ID
            - alg: RS256
            - typ: JWT
        - Payload:
            - iss: IDP issuer
            - aud: App
            - sub: user id in the IDP
            - nonce: base64(userPk)

    - UserSalt: pseudorandomly generated by a Salt Service given (iss, aud, sub)
    - zkAddr: hash(iss, aud, sub, UserSalt)

    - User offchain identity: JWT
    - User onchain identity: (Account, zkAddr)
        - The user account (Smart Wallet) must individually authorize the zkAddr that are allowed to recover it.

Parties:
    - IDP: allows the user to login and get a JWT
        - Know user offchain identity
        - Know the userPk written in the JWT's nonce
        - Link the userPk in the JWT's nonce to the user onchain identity
        - Forge arbitrary JWT

    - Salt Service: generates deterministic salts for a given (iss, aud, sub)
        - (iss, aud, sub) -> UserSalt
            return hash(secretSeed, iss, aud, sub, counter?)
        - Know user offchain identity
        - Know user onchain identity

    - Observer:
        - Read the blockchain
            
Security:

    Unlinkability: This property captures the inability of any party (except the app) to link a user’s offchain and onchain identities.
    That is, no one can link a user’s IDP issued identifier, the app they used, or any other sensitive field in the JWT, with their 
    zkAddr blockchain account. The only exception is the iss claim, i.e., the unlinkability property does not mandate that the issuer be
    unlinkable.

    - IDP:
        - Unforgeability:
            - Should not be able to sign transactions for the user
                - Mitigated by the fact that the IDP does not know the userSk
            - Should not be able to trigger an account recovery by itself
                - Mitigated by the fact that the IDP does not know the UserSalt which is a required private input
                  to generated the zkAddr in the circuit
        - Unlinkability:
            - Should not be able to link to the user onchain identity.
                - NOT MITIGATED: It can link to the user onchain identity from the JWT's nonce which exposes the userPk.
                  This could be mitigated by making the JWT nonce = hash(userPk, r)

    - Salt Service:
        - Unforgeability:
            - Should not be able to sign transactions for the user
                - Mitigated by the fact that the Salt Service does not know the userSk
            - Should not be able to trigger an account recovery by itself
                - Mitigated by the fact that the Salt Service can not generate arbitrary JWTs.
        - Unlinkability:
            - NOT MITIGATED: The Salft Service will always be able to link as it receives the (iss, aud, sub)
              and generates the UserSalt from that.

    - Observer:
         - Unforgeability:
            - Should not be able to sign transactions for the user
                - Mitigated by the fact that the Observer does not know the userSk
            - Should not be able to trigger an account recovery by itself
                - Mitigated by the fact that the Observer can not generate arbitrary JWTs AND the UserSalt is not exposed
        - Unlinkability:
            - Mitigated by the fact that the Observer never sees the JWT payload
